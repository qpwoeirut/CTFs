import ast
import collections

grid = """
89	444	610	120	459	604	524	511	150	385	602	179	51	571	237	240	82	9	460	465	33	455	444	254	444	323
253	122	119	312	612	220	499	561	584	345	133	293	222	210	212	460	297	490	423	46	70	140	26	305	444	375
117	259	420	338	92	123	495	444	105	300	511	66	453	116	502	117	172	202	174	286	545	241	211	454	276	613
315	520	354	418	417	30	15	540	305	565	307	354	384	14	170	72	332	551	608	282	70	132	114	124	295	331
299	125	556	401	353	23	122	444	444	522	329	223	23	312	602	395	297	626	440	552	432	27	235	79	291	444
342	235	141	572	51	182	443	185	192	287	299	476	215	99	130	493	192	134	145	597	601	322	584	125	81	554
444	59	380	262	444	592	541	164	369	309	524	199	234	449	321	301	460	491	154	439	362	196	135	330	367	600
25	548	473	185	41	84	70	202	43	503	85	46	524	95	55	67	403	91	12	487	77	41	322	493	149	318
112	480	542	623	267	556	319	205	70	442	37	22	228	493	482	379	465	517	622	586	537	230	223	414	507	233
415	386	24	298	371	450	119	500	358	38	43	57	523	151	204	557	220	71	109	279	609	444	28	422	121	532
233	384	511	155	447	550	424	45	104	97	144	360	581	498	570	362	607	512	253	186	387	517	479	116	471	106
435	462	191	70	414	45	341	444	156	512	219	94	113	388	477	608	516	274	426	119	519	82	55	51	205	34
258	221	119	598	593	215	495	53	503	401	223	338	154	530	512	461	52	563	406	488	299	483	444	108	407	445
550	70	5	493	374	4	444	249	162	547	86	50	600	132	52	118	465	114	619	517	416	396	192	117	161	431
339	526	252	526	390	57	86	22	389	421	139	444	583	573	96	444	483	114	518	154	103	82	367	411	457	422
165	240	261	59	387	261	66	588	444	429	503	2	331	78	245	471	17	168	220	590	283	206	316	572	612	139
498	384	450	551	24	124	261	431	516	261	333	550	540	207	444	39	455	552	362	292	542	206	233	177	451	376
625	512	494	215	489	611	104	68	286	497	175	500	298	64	101	313	320	444	466	80	279	155	610	510	257	116
428	128	204	388	57	225	183	430	329	596	196	590	26	36	145	115	271	148	75	202	8	512	508	444	10	103
133	374	200	321	364	131	454	97	528	372	255	3	168	577	611	79	622	40	313	182	269	47	367	270	614	525
601	514	11	85	292	30	266	357	458	84	409	91	559	245	527	106	42	551	443	350	36	1	158	615	549	444
551	166	398	483	452	444	413	261	345	609	249	444	281	183	444	171	237	53	395	197	525	262	436	86	165	145
217	299	353	259	98	159	310	373	222	1	121	624	513	303	235	340	608	89	161	185	379	306	541	621	169	624
33	183	562	355	263	205	43	74	549	10	378	294	286	157	50	219	359	24	467	291	575	475	66	533	615	604
459	549	326	197	61	449	452	376	454	529	444	388	332	93	173	54	391	194	152	64	325	395	282	464	537	51
53	499	617	122	9	189	303	560	380	149	475	377	339	64	496	473	217	83	163	69	409	208	385	218	511	534"""
grid = [list(map(int, row.split())) for row in grid.split('\n')]

print(grid)
elems = [val for row in grid for val in row]
print(elems)
print(collections.Counter(elems))


def get_path(start) -> list[int]:
    i = start
    path = [i]
    for _ in range(676):
        i = elems[i - 1]
        if i in path:
            break
        path.append(i)
    return path


lines = """
(((25, 189), 307), 54)
((458, 429), 319)
(420, 4)
((174, 2), 290)
(((323, 42), 8), 113)
(((12, 396), 530), 570)
(295, 28)
((83, 80), 93)
(((294, 96), 557), 40)
(464, 34)
(81, 177)
""".strip().split('\n')

lines = [ast.literal_eval(line) for line in lines]
print(lines)


def flatten(t: tuple) -> list:
    assert isinstance(t[1], int)
    assert len(t) == 2
    if isinstance(t[0], int):
        return [t[0], t[1]]
    return [*flatten(t[0]), t[1]]


for line in lines:
    nums = flatten(line)
    total = 0
    for num in nums:
        path = get_path(num)
        total += len(path)
    print(total, line, chr(total))
