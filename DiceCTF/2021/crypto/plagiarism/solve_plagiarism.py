# http://blog.redrocket.club/2017/11/27/TUCTF-CryptoClock/
# https://link.springer.com/content/pdf/10.1007%2F3-540-68339-9_1.pdf
# this takes too long

from binascii import hexlify
from sympy import poly, randprime, Symbol
from time import time
from utils.basics import hex_to_ascii
from utils.rsa.rsa_util import plaintext_pq

DIFF = 150276333
BITS = 1024


def test():
    # p, q = 17, 29
    p = randprime(1 << (BITS - 1), 1 << BITS)
    q = randprime(1 << (BITS - 1), 1 << BITS)
    n = p * q
    e = 0x501
    print("p =", p)
    print("q =", q)
    print("n =", n)
    print("e =", e)

    m1 = int(hexlify(b"very very very very very very very very long message ending in Blex"), 16)
    m2 = int(hexlify(b"very very very very very very very very long message ending in Kane"), 16)
    # print("m1=", m1)
    # print("m2=", m2)
    assert m1 + DIFF == m2
    assert m1 < n
    assert m2 < n

    c1 = pow(m1, e, n)
    c2 = pow(m2, e, n)
    # print("c1=", c1)
    # print("c2=", c2)

    z = Symbol("z", integer=True)

    p1 = poly(z ** e - c1, domain=f"Z[{n}]").set_modulus(n)
    start = time()
    p2 = poly((z + DIFF) ** e - c2 % n, domain=f"Z[{n}]").set_modulus(n)
    print(time() - start)
    # print("p1=", p1)
    # print("p2=", p2)

    start = time()
    # g = modgcd_univariate(p1, p2)
    g = p1.gcd(p2)
    print(time() - start)
    print("g =", g)
    m = -g.coeffs()[-1]

    print(m)
    print(hex_to_ascii(plaintext_pq(c1, e, p, q)))
    print(hex_to_ascii(plaintext_pq(c2, e, p, q)))
    assert m == plaintext_pq(c1, e, p, q)


def main():
    n = 25898966400928827905718377946331123070958718286581765316565582158865227877882475404853218079499084099440419144196215764927720893687968939899067275095801562867742359933997487928281899714724738097735994026225339488710478292473051567851786254924548138570069406420407124627567648479424564834446192417334669768477661434992797176428220265984651288944265998446714590797833756720922745187467388408600309665467669255896919554072379878017822219455974525233467767926938557154083882126002952139561283708342676308894318951822068027821029295524097544028901807902120777407151278396388621981625398417573347316888458337381776303199529
    e = 1048577

    print("n =", n)
    print("e =", e)

    c1 = 11140520553087800834883326476247582685177207584737264356946559762068509060522907835540767944557089926814767920501376431871780404000550271362410228709616559148950928004959648199391157781102695421411667843970881959939688515679415870087007797819271601359811630724878746762862603629420061133824605384527474682526549557804674160851967543475275374840169790764048711047622418045734436512050742433282306694490346907876574514077395835974083376649624559301087384766644865104383786285302561584731767419571603248493060257358632833957327996996960955767927114473513709882904104552609194519132931270741118197821776138632855021619178
    c2 = 2922817623733019475805146570530296261205732600738503605503192845278422660686627490817081424885152809772315629265930072636690234953045955503581182067349322827011065359648958225896393305011175960879100475146203207801533980643261035226402857047007061320653920746872424363923515091038846823007819033456503365649022294092944985887626605207259444051959239244136999684366533551627508385114998024232490369665950339127904350803268889205463047713233591604324960184727360413931125906144631968128488876241314939855024305076160092193380013725939761970042406866169417457376487954247442308318888399299295082898238584625937490546472

    z = Symbol("z")
    p1 = poly(z ** e - c1 % n).set_modulus(n)
    p2 = poly((z + DIFF) ** e - c2 % n).set_modulus(n)
    print("p1=", p1)
    print("p2=", p2)

    g = p1.gcd(p2)
    print("g =", g)
    m = -g.coeffs()[-1]
    print("d =", g.degree())
    print("test g:", poly(z ** 2 - 1, z).gcd(poly(z ** 2 - 3 * z + 2, z)))

    print(m)
    print(hex_to_ascii(m))


if __name__ == "__main__":
    # test()
    # main()
    print(hex_to_ascii(736174144772416718605406283529743241792152240206413170679921229631975722268402785667570615223325877057397514147173497175530180808010578247824430532166489844329047787849728049828460750752754014555628844699450822200950142079056299758738948025292593933608312))
