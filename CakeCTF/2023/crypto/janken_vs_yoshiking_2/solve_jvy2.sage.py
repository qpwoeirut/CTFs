

# This file was *autogenerated* from the file solve_jvy2.sage
from sage.all_cmdline import *   # import sage library

_sage_const_1719620105458406433483340568317543019584575635895742560438771105058321655238562613083979651479555788009994557822024565226932906295208262756822275663694111 = Integer(1719620105458406433483340568317543019584575635895742560438771105058321655238562613083979651479555788009994557822024565226932906295208262756822275663694111); _sage_const_5 = Integer(5); _sage_const_1 = Integer(1); _sage_const_3 = Integer(3); _sage_const_0 = Integer(0); _sage_const_10555 = Integer(10555); _sage_const_4 = Integer(4); _sage_const_7 = Integer(7); _sage_const_101 = Integer(101)
from pwn import process, remote

p = _sage_const_1719620105458406433483340568317543019584575635895742560438771105058321655238562613083979651479555788009994557822024565226932906295208262756822275663694111 

G = GL(_sage_const_5 , GF(p))
n = G.order()
print(n)
n2 = n
k = _sage_const_1 
while n2 % _sage_const_3  == _sage_const_0 :
    n2 = n2 // _sage_const_3 
    k = k * _sage_const_3 


def solve(g_i, Mr):
    h_i = Mr ** (n // k)

    g_j = g_i
    for i in range(_sage_const_1 , k):
        if g_j == h_i:
            return i % _sage_const_3 
        g_j *= g_i
    raise ValueError("sob")


# r = process(["sage", "server.sage"])
r = remote("crypto.2023.cakectf.com", int(_sage_const_10555 ))

r.recvline()
line = r.recvline().decode().split()
p = int(line[_sage_const_4 ].strip(','))
M = list(map(lambda x: int(x.strip("[,]")), line[_sage_const_7 :]))
M = matrix(GF(p), [[M[_sage_const_5  * r + c] for c in range(_sage_const_5 )] for r in range(_sage_const_5 )])
g_i = M ** (n // k)

for rnd in range(_sage_const_1 , _sage_const_101 ):
    print(r.recvuntil(f"[system]: ROUND {rnd}\n".encode()).decode())
    Mr = list(map(lambda x: int(x.strip('is=[,]')), r.recvline().decode().split()[_sage_const_3 :]))
    Mr = matrix(GF(p), [[Mr[_sage_const_5  * r + c] for c in range(_sage_const_5 )] for r in range(_sage_const_5 )])

    hand = "312"[solve(g_i, Mr)]  # rotate so that we win
    r.sendline(hand)

    print(r.recvline(keepends=False).decode())
    print(r.recvline(keepends=False).decode())
    print(r.recvline(keepends=False).decode())
    print(r.recvline(keepends=False).decode())

print(r.recvall(timeout=_sage_const_1 ))

