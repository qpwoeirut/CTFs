

# This file was *autogenerated* from the file chall.sage
from sage.all_cmdline import *   # import sage library

_sage_const_16 = Integer(16); _sage_const_1 = Integer(1); _sage_const_2 = Integer(2); _sage_const_32 = Integer(32); _sage_const_0 = Integer(0)
from random import SystemRandom
random = SystemRandom()

def fun_prime(n): # not as smooth as my brain but should be enough
    while True:
        ps = _sage_const_16 
        p = _sage_const_1 
        for i in range(n//ps):
            p *= random_prime(_sage_const_2 **ps)
        p += _sage_const_1 
        if is_prime(p):
            return p
def gen(b):
    p = fun_prime(b)
    E = EllipticCurve(GF(p), [random.randint(_sage_const_1 , _sage_const_2 **b), random.randint(_sage_const_1 ,_sage_const_2 **b)])
    return E, p, E.order()

C, p, order = gen(_sage_const_32 )
# woah thats an lcg
class lcg:
    def __init__(self, C: EllipticCurve):
        self.order = order
        self.a = random.randint(_sage_const_1 , self.order)
        self.x = C.gens()[_sage_const_0 ]
        r = random.randint(_sage_const_1 , self.order)
        self.b = self.x * r
        print(self.a, r, self.x)
        print(type(self.x))
        print(self.x * _sage_const_2 )
        print(self.x.xy()[_sage_const_0 ] * _sage_const_2 )
    def next(self):
        self.x = (self.a * self.x + self.b)
        return self.x

prng = lcg(C)
x0 = prng.next()  # ax + bx  -> aaxx + 2abxx + bbxx
x1 = prng.next()  # aax + abx + bx -> aaaaxx + aabbxx + bbxx + 2aaabxx + 2aabxx + 2abbxx
x0, y0 = x0.xy()
x1, y1 = x1.xy()
print(f"{x0 = }")
print(f"{y0 = }")
print(f"{x1 = }")
print(f"{y1 = }")
print(f"{p = }")

from Crypto.Cipher import AES
from Crypto.Util.number import long_to_bytes as l2b
from Crypto.Util.Padding import pad
from os import urandom
v = int(prng.next().xy()[_sage_const_0 ])  # aaax + aabx + abx + bx
print(v, v % p)
k = pad(l2b(v**_sage_const_2 ), _sage_const_16 )  # aaaaaaxx + aaaabbxx + aabbxx + bbxx + 2aaaaabxx + 2aaaabxx + 2aaabxx + 2aaabbxx + 2aabbxx + 2abbxx
iv = urandom(_sage_const_16 )
cipher = AES.new(k, AES.MODE_CBC, iv=iv)
print(f"iv = '{iv.hex()}'")
f = open("flag.txt",'rb').read().strip()
enc = cipher.encrypt(pad(f,_sage_const_16 ))
print(f"enc = '{enc.hex()}'")

