export memory memory(initial: 258, max: 258);

global g_a:int = 65536;
global g_b:int = 0;
global g_c:int = 0;
global g_d:int = 0;

export table indirect_function_table:funcref(min: 1, max: 1);

data d_a(offset: 65536) = "\10\02\01\00";

import function env_emscripten_resize_heap(a:int):int;

export function wasm_call_ctors() {
  emscripten_stack_init()
}

export function check_flag(a:int):int {
  var b:int = g_a;
  var c:int = 80;
  var d:int = b - c;
  g_a = d;
  d[18]:int = a;
  var e:int = d[18]:int;
  var f:int = f_e(e);
  d[17]:int = f;
  var g:int = 70;
  d[51]:byte = g;
  var h:int = d[51]:ubyte;
  var i:int = 24;
  var j:int = h << i;
  var k:int = j >> i;
  var l:int = 23;
  var m:int = k ^ l;
  d[51]:byte = m;
  var n:int = d[51]:ubyte;
  var o:int = 24;
  var p:int = n << o;
  var q:int = p >> o;
  var r:int = 17;
  var s:int = q ^ r;
  d[51]:byte = s;
  var t:int = d[51]:ubyte;
  var u:int = 24;
  var v:int = t << u;
  var w:int = v >> u;
  var x:int = 82;
  var y:int = w ^ x;
  d[51]:byte = y;
  var z:int = d[51]:ubyte;
  var aa:int = 24;
  var ba:int = z << aa;
  var ca:int = ba >> aa;
  var da:int = 76;
  var ea:int = ca ^ da;
  d[51]:byte = ea;
  var fa:int = d[51]:ubyte;
  var ga:int = 24;
  var ha:int = fa << ga;
  var ia:int = ha >> ga;
  var ja:int = 7;
  var ka:int = ia ^ ja;
  d[51]:byte = ka;
  var la:int = d[51]:ubyte;
  var ma:int = 24;
  var na:int = la << ma;
  var oa:int = na >> ma;
  var pa:int = 97;
  var qa:int = oa ^ pa;
  d[51]:byte = qa;
  var ra:int = d[51]:ubyte;
  var sa:int = 24;
  var ta:int = ra << sa;
  var ua:int = ta >> sa;
  var va:int = 68;
  var wa:int = ua ^ va;
  d[51]:byte = wa;
  var xa:int = d[51]:ubyte;
  var ya:int = 24;
  var za:int = xa << ya;
  var ab:int = za >> ya;
  var bb:int = 68;
  var cb:int = ab ^ bb;
  d[51]:byte = cb;
  var db:int = d[51]:ubyte;
  var eb:int = 24;
  var fb:int = db << eb;
  var gb:int = fb >> eb;
  var hb:int = 65;
  var ib:int = gb ^ hb;
  d[51]:byte = ib;
  var jb:int = d[51]:ubyte;
  var kb:int = 24;
  var lb:int = jb << kb;
  var mb:int = lb >> kb;
  var nb:int = 111;
  var ob:int = mb ^ nb;
  d[51]:byte = ob;
  var pb:int = d[51]:ubyte;
  var qb:int = 24;
  var rb:int = pb << qb;
  var sb:int = rb >> qb;
  var tb:int = 86;
  var ub:int = sb ^ tb;
  d[51]:byte = ub;
  var vb:int = d[51]:ubyte;
  var wb:int = 24;
  var xb:int = vb << wb;
  var yb:int = xb >> wb;
  var zb:int = 98;
  var ac:int = yb ^ zb;
  d[51]:byte = ac;
  var bc:int = d[51]:ubyte;
  var cc:int = 24;
  var dc:int = bc << cc;
  var ec:int = dc >> cc;
  var fc:int = 19;
  var gc:int = ec ^ fc;
  d[51]:byte = gc;
  var hc:int = d[51]:ubyte;
  var ic:int = 24;
  var jc:int = hc << ic;
  var kc:int = jc >> ic;
  var lc:int = 94;
  var mc:int = kc ^ lc;
  d[51]:byte = mc;
  var nc:int = d[51]:ubyte;
  var oc:int = 24;
  var pc:int = nc << oc;
  var qc:int = pc >> oc;
  var rc:int = 1;
  var sc:int = qc ^ rc;
  d[51]:byte = sc;
  var tc:int = d[51]:ubyte;
  var uc:int = 24;
  var vc:int = tc << uc;
  var wc:int = vc >> uc;
  var xc:int = 0;
  var yc:int = wc ^ xc;
  d[51]:byte = yc;
  var zc:int = d[51]:ubyte;
  var ad:int = 24;
  var bd:int = zc << ad;
  var cd:int = bd >> ad;
  var dd:int = 104;
  var ed:int = cd ^ dd;
  d[51]:byte = ed;
  var fd:int = d[51]:ubyte;
  var gd:int = 24;
  var hd:int = fd << gd;
  var id:int = hd >> gd;
  var jd:int = 113;
  var kd:int = id ^ jd;
  d[51]:byte = kd;
  var ld:int = d[51]:ubyte;
  var md:int = 24;
  var nd:int = ld << md;
  var od:int = nd >> md;
  var pd:int = 22;
  var qd:int = od ^ pd;
  d[51]:byte = qd;
  var rd:int = d[51]:ubyte;
  var sd:int = 24;
  var td:int = rd << sd;
  var ud:int = td >> sd;
  var vd:int = 21;
  var wd:int = ud ^ vd;
  d[51]:byte = wd;
  var xd:int = 83;
  d[13]:byte = xd;
  var yd:int = d[13]:ubyte;
  var zd:int = 24;
  var ae:int = yd << zd;
  var be:int = ae >> zd;
  var ce:int = 122;
  var de:int = be ^ ce;
  d[13]:byte = de;
  var ee:int = d[13]:ubyte;
  var fe:int = 24;
  var ge:int = ee << fe;
  var he:int = ge >> fe;
  var ie:int = 120;
  var je:int = he ^ ie;
  d[13]:byte = je;
  var ke:int = d[13]:ubyte;
  var le:int = 24;
  var me:int = ke << le;
  var ne:int = me >> le;
  var oe:int = 26;
  var pe:int = ne ^ oe;
  d[13]:byte = pe;
  var qe:int = d[13]:ubyte;
  var re:int = 24;
  var se:int = qe << re;
  var te:int = se >> re;
  var ue:int = 79;
  var ve:int = te ^ ue;
  d[13]:byte = ve;
  var we:int = d[13]:ubyte;
  var xe:int = 24;
  var ye:int = we << xe;
  var ze:int = ye >> xe;
  var af:int = 22;
  var bf:int = ze ^ af;
  d[13]:byte = bf;
  var cf:int = d[13]:ubyte;
  var df:int = 24;
  var ef:int = cf << df;
  var ff:int = ef >> df;
  var gf:int = 0;
  var hf:int = ff ^ gf;
  d[13]:byte = hf;
  var if:int = d[13]:ubyte;
  var jf:int = 24;
  var kf:int = if << jf;
  var lf:int = kf >> jf;
  var mf:int = 22;
  var nf:int = lf ^ mf;
  d[13]:byte = nf;
  var of:int = d[13]:ubyte;
  var pf:int = 24;
  var qf:int = of << pf;
  var rf:int = qf >> pf;
  var sf:int = 28;
  var tf:int = rf ^ sf;
  d[13]:byte = tf;
  var uf:int = d[13]:ubyte;
  var vf:int = 24;
  var wf:int = uf << vf;
  var xf:int = wf >> vf;
  var yf:int = 18;
  var zf:int = xf ^ yf;
  d[13]:byte = zf;
  var ag:int = d[13]:ubyte;
  var bg:int = 24;
  var cg:int = ag << bg;
  var dg:int = cg >> bg;
  var eg:int = 119;
  var fg:int = dg ^ eg;
  d[13]:byte = fg;
  var gg:int = d[13]:ubyte;
  var hg:int = 24;
  var ig:int = gg << hg;
  var jg:int = ig >> hg;
  var kg:int = 125;
  var lg:int = jg ^ kg;
  d[13]:byte = lg;
  var mg:int = d[13]:ubyte;
  var ng:int = 24;
  var og:int = mg << ng;
  var pg:int = og >> ng;
  var qg:int = 76;
  var rg:int = pg ^ qg;
  d[13]:byte = rg;
  var sg:int = d[13]:ubyte;
  var tg:int = 24;
  var ug:int = sg << tg;
  var vg:int = ug >> tg;
  var wg:int = 36;
  var xg:int = vg ^ wg;
  d[13]:byte = xg;
  var yg:int = d[13]:ubyte;
  var zg:int = 24;
  var ah:int = yg << zg;
  var bh:int = ah >> zg;
  var ch:int = 36;
  var dh:int = bh ^ ch;
  d[13]:byte = dh;
  var eh:int = d[13]:ubyte;
  var fh:int = 24;
  var gh:int = eh << fh;
  var hh:int = gh >> fh;
  var ih:int = 34;
  var jh:int = hh ^ ih;
  d[13]:byte = jh;
  var kh:int = d[13]:ubyte;
  var lh:int = 24;
  var mh:int = kh << lh;
  var nh:int = mh >> lh;
  var oh:int = 35;
  var ph:int = nh ^ oh;
  d[13]:byte = ph;
  var qh:int = d[13]:ubyte;
  var rh:int = 24;
  var sh:int = qh << rh;
  var th:int = sh >> rh;
  var uh:int = 80;
  var vh:int = th ^ uh;
  d[13]:byte = vh;
  var wh:int = d[13]:ubyte;
  var xh:int = 24;
  var yh:int = wh << xh;
  var zh:int = yh >> xh;
  var ai:int = 79;
  var bi:int = zh ^ ai;
  d[13]:byte = bi;
  var ci:int = d[13]:ubyte;
  var di:int = 24;
  var ei:int = ci << di;
  var fi:int = ei >> di;
  var gi:int = 83;
  var hi:int = fi ^ gi;
  d[13]:byte = hi;
  var ii:int = d[13]:ubyte;
  var ji:int = 24;
  var ki:int = ii << ji;
  var li:int = ki >> ji;
  var mi:int = 48;
  var ni:int = li ^ mi;
  d[13]:byte = ni;
  var oi:int = 37;
  d[11]:byte = oi;
  var pi:int = d[11]:ubyte;
  var qi:int = 24;
  var ri:int = pi << qi;
  var si:int = ri >> qi;
  var ti:int = 104;
  var ui:int = si ^ ti;
  d[11]:byte = ui;
  var vi:int = d[11]:ubyte;
  var wi:int = 24;
  var xi:int = vi << wi;
  var yi:int = xi >> wi;
  var zi:int = 125;
  var aj:int = yi ^ zi;
  d[11]:byte = aj;
  var bj:int = d[11]:ubyte;
  var cj:int = 24;
  var dj:int = bj << cj;
  var ej:int = dj >> cj;
  var fj:int = 27;
  var gj:int = ej ^ fj;
  d[11]:byte = gj;
  var hj:int = d[11]:ubyte;
  var ij:int = 24;
  var jj:int = hj << ij;
  var kj:int = jj >> ij;
  var lj:int = 124;
  var mj:int = kj ^ lj;
  d[11]:byte = mj;
  var nj:int = d[11]:ubyte;
  var oj:int = 24;
  var pj:int = nj << oj;
  var qj:int = pj >> oj;
  var rj:int = 75;
  var sj:int = qj ^ rj;
  d[11]:byte = sj;
  var tj:int = d[11]:ubyte;
  var uj:int = 24;
  var vj:int = tj << uj;
  var wj:int = vj >> uj;
  var xj:int = 28;
  var yj:int = wj ^ xj;
  d[11]:byte = yj;
  var zj:int = d[11]:ubyte;
  var ak:int = 24;
  var bk:int = zj << ak;
  var ck:int = bk >> ak;
  var dk:int = 55;
  var ek:int = ck ^ dk;
  d[11]:byte = ek;
  var fk:int = d[11]:ubyte;
  var gk:int = 24;
  var hk:int = fk << gk;
  var ik:int = hk >> gk;
  var jk:int = 123;
  var kk:int = ik ^ jk;
  d[11]:byte = kk;
  var lk:int = d[11]:ubyte;
  var mk:int = 24;
  var nk:int = lk << mk;
  var ok:int = nk >> mk;
  var pk:int = 42;
  var qk:int = ok ^ pk;
  d[11]:byte = qk;
  var rk:int = d[11]:ubyte;
  var sk:int = 24;
  var tk:int = rk << sk;
  var uk:int = tk >> sk;
  var vk:int = 68;
  var wk:int = uk ^ vk;
  d[11]:byte = wk;
  var xk:int = d[11]:ubyte;
  var yk:int = 24;
  var zk:int = xk << yk;
  var al:int = zk >> yk;
  var bl:int = 14;
  var cl:int = al ^ bl;
  d[11]:byte = cl;
  var dl:int = d[11]:ubyte;
  var el:int = 24;
  var fl:int = dl << el;
  var gl:int = fl >> el;
  var hl:int = 12;
  var il:int = gl ^ hl;
  d[11]:byte = il;
  var jl:int = d[11]:ubyte;
  var kl:int = 24;
  var ll:int = jl << kl;
  var ml:int = ll >> kl;
  var nl:int = 100;
  var ol:int = ml ^ nl;
  d[11]:byte = ol;
  var pl:int = d[11]:ubyte;
  var ql:int = 24;
  var rl:int = pl << ql;
  var sl:int = rl >> ql;
  var tl:int = 27;
  var ul:int = sl ^ tl;
  d[11]:byte = ul;
  var vl:int = d[11]:ubyte;
  var wl:int = 24;
  var xl:int = vl << wl;
  var yl:int = xl >> wl;
  var zl:int = 58;
  var am:int = yl ^ zl;
  d[11]:byte = am;
  var bm:int = d[11]:ubyte;
  var cm:int = 24;
  var dm:int = bm << cm;
  var em:int = dm >> cm;
  var fm:int = 19;
  var gm:int = em ^ fm;
  d[11]:byte = gm;
  var hm:int = d[11]:ubyte;
  var im:int = 24;
  var jm:int = hm << im;
  var km:int = jm >> im;
  var lm:int = 79;
  var mm:int = km ^ lm;
  d[11]:byte = mm;
  var nm:int = d[11]:ubyte;
  var om:int = 24;
  var pm:int = nm << om;
  var qm:int = pm >> om;
  var rm:int = 30;
  var sm:int = qm ^ rm;
  d[11]:byte = sm;
  var tm:int = d[11]:ubyte;
  var um:int = 24;
  var vm:int = tm << um;
  var wm:int = vm >> um;
  var xm:int = 77;
  var ym:int = wm ^ xm;
  d[11]:byte = ym;
  var zm:int = d[11]:ubyte;
  var an:int = 24;
  var bn:int = zm << an;
  var cn:int = bn >> an;
  var dn:int = 19;
  var en:int = cn ^ dn;
  d[11]:byte = en;
  var fn:int = 42;
  d[46]:byte = fn;
  var gn:int = d[46]:ubyte;
  var hn:int = 24;
  var in:int = gn << hn;
  var jn:int = in >> hn;
  var kn:int = 26;
  var ln:int = jn ^ kn;
  d[46]:byte = ln;
  var mn:int = d[46]:ubyte;
  var nn:int = 24;
  var on:int = mn << nn;
  var pn:int = on >> nn;
  var qn:int = 69;
  var rn:int = pn ^ qn;
  d[46]:byte = rn;
  var sn:int = d[46]:ubyte;
  var tn:int = 24;
  var un:int = sn << tn;
  var vn:int = un >> tn;
  var wn:int = 120;
  var xn:int = vn ^ wn;
  d[46]:byte = xn;
  var yn:int = d[46]:ubyte;
  var zn:int = 24;
  var ao:int = yn << zn;
  var bo:int = ao >> zn;
  var co:int = 121;
  var do:int = bo ^ co;
  d[46]:byte = do;
  var eo:int = d[46]:ubyte;
  var fo:int = 24;
  var go:int = eo << fo;
  var ho:int = go >> fo;
  var io:int = 47;
  var jo:int = ho ^ io;
  d[46]:byte = jo;
  var ko:int = d[46]:ubyte;
  var lo:int = 24;
  var mo:int = ko << lo;
  var no:int = mo >> lo;
  var oo:int = 53;
  var po:int = no ^ oo;
  d[46]:byte = po;
  var qo:int = d[46]:ubyte;
  var ro:int = 24;
  var so:int = qo << ro;
  var to:int = so >> ro;
  var uo:int = 32;
  var vo:int = to ^ uo;
  d[46]:byte = vo;
  var wo:int = d[46]:ubyte;
  var xo:int = 24;
  var yo:int = wo << xo;
  var zo:int = yo >> xo;
  var ap:int = 119;
  var bp:int = zo ^ ap;
  d[46]:byte = bp;
  var cp:int = d[46]:ubyte;
  var dp:int = 24;
  var ep:int = cp << dp;
  var fp:int = ep >> dp;
  var gp:int = 12;
  var hp:int = fp ^ gp;
  d[46]:byte = hp;
  var ip:int = d[46]:ubyte;
  var jp:int = 24;
  var kp:int = ip << jp;
  var lp:int = kp >> jp;
  var mp:int = 33;
  var np:int = lp ^ mp;
  d[46]:byte = np;
  var op:int = d[46]:ubyte;
  var pp:int = 24;
  var qp:int = op << pp;
  var rp:int = qp >> pp;
  var sp:int = 41;
  var tp:int = rp ^ sp;
  d[46]:byte = tp;
  var up:int = d[46]:ubyte;
  var vp:int = 24;
  var wp:int = up << vp;
  var xp:int = wp >> vp;
  var yp:int = 60;
  var zp:int = xp ^ yp;
  d[46]:byte = zp;
  var aq:int = d[46]:ubyte;
  var bq:int = 24;
  var cq:int = aq << bq;
  var dq:int = cq >> bq;
  var eq:int = 9;
  var fq:int = dq ^ eq;
  d[46]:byte = fq;
  var gq:int = d[46]:ubyte;
  var hq:int = 24;
  var iq:int = gq << hq;
  var jq:int = iq >> hq;
  var kq:int = 124;
  var lq:int = jq ^ kq;
  d[46]:byte = lq;
  var mq:int = d[46]:ubyte;
  var nq:int = 24;
  var oq:int = mq << nq;
  var pq:int = oq >> nq;
  var qq:int = 89;
  var rq:int = pq ^ qq;
  d[46]:byte = rq;
  var sq:int = d[46]:ubyte;
  var tq:int = 24;
  var uq:int = sq << tq;
  var vq:int = uq >> tq;
  var wq:int = 23;
  var xq:int = vq ^ wq;
  d[46]:byte = xq;
  var yq:int = d[46]:ubyte;
  var zq:int = 24;
  var ar:int = yq << zq;
  var br:int = ar >> zq;
  var cr:int = 17;
  var dr:int = br ^ cr;
  d[46]:byte = dr;
  var er:int = d[46]:ubyte;
  var fr:int = 24;
  var gr:int = er << fr;
  var hr:int = gr >> fr;
  var ir:int = 69;
  var jr:int = hr ^ ir;
  d[46]:byte = jr;
  var kr:int = d[46]:ubyte;
  var lr:int = 24;
  var mr:int = kr << lr;
  var nr:int = mr >> lr;
  var or:int = 119;
  var pr:int = nr ^ or;
  d[46]:byte = pr;
  var qr:int = d[46]:ubyte;
  var rr:int = 24;
  var sr:int = qr << rr;
  var tr:int = sr >> rr;
  var ur:int = 41;
  var vr:int = tr ^ ur;
  d[46]:byte = vr;
  var wr:int = 69;
  d[9]:byte = wr;
  var xr:int = d[9]:ubyte;
  var yr:int = 24;
  var zr:int = xr << yr;
  var as:int = zr >> yr;
  var bs:int = 86;
  var cs:int = as ^ bs;
  d[9]:byte = cs;
  var ds:int = d[9]:ubyte;
  var es:int = 24;
  var fs:int = ds << es;
  var gs:int = fs >> es;
  var hs:int = 10;
  var is:int = gs ^ hs;
  d[9]:byte = is;
  var js:int = d[9]:ubyte;
  var ks:int = 24;
  var ls:int = js << ks;
  var ms:int = ls >> ks;
  var ns:int = 17;
  var os:int = ms ^ ns;
  d[9]:byte = os;
  var ps:int = d[9]:ubyte;
  var qs:int = 24;
  var rs:int = ps << qs;
  var ss:int = rs >> qs;
  var ts:int = 66;
  var us:int = ss ^ ts;
  d[9]:byte = us;
  var vs:int = d[9]:ubyte;
  var ws:int = 24;
  var xs:int = vs << ws;
  var ys:int = xs >> ws;
  var zs:int = 67;
  var at:int = ys ^ zs;
  d[9]:byte = at;
  var bt:int = d[9]:ubyte;
  var ct:int = 24;
  var dt:int = bt << ct;
  var et:int = dt >> ct;
  var ft:int = 6;
  var gt:int = et ^ ft;
  d[9]:byte = gt;
  var ht:int = d[9]:ubyte;
  var it:int = 24;
  var jt:int = ht << it;
  var kt:int = jt >> it;
  var lt:int = 24;
  var mt:int = kt ^ lt;
  d[9]:byte = mt;
  var nt:int = d[9]:ubyte;
  var ot:int = 24;
  var pt:int = nt << ot;
  var qt:int = pt >> ot;
  var rt:int = 8;
  var st:int = qt ^ rt;
  d[9]:byte = st;
  var tt:int = d[9]:ubyte;
  var ut:int = 24;
  var vt:int = tt << ut;
  var wt:int = vt >> ut;
  var xt:int = 50;
  var yt:int = wt ^ xt;
  d[9]:byte = yt;
  var zt:int = d[9]:ubyte;
  var au:int = 24;
  var bu:int = zt << au;
  var cu:int = bu >> au;
  var du:int = 104;
  var eu:int = cu ^ du;
  d[9]:byte = eu;
  var fu:int = d[9]:ubyte;
  var gu:int = 24;
  var hu:int = fu << gu;
  var iu:int = hu >> gu;
  var ju:int = 4;
  var ku:int = iu ^ ju;
  d[9]:byte = ku;
  var lu:int = d[9]:ubyte;
  var mu:int = 24;
  var nu:int = lu << mu;
  var ou:int = nu >> mu;
  var pu:int = 87;
  var qu:int = ou ^ pu;
  d[9]:byte = qu;
  var ru:int = d[9]:ubyte;
  var su:int = 24;
  var tu:int = ru << su;
  var uu:int = tu >> su;
  var vu:int = 68;
  var wu:int = uu ^ vu;
  d[9]:byte = wu;
  var xu:int = d[9]:ubyte;
  var yu:int = 24;
  var zu:int = xu << yu;
  var av:int = zu >> yu;
  var bv:int = 17;
  var cv:int = av ^ bv;
  d[9]:byte = cv;
  var dv:int = d[9]:ubyte;
  var ev:int = 24;
  var fv:int = dv << ev;
  var gv:int = fv >> ev;
  var hv:int = 19;
  var iv:int = gv ^ hv;
  d[9]:byte = iv;
  var jv:int = d[9]:ubyte;
  var kv:int = 24;
  var lv:int = jv << kv;
  var mv:int = lv >> kv;
  var nv:int = 104;
  var ov:int = mv ^ nv;
  d[9]:byte = ov;
  var pv:int = d[9]:ubyte;
  var qv:int = 24;
  var rv:int = pv << qv;
  var sv:int = rv >> qv;
  var tv:int = 75;
  var uv:int = sv ^ tv;
  d[9]:byte = uv;
  var vv:int = d[9]:ubyte;
  var wv:int = 24;
  var xv:int = vv << wv;
  var yv:int = xv >> wv;
  var zv:int = 55;
  var aw:int = yv ^ zv;
  d[9]:byte = aw;
  var bw:int = d[9]:ubyte;
  var cw:int = 24;
  var dw:int = bw << cw;
  var ew:int = dw >> cw;
  var fw:int = 104;
  var gw:int = ew ^ fw;
  d[9]:byte = gw;
  var hw:int = d[9]:ubyte;
  var iw:int = 24;
  var jw:int = hw << iw;
  var kw:int = jw >> iw;
  var lw:int = 72;
  var mw:int = kw ^ lw;
  d[9]:byte = mw;
  var nw:int = 61;
  d[26]:byte = nw;
  var ow:int = d[26]:ubyte;
  var pw:int = 24;
  var qw:int = ow << pw;
  var rw:int = qw >> pw;
  var sw:int = 80;
  var tw:int = rw ^ sw;
  d[26]:byte = tw;
  var uw:int = d[26]:ubyte;
  var vw:int = 24;
  var ww:int = uw << vw;
  var xw:int = ww >> vw;
  var yw:int = 116;
  var zw:int = xw ^ yw;
  d[26]:byte = zw;
  var ax:int = d[26]:ubyte;
  var bx:int = 24;
  var cx:int = ax << bx;
  var dx:int = cx >> bx;
  var ex:int = 113;
  var fx:int = dx ^ ex;
  d[26]:byte = fx;
  var gx:int = d[26]:ubyte;
  var hx:int = 24;
  var ix:int = gx << hx;
  var jx:int = ix >> hx;
  var kx:int = 23;
  var lx:int = jx ^ kx;
  d[26]:byte = lx;
  var mx:int = d[26]:ubyte;
  var nx:int = 24;
  var ox:int = mx << nx;
  var px:int = ox >> nx;
  var qx:int = 1;
  var rx:int = px ^ qx;
  d[26]:byte = rx;
  var sx:int = d[26]:ubyte;
  var tx:int = 24;
  var ux:int = sx << tx;
  var vx:int = ux >> tx;
  var wx:int = 9;
  var xx:int = vx ^ wx;
  d[26]:byte = xx;
  var yx:int = d[26]:ubyte;
  var zx:int = 24;
  var ay:int = yx << zx;
  var by:int = ay >> zx;
  var cy:int = 41;
  var dy:int = by ^ cy;
  d[26]:byte = dy;
  var ey:int = d[26]:ubyte;
  var fy:int = 24;
  var gy:int = ey << fy;
  var hy:int = gy >> fy;
  var iy:int = 97;
  var jy:int = hy ^ iy;
  d[26]:byte = jy;
  var ky:int = d[26]:ubyte;
  var ly:int = 24;
  var my:int = ky << ly;
  var ny:int = my >> ly;
  var oy:int = 95;
  var py:int = ny ^ oy;
  d[26]:byte = py;
  var qy:int = d[26]:ubyte;
  var ry:int = 24;
  var sy:int = qy << ry;
  var ty:int = sy >> ry;
  var uy:int = 29;
  var vy:int = ty ^ uy;
  d[26]:byte = vy;
  var wy:int = d[26]:ubyte;
  var xy:int = 24;
  var yy:int = wy << xy;
  var zy:int = yy >> xy;
  var az:int = 88;
  var bz:int = zy ^ az;
  d[26]:byte = bz;
  var cz:int = d[26]:ubyte;
  var dz:int = 24;
  var ez:int = cz << dz;
  var fz:int = ez >> dz;
  var gz:int = 60;
  var hz:int = fz ^ gz;
  d[26]:byte = hz;
  var iz:int = d[26]:ubyte;
  var jz:int = 24;
  var kz:int = iz << jz;
  var lz:int = kz >> jz;
  var mz:int = 98;
  var nz:int = lz ^ mz;
  d[26]:byte = nz;
  var oz:int = d[26]:ubyte;
  var pz:int = 24;
  var qz:int = oz << pz;
  var rz:int = qz >> pz;
  var sz:int = 42;
  var tz:int = rz ^ sz;
  d[26]:byte = tz;
  var uz:int = d[26]:ubyte;
  var vz:int = 24;
  var wz:int = uz << vz;
  var xz:int = wz >> vz;
  var yz:int = 120;
  var zz:int = xz ^ yz;
  d[26]:byte = zz;
  var aaa:int = d[26]:ubyte;
  var baa:int = 24;
  var caa:int = aaa << baa;
  var daa:int = caa >> baa;
  var eaa:int = 85;
  var faa:int = daa ^ eaa;
  d[26]:byte = faa;
  var gaa:int = d[26]:ubyte;
  var haa:int = 24;
  var iaa:int = gaa << haa;
  var jaa:int = iaa >> haa;
  var kaa:int = 56;
  var laa:int = jaa ^ kaa;
  d[26]:byte = laa;
  var maa:int = d[26]:ubyte;
  var naa:int = 24;
  var oaa:int = maa << naa;
  var paa:int = oaa >> naa;
  var qaa:int = 80;
  var raa:int = paa ^ qaa;
  d[26]:byte = raa;
  var saa:int = d[26]:ubyte;
  var taa:int = 24;
  var uaa:int = saa << taa;
  var vaa:int = uaa >> taa;
  var waa:int = 100;
  var xaa:int = vaa ^ waa;
  d[26]:byte = xaa;
  var yaa:int = d[26]:ubyte;
  var zaa:int = 24;
  var aba:int = yaa << zaa;
  var bba:int = aba >> zaa;
  var cba:int = 4;
  var dba:int = bba ^ cba;
  d[26]:byte = dba;
  var eba:int = 7;
  d[22]:byte = eba;
  var fba:int = d[22]:ubyte;
  var gba:int = 24;
  var hba:int = fba << gba;
  var iba:int = hba >> gba;
  var jba:int = 96;
  var kba:int = iba ^ jba;
  d[22]:byte = kba;
  var lba:int = d[22]:ubyte;
  var mba:int = 24;
  var nba:int = lba << mba;
  var oba:int = nba >> mba;
  var pba:int = 31;
  var qba:int = oba ^ pba;
  d[22]:byte = qba;
  var rba:int = d[22]:ubyte;
  var sba:int = 24;
  var tba:int = rba << sba;
  var uba:int = tba >> sba;
  var vba:int = 27;
  var wba:int = uba ^ vba;
  d[22]:byte = wba;
  var xba:int = d[22]:ubyte;
  var yba:int = 24;
  var zba:int = xba << yba;
  var aca:int = zba >> yba;
  var bca:int = 32;
  var cca:int = aca ^ bca;
  d[22]:byte = cca;
  var dca:int = d[22]:ubyte;
  var eca:int = 24;
  var fca:int = dca << eca;
  var gca:int = fca >> eca;
  var hca:int = 64;
  var ica:int = gca ^ hca;
  d[22]:byte = ica;
  var jca:int = d[22]:ubyte;
  var kca:int = 24;
  var lca:int = jca << kca;
  var mca:int = lca >> kca;
  var nca:int = 13;
  var oca:int = mca ^ nca;
  d[22]:byte = oca;
  var pca:int = d[22]:ubyte;
  var qca:int = 24;
  var rca:int = pca << qca;
  var sca:int = rca >> qca;
  var tca:int = 38;
  var uca:int = sca ^ tca;
  d[22]:byte = uca;
  var vca:int = d[22]:ubyte;
  var wca:int = 24;
  var xca:int = vca << wca;
  var yca:int = xca >> wca;
  var zca:int = 99;
  var ada:int = yca ^ zca;
  d[22]:byte = ada;
  var bda:int = d[22]:ubyte;
  var cda:int = 24;
  var dda:int = bda << cda;
  var eda:int = dda >> cda;
  var fda:int = 11;
  var gda:int = eda ^ fda;
  d[22]:byte = gda;
  var hda:int = d[22]:ubyte;
  var ida:int = 24;
  var jda:int = hda << ida;
  var kda:int = jda >> ida;
  var lda:int = 10;
  var mda:int = kda ^ lda;
  d[22]:byte = mda;
  var nda:int = d[22]:ubyte;
  var oda:int = 24;
  var pda:int = nda << oda;
  var qda:int = pda >> oda;
  var rda:int = 84;
  var sda:int = qda ^ rda;
  d[22]:byte = sda;
  var tda:int = d[22]:ubyte;
  var uda:int = 24;
  var vda:int = tda << uda;
  var wda:int = vda >> uda;
  var xda:int = 2;
  var yda:int = wda ^ xda;
  d[22]:byte = yda;
  var zda:int = d[22]:ubyte;
  var aea:int = 24;
  var bea:int = zda << aea;
  var cea:int = bea >> aea;
  var dea:int = 23;
  var eea:int = cea ^ dea;
  d[22]:byte = eea;
  var fea:int = d[22]:ubyte;
  var gea:int = 24;
  var hea:int = fea << gea;
  var iea:int = hea >> gea;
  var jea:int = 106;
  var kea:int = iea ^ jea;
  d[22]:byte = kea;
  var lea:int = d[22]:ubyte;
  var mea:int = 24;
  var nea:int = lea << mea;
  var oea:int = nea >> mea;
  var pea:int = 48;
  var qea:int = oea ^ pea;
  d[22]:byte = qea;
  var rea:int = d[22]:ubyte;
  var sea:int = 24;
  var tea:int = rea << sea;
  var uea:int = tea >> sea;
  var vea:int = 79;
  var wea:int = uea ^ vea;
  d[22]:byte = wea;
  var xea:int = d[22]:ubyte;
  var yea:int = 24;
  var zea:int = xea << yea;
  var afa:int = zea >> yea;
  var bfa:int = 15;
  var cfa:int = afa ^ bfa;
  d[22]:byte = cfa;
  var dfa:int = d[22]:ubyte;
  var efa:int = 24;
  var ffa:int = dfa << efa;
  var gfa:int = ffa >> efa;
  var hfa:int = 65;
  var ifa:int = gfa ^ hfa;
  d[22]:byte = ifa;
  var jfa:int = d[22]:ubyte;
  var kfa:int = 24;
  var lfa:int = jfa << kfa;
  var mfa:int = lfa >> kfa;
  var nfa:int = 47;
  var ofa:int = mfa ^ nfa;
  d[22]:byte = ofa;
  var pfa:int = d[22]:ubyte;
  var qfa:int = 24;
  var rfa:int = pfa << qfa;
  var sfa:int = rfa >> qfa;
  var tfa:int = 19;
  var ufa:int = sfa ^ tfa;
  d[22]:byte = ufa;
  var vfa:int = 109;
  d[45]:byte = vfa;
  var wfa:int = d[45]:ubyte;
  var xfa:int = 24;
  var yfa:int = wfa << xfa;
  var zfa:int = yfa >> xfa;
  var aga:int = 57;
  var bga:int = zfa ^ aga;
  d[45]:byte = bga;
  var cga:int = d[45]:ubyte;
  var dga:int = 24;
  var ega:int = cga << dga;
  var fga:int = ega >> dga;
  var gga:int = 87;
  var hga:int = fga ^ gga;
  d[45]:byte = hga;
  var iga:int = d[45]:ubyte;
  var jga:int = 24;
  var kga:int = iga << jga;
  var lga:int = kga >> jga;
  var mga:int = 42;
  var nga:int = lga ^ mga;
  d[45]:byte = nga;
  var oga:int = d[45]:ubyte;
  var pga:int = 24;
  var qga:int = oga << pga;
  var rga:int = qga >> pga;
  var sga:int = 35;
  var tga:int = rga ^ sga;
  d[45]:byte = tga;
  var uga:int = d[45]:ubyte;
  var vga:int = 24;
  var wga:int = uga << vga;
  var xga:int = wga >> vga;
  var yga:int = 56;
  var zga:int = xga ^ yga;
  d[45]:byte = zga;
  var aha:int = d[45]:ubyte;
  var bha:int = 24;
  var cha:int = aha << bha;
  var dha:int = cha >> bha;
  var eha:int = 15;
  var fha:int = dha ^ eha;
  d[45]:byte = fha;
  var gha:int = d[45]:ubyte;
  var hha:int = 24;
  var iha:int = gha << hha;
  var jha:int = iha >> hha;
  var kha:int = 122;
  var lha:int = jha ^ kha;
  d[45]:byte = lha;
  var mha:int = d[45]:ubyte;
  var nha:int = 24;
  var oha:int = mha << nha;
  var pha:int = oha >> nha;
  var qha:int = 45;
  var rha:int = pha ^ qha;
  d[45]:byte = rha;
  var sha:int = d[45]:ubyte;
  var tha:int = 24;
  var uha:int = sha << tha;
  var vha:int = uha >> tha;
  var wha:int = 27;
  var xha:int = vha ^ wha;
  d[45]:byte = xha;
  var yha:int = d[45]:ubyte;
  var zha:int = 24;
  var aia:int = yha << zha;
  var bia:int = aia >> zha;
  var cia:int = 36;
  var dia:int = bia ^ cia;
  d[45]:byte = dia;
  var eia:int = d[45]:ubyte;
  var fia:int = 24;
  var gia:int = eia << fia;
  var hia:int = gia >> fia;
  var iia:int = 21;
  var jia:int = hia ^ iia;
  d[45]:byte = jia;
  var kia:int = d[45]:ubyte;
  var lia:int = 24;
  var mia:int = kia << lia;
  var nia:int = mia >> lia;
  var oia:int = 17;
  var pia:int = nia ^ oia;
  d[45]:byte = pia;
  var qia:int = d[45]:ubyte;
  var ria:int = 24;
  var sia:int = qia << ria;
  var tia:int = sia >> ria;
  var uia:int = 8;
  var via:int = tia ^ uia;
  d[45]:byte = via;
  var wia:int = d[45]:ubyte;
  var xia:int = 24;
  var yia:int = wia << xia;
  var zia:int = yia >> xia;
  var aja:int = 39;
  var bja:int = zia ^ aja;
  d[45]:byte = bja;
  var cja:int = d[45]:ubyte;
  var dja:int = 24;
  var eja:int = cja << dja;
  var fja:int = eja >> dja;
  var gja:int = 89;
  var hja:int = fja ^ gja;
  d[45]:byte = hja;
  var ija:int = d[45]:ubyte;
  var jja:int = 24;
  var kja:int = ija << jja;
  var lja:int = kja >> jja;
  var mja:int = 65;
  var nja:int = lja ^ mja;
  d[45]:byte = nja;
  var oja:int = d[45]:ubyte;
  var pja:int = 24;
  var qja:int = oja << pja;
  var rja:int = qja >> pja;
  var sja:int = 105;
  var tja:int = rja ^ sja;
  d[45]:byte = tja;
  var uja:int = d[45]:ubyte;
  var vja:int = 24;
  var wja:int = uja << vja;
  var xja:int = wja >> vja;
  var yja:int = 7;
  var zja:int = xja ^ yja;
  d[45]:byte = zja;
  var aka:int = d[45]:ubyte;
  var bka:int = 24;
  var cka:int = aka << bka;
  var dka:int = cka >> bka;
  var eka:int = 119;
  var fka:int = dka ^ eka;
  d[45]:byte = fka;
  var gka:int = d[45]:ubyte;
  var hka:int = 24;
  var ika:int = gka << hka;
  var jka:int = ika >> hka;
  var kka:int = 28;
  var lka:int = jka ^ kka;
  d[45]:byte = lka;
  var mka:int = 59;
  d[2]:byte = mka;
  var nka:int = d[2]:ubyte;
  var oka:int = 24;
  var pka:int = nka << oka;
  var qka:int = pka >> oka;
  var rka:int = 39;
  var ska:int = qka ^ rka;
  d[2]:byte = ska;
  var tka:int = d[2]:ubyte;
  var uka:int = 24;
  var vka:int = tka << uka;
  var wka:int = vka >> uka;
  var xka:int = 112;
  var yka:int = wka ^ xka;
  d[2]:byte = yka;
  var zka:int = d[2]:ubyte;
  var ala:int = 24;
  var bla:int = zka << ala;
  var cla:int = bla >> ala;
  var dla:int = 46;
  var ela:int = cla ^ dla;
  d[2]:byte = ela;
  var fla:int = d[2]:ubyte;
  var gla:int = 24;
  var hla:int = fla << gla;
  var ila:int = hla >> gla;
  var jla:int = 80;
  var kla:int = ila ^ jla;
  d[2]:byte = kla;
  var lla:int = d[2]:ubyte;
  var mla:int = 24;
  var nla:int = lla << mla;
  var ola:int = nla >> mla;
  var pla:int = 121;
  var qla:int = ola ^ pla;
  d[2]:byte = qla;
  var rla:int = d[2]:ubyte;
  var sla:int = 24;
  var tla:int = rla << sla;
  var ula:int = tla >> sla;
  var vla:int = 114;
  var wla:int = ula ^ vla;
  d[2]:byte = wla;
  var xla:int = d[2]:ubyte;
  var yla:int = 24;
  var zla:int = xla << yla;
  var ama:int = zla >> yla;
  var bma:int = 104;
  var cma:int = ama ^ bma;
  d[2]:byte = cma;
  var dma:int = d[2]:ubyte;
  var ema:int = 24;
  var fma:int = dma << ema;
  var gma:int = fma >> ema;
  var hma:int = 7;
  var ima:int = gma ^ hma;
  d[2]:byte = ima;
  var jma:int = d[2]:ubyte;
  var kma:int = 24;
  var lma:int = jma << kma;
  var mma:int = lma >> kma;
  var nma:int = 103;
  var oma:int = mma ^ nma;
  d[2]:byte = oma;
  var pma:int = d[2]:ubyte;
  var qma:int = 24;
  var rma:int = pma << qma;
  var sma:int = rma >> qma;
  var tma:int = 5;
  var uma:int = sma ^ tma;
  d[2]:byte = uma;
  var vma:int = d[2]:ubyte;
  var wma:int = 24;
  var xma:int = vma << wma;
  var yma:int = xma >> wma;
  var zma:int = 125;
  var ana:int = yma ^ zma;
  d[2]:byte = ana;
  var bna:int = d[2]:ubyte;
  var cna:int = 24;
  var dna:int = bna << cna;
  var ena:int = dna >> cna;
  var fna:int = 34;
  var gna:int = ena ^ fna;
  d[2]:byte = gna;
  var hna:int = d[2]:ubyte;
  var ina:int = 24;
  var jna:int = hna << ina;
  var kna:int = jna >> ina;
  var lna:int = 1;
  var mna:int = kna ^ lna;
  d[2]:byte = mna;
  var nna:int = d[2]:ubyte;
  var ona:int = 24;
  var pna:int = nna << ona;
  var qna:int = pna >> ona;
  var rna:int = 34;
  var sna:int = qna ^ rna;
  d[2]:byte = sna;
  var tna:int = d[2]:ubyte;
  var una:int = 24;
  var vna:int = tna << una;
  var wna:int = vna >> una;
  var xna:int = 47;
  var yna:int = wna ^ xna;
  d[2]:byte = yna;
  var zna:int = d[2]:ubyte;
  var aoa:int = 24;
  var boa:int = zna << aoa;
  var coa:int = boa >> aoa;
  var doa:int = 9;
  var eoa:int = coa ^ doa;
  d[2]:byte = eoa;
  var foa:int = d[2]:ubyte;
  var goa:int = 24;
  var hoa:int = foa << goa;
  var ioa:int = hoa >> goa;
  var joa:int = 34;
  var koa:int = ioa ^ joa;
  d[2]:byte = koa;
  var loa:int = d[2]:ubyte;
  var moa:int = 24;
  var noa:int = loa << moa;
  var ooa:int = noa >> moa;
  var poa:int = 108;
  var qoa:int = ooa ^ poa;
  d[2]:byte = qoa;
  var roa:int = d[2]:ubyte;
  var soa:int = 24;
  var toa:int = roa << soa;
  var uoa:int = toa >> soa;
  var voa:int = 42;
  var woa:int = uoa ^ voa;
  d[2]:byte = woa;
  var xoa:int = d[2]:ubyte;
  var yoa:int = 24;
  var zoa:int = xoa << yoa;
  var apa:int = zoa >> yoa;
  var bpa:int = 126;
  var cpa:int = apa ^ bpa;
  d[2]:byte = cpa;
  var dpa:int = 13;
  d[12]:byte = dpa;
  var epa:int = d[12]:ubyte;
  var fpa:int = 24;
  var gpa:int = epa << fpa;
  var hpa:int = gpa >> fpa;
  var ipa:int = 52;
  var jpa:int = hpa ^ ipa;
  d[12]:byte = jpa;
  var kpa:int = d[12]:ubyte;
  var lpa:int = 24;
  var mpa:int = kpa << lpa;
  var npa:int = mpa >> lpa;
  var opa:int = 31;
  var ppa:int = npa ^ opa;
  d[12]:byte = ppa;
  var qpa:int = d[12]:ubyte;
  var rpa:int = 24;
  var spa:int = qpa << rpa;
  var tpa:int = spa >> rpa;
  var upa:int = 73;
  var vpa:int = tpa ^ upa;
  d[12]:byte = vpa;
  var wpa:int = d[12]:ubyte;
  var xpa:int = 24;
  var ypa:int = wpa << xpa;
  var zpa:int = ypa >> xpa;
  var aqa:int = 97;
  var bqa:int = zpa ^ aqa;
  d[12]:byte = bqa;
  var cqa:int = d[12]:ubyte;
  var dqa:int = 24;
  var eqa:int = cqa << dqa;
  var fqa:int = eqa >> dqa;
  var gqa:int = 93;
  var hqa:int = fqa ^ gqa;
  d[12]:byte = hqa;
  var iqa:int = d[12]:ubyte;
  var jqa:int = 24;
  var kqa:int = iqa << jqa;
  var lqa:int = kqa >> jqa;
  var mqa:int = 0;
  var nqa:int = lqa ^ mqa;
  d[12]:byte = nqa;
  var oqa:int = d[12]:ubyte;
  var pqa:int = 24;
  var qqa:int = oqa << pqa;
  var rqa:int = qqa >> pqa;
  var sqa:int = 79;
  var tqa:int = rqa ^ sqa;
  d[12]:byte = tqa;
  var uqa:int = d[12]:ubyte;
  var vqa:int = 24;
  var wqa:int = uqa << vqa;
  var xqa:int = wqa >> vqa;
  var yqa:int = 125;
  var zqa:int = xqa ^ yqa;
  d[12]:byte = zqa;
  var ara:int = d[12]:ubyte;
  var bra:int = 24;
  var cra:int = ara << bra;
  var dra:int = cra >> bra;
  var era:int = 82;
  var fra:int = dra ^ era;
  d[12]:byte = fra;
  var gra:int = d[12]:ubyte;
  var hra:int = 24;
  var ira:int = gra << hra;
  var jra:int = ira >> hra;
  var kra:int = 23;
  var lra:int = jra ^ kra;
  d[12]:byte = lra;
  var mra:int = d[12]:ubyte;
  var nra:int = 24;
  var ora:int = mra << nra;
  var pra:int = ora >> nra;
  var qra:int = 110;
  var rra:int = pra ^ qra;
  d[12]:byte = rra;
  var sra:int = d[12]:ubyte;
  var tra:int = 24;
  var ura:int = sra << tra;
  var vra:int = ura >> tra;
  var wra:int = 40;
  var xra:int = vra ^ wra;
  d[12]:byte = xra;
  var yra:int = d[12]:ubyte;
  var zra:int = 24;
  var asa:int = yra << zra;
  var bsa:int = asa >> zra;
  var csa:int = 124;
  var dsa:int = bsa ^ csa;
  d[12]:byte = dsa;
  var esa:int = d[12]:ubyte;
  var fsa:int = 24;
  var gsa:int = esa << fsa;
  var hsa:int = gsa >> fsa;
  var isa:int = 20;
  var jsa:int = hsa ^ isa;
  d[12]:byte = jsa;
  var ksa:int = d[12]:ubyte;
  var lsa:int = 24;
  var msa:int = ksa << lsa;
  var nsa:int = msa >> lsa;
  var osa:int = 79;
  var psa:int = nsa ^ osa;
  d[12]:byte = psa;
  var qsa:int = d[12]:ubyte;
  var rsa:int = 24;
  var ssa:int = qsa << rsa;
  var tsa:int = ssa >> rsa;
  var usa:int = 126;
  var vsa:int = tsa ^ usa;
  d[12]:byte = vsa;
  var wsa:int = d[12]:ubyte;
  var xsa:int = 24;
  var ysa:int = wsa << xsa;
  var zsa:int = ysa >> xsa;
  var ata:int = 57;
  var bta:int = zsa ^ ata;
  d[12]:byte = bta;
  var cta:int = d[12]:ubyte;
  var dta:int = 24;
  var eta:int = cta << dta;
  var fta:int = eta >> dta;
  var gta:int = 48;
  var hta:int = fta ^ gta;
  d[12]:byte = hta;
  var ita:int = d[12]:ubyte;
  var jta:int = 24;
  var kta:int = ita << jta;
  var lta:int = kta >> jta;
  var mta:int = 46;
  var nta:int = lta ^ mta;
  d[12]:byte = nta;
  var ota:int = d[12]:ubyte;
  var pta:int = 24;
  var qta:int = ota << pta;
  var rta:int = qta >> pta;
  var sta:int = 67;
  var tta:int = rta ^ sta;
  d[12]:byte = tta;
  var uta:int = 9;
  d[1]:byte = uta;
  var vta:int = d[1]:ubyte;
  var wta:int = 24;
  var xta:int = vta << wta;
  var yta:int = xta >> wta;
  var zta:int = 34;
  var aua:int = yta ^ zta;
  d[1]:byte = aua;
  var bua:int = d[1]:ubyte;
  var cua:int = 24;
  var dua:int = bua << cua;
  var eua:int = dua >> cua;
  var fua:int = 125;
  var gua:int = eua ^ fua;
  d[1]:byte = gua;
  var hua:int = d[1]:ubyte;
  var iua:int = 24;
  var jua:int = hua << iua;
  var kua:int = jua >> iua;
  var lua:int = 17;
  var mua:int = kua ^ lua;
  d[1]:byte = mua;
  var nua:int = d[1]:ubyte;
  var oua:int = 24;
  var pua:int = nua << oua;
  var qua:int = pua >> oua;
  var rua:int = 97;
  var sua:int = qua ^ rua;
  d[1]:byte = sua;
  var tua:int = d[1]:ubyte;
  var uua:int = 24;
  var vua:int = tua << uua;
  var wua:int = vua >> uua;
  var xua:int = 46;
  var yua:int = wua ^ xua;
  d[1]:byte = yua;
  var zua:int = d[1]:ubyte;
  var ava:int = 24;
  var bva:int = zua << ava;
  var cva:int = bva >> ava;
  var dva:int = 122;
  var eva:int = cva ^ dva;
  d[1]:byte = eva;
  var fva:int = d[1]:ubyte;
  var gva:int = 24;
  var hva:int = fva << gva;
  var iva:int = hva >> gva;
  var jva:int = 83;
  var kva:int = iva ^ jva;
  d[1]:byte = kva;
  var lva:int = d[1]:ubyte;
  var mva:int = 24;
  var nva:int = lva << mva;
  var ova:int = nva >> mva;
  var pva:int = 42;
  var qva:int = ova ^ pva;
  d[1]:byte = qva;
  var rva:int = d[1]:ubyte;
  var sva:int = 24;
  var tva:int = rva << sva;
  var uva:int = tva >> sva;
  var vva:int = 81;
  var wva:int = uva ^ vva;
  d[1]:byte = wva;
  var xva:int = d[1]:ubyte;
  var yva:int = 24;
  var zva:int = xva << yva;
  var awa:int = zva >> yva;
  var bwa:int = 113;
  var cwa:int = awa ^ bwa;
  d[1]:byte = cwa;
  var dwa:int = d[1]:ubyte;
  var ewa:int = 24;
  var fwa:int = dwa << ewa;
  var gwa:int = fwa >> ewa;
  var hwa:int = 86;
  var iwa:int = gwa ^ hwa;
  d[1]:byte = iwa;
  var jwa:int = d[1]:ubyte;
  var kwa:int = 24;
  var lwa:int = jwa << kwa;
  var mwa:int = lwa >> kwa;
  var nwa:int = 73;
  var owa:int = mwa ^ nwa;
  d[1]:byte = owa;
  var pwa:int = d[1]:ubyte;
  var qwa:int = 24;
  var rwa:int = pwa << qwa;
  var swa:int = rwa >> qwa;
  var twa:int = 31;
  var uwa:int = swa ^ twa;
  d[1]:byte = uwa;
  var vwa:int = d[1]:ubyte;
  var wwa:int = 24;
  var xwa:int = vwa << wwa;
  var ywa:int = xwa >> wwa;
  var zwa:int = 21;
  var axa:int = ywa ^ zwa;
  d[1]:byte = axa;
  var bxa:int = d[1]:ubyte;
  var cxa:int = 24;
  var dxa:int = bxa << cxa;
  var exa:int = dxa >> cxa;
  var fxa:int = 32;
  var gxa:int = exa ^ fxa;
  d[1]:byte = gxa;
  var hxa:int = d[1]:ubyte;
  var ixa:int = 24;
  var jxa:int = hxa << ixa;
  var kxa:int = jxa >> ixa;
  var lxa:int = 16;
  var mxa:int = kxa ^ lxa;
  d[1]:byte = mxa;
  var nxa:int = d[1]:ubyte;
  var oxa:int = 24;
  var pxa:int = nxa << oxa;
  var qxa:int = pxa >> oxa;
  var rxa:int = 0;
  var sxa:int = qxa ^ rxa;
  d[1]:byte = sxa;
  var txa:int = d[1]:ubyte;
  var uxa:int = 24;
  var vxa:int = txa << uxa;
  var wxa:int = vxa >> uxa;
  var xxa:int = 25;
  var yxa:int = wxa ^ xxa;
  d[1]:byte = yxa;
  var zxa:int = d[1]:ubyte;
  var aya:int = 24;
  var bya:int = zxa << aya;
  var cya:int = bya >> aya;
  var dya:int = 18;
  var eya:int = cya ^ dya;
  d[1]:byte = eya;
  var fya:int = d[1]:ubyte;
  var gya:int = 24;
  var hya:int = fya << gya;
  var iya:int = hya >> gya;
  var jya:int = 76;
  var kya:int = iya ^ jya;
  d[1]:byte = kya;
  var lya:int = 46;
  d[37]:byte = lya;
  var mya:int = d[37]:ubyte;
  var nya:int = 24;
  var oya:int = mya << nya;
  var pya:int = oya >> nya;
  var qya:int = 126;
  var rya:int = pya ^ qya;
  d[37]:byte = rya;
  var sya:int = d[37]:ubyte;
  var tya:int = 24;
  var uya:int = sya << tya;
  var vya:int = uya >> tya;
  var wya:int = 72;
  var xya:int = vya ^ wya;
  d[37]:byte = xya;
  var yya:int = d[37]:ubyte;
  var zya:int = 24;
  var aza:int = yya << zya;
  var bza:int = aza >> zya;
  var cza:int = 112;
  var dza:int = bza ^ cza;
  d[37]:byte = dza;
  var eza:int = d[37]:ubyte;
  var fza:int = 24;
  var gza:int = eza << fza;
  var hza:int = gza >> fza;
  var iza:int = 119;
  var jza:int = hza ^ iza;
  d[37]:byte = jza;
  var kza:int = d[37]:ubyte;
  var lza:int = 24;
  var mza:int = kza << lza;
  var nza:int = mza >> lza;
  var oza:int = 34;
  var pza:int = nza ^ oza;
  d[37]:byte = pza;
  var qza:int = d[37]:ubyte;
  var rza:int = 24;
  var sza:int = qza << rza;
  var tza:int = sza >> rza;
  var uza:int = 119;
  var vza:int = tza ^ uza;
  d[37]:byte = vza;
  var wza:int = d[37]:ubyte;
  var xza:int = 24;
  var yza:int = wza << xza;
  var zza:int = yza >> xza;
  var aab:int = 32;
  var bab:int = zza ^ aab;
  d[37]:byte = bab;
  var cab:int = d[37]:ubyte;
  var dab:int = 24;
  var eab:int = cab << dab;
  var fab:int = eab >> dab;
  var gab:int = 113;
  var hab:int = fab ^ gab;
  d[37]:byte = hab;
  var iab:int = d[37]:ubyte;
  var jab:int = 24;
  var kab:int = iab << jab;
  var lab:int = kab >> jab;
  var mab:int = 46;
  var nab:int = lab ^ mab;
  d[37]:byte = nab;
  var oab:int = d[37]:ubyte;
  var pab:int = 24;
  var qab:int = oab << pab;
  var rab:int = qab >> pab;
  var sab:int = 102;
  var tab:int = rab ^ sab;
  d[37]:byte = tab;
  var uab:int = d[37]:ubyte;
  var vab:int = 24;
  var wab:int = uab << vab;
  var xab:int = wab >> vab;
  var yab:int = 17;
  var zab:int = xab ^ yab;
  d[37]:byte = zab;
  var abb:int = d[37]:ubyte;
  var bbb:int = 24;
  var cbb:int = abb << bbb;
  var dbb:int = cbb >> bbb;
  var ebb:int = 120;
  var fbb:int = dbb ^ ebb;
  d[37]:byte = fbb;
  var gbb:int = d[37]:ubyte;
  var hbb:int = 24;
  var ibb:int = gbb << hbb;
  var jbb:int = ibb >> hbb;
  var kbb:int = 59;
  var lbb:int = jbb ^ kbb;
  d[37]:byte = lbb;
  var mbb:int = d[37]:ubyte;
  var nbb:int = 24;
  var obb:int = mbb << nbb;
  var pbb:int = obb >> nbb;
  var qbb:int = 38;
  var rbb:int = pbb ^ qbb;
  d[37]:byte = rbb;
  var sbb:int = d[37]:ubyte;
  var tbb:int = 24;
  var ubb:int = sbb << tbb;
  var vbb:int = ubb >> tbb;
  var wbb:int = 96;
  var xbb:int = vbb ^ wbb;
  d[37]:byte = xbb;
  var ybb:int = d[37]:ubyte;
  var zbb:int = 24;
  var acb:int = ybb << zbb;
  var bcb:int = acb >> zbb;
  var ccb:int = 118;
  var dcb:int = bcb ^ ccb;
  d[37]:byte = dcb;
  var ecb:int = d[37]:ubyte;
  var fcb:int = 24;
  var gcb:int = ecb << fcb;
  var hcb:int = gcb >> fcb;
  var icb:int = 49;
  var jcb:int = hcb ^ icb;
  d[37]:byte = jcb;
  var kcb:int = d[37]:ubyte;
  var lcb:int = 24;
  var mcb:int = kcb << lcb;
  var ncb:int = mcb >> lcb;
  var ocb:int = 24;
  var pcb:int = ncb ^ ocb;
  d[37]:byte = pcb;
  var qcb:int = d[37]:ubyte;
  var rcb:int = 24;
  var scb:int = qcb << rcb;
  var tcb:int = scb >> rcb;
  var ucb:int = 69;
  var vcb:int = tcb ^ ucb;
  d[37]:byte = vcb;
  var wcb:int = d[37]:ubyte;
  var xcb:int = 24;
  var ycb:int = wcb << xcb;
  var zcb:int = ycb >> xcb;
  var adb:int = 109;
  var bdb:int = zcb ^ adb;
  d[37]:byte = bdb;
  var cdb:int = 126;
  d[35]:byte = cdb;
  var ddb:int = d[35]:ubyte;
  var edb:int = 24;
  var fdb:int = ddb << edb;
  var gdb:int = fdb >> edb;
  var hdb:int = 101;
  var idb:int = gdb ^ hdb;
  d[35]:byte = idb;
  var jdb:int = d[35]:ubyte;
  var kdb:int = 24;
  var ldb:int = jdb << kdb;
  var mdb:int = ldb >> kdb;
  var ndb:int = 59;
  var odb:int = mdb ^ ndb;
  d[35]:byte = odb;
  var pdb:int = d[35]:ubyte;
  var qdb:int = 24;
  var rdb:int = pdb << qdb;
  var sdb:int = rdb >> qdb;
  var tdb:int = 4;
  var udb:int = sdb ^ tdb;
  d[35]:byte = udb;
  var vdb:int = d[35]:ubyte;
  var wdb:int = 24;
  var xdb:int = vdb << wdb;
  var ydb:int = xdb >> wdb;
  var zdb:int = 82;
  var aeb:int = ydb ^ zdb;
  d[35]:byte = aeb;
  var beb:int = d[35]:ubyte;
  var ceb:int = 24;
  var deb:int = beb << ceb;
  var eeb:int = deb >> ceb;
  var feb:int = 39;
  var geb:int = eeb ^ feb;
  d[35]:byte = geb;
  var heb:int = d[35]:ubyte;
  var ieb:int = 24;
  var jeb:int = heb << ieb;
  var keb:int = jeb >> ieb;
  var leb:int = 75;
  var meb:int = keb ^ leb;
  d[35]:byte = meb;
  var neb:int = d[35]:ubyte;
  var oeb:int = 24;
  var peb:int = neb << oeb;
  var qeb:int = peb >> oeb;
  var reb:int = 75;
  var seb:int = qeb ^ reb;
  d[35]:byte = seb;
  var teb:int = d[35]:ubyte;
  var ueb:int = 24;
  var veb:int = teb << ueb;
  var web:int = veb >> ueb;
  var xeb:int = 109;
  var yeb:int = web ^ xeb;
  d[35]:byte = yeb;
  var zeb:int = d[35]:ubyte;
  var afb:int = 24;
  var bfb:int = zeb << afb;
  var cfb:int = bfb >> afb;
  var dfb:int = 14;
  var efb:int = cfb ^ dfb;
  d[35]:byte = efb;
  var ffb:int = d[35]:ubyte;
  var gfb:int = 24;
  var hfb:int = ffb << gfb;
  var ifb:int = hfb >> gfb;
  var jfb:int = 62;
  var kfb:int = ifb ^ jfb;
  d[35]:byte = kfb;
  var lfb:int = d[35]:ubyte;
  var mfb:int = 24;
  var nfb:int = lfb << mfb;
  var ofb:int = nfb >> mfb;
  var pfb:int = 18;
  var qfb:int = ofb ^ pfb;
  d[35]:byte = qfb;
  var rfb:int = d[35]:ubyte;
  var sfb:int = 24;
  var tfb:int = rfb << sfb;
  var ufb:int = tfb >> sfb;
  var vfb:int = 17;
  var wfb:int = ufb ^ vfb;
  d[35]:byte = wfb;
  var xfb:int = d[35]:ubyte;
  var yfb:int = 24;
  var zfb:int = xfb << yfb;
  var agb:int = zfb >> yfb;
  var bgb:int = 26;
  var cgb:int = agb ^ bgb;
  d[35]:byte = cgb;
  var dgb:int = d[35]:ubyte;
  var egb:int = 24;
  var fgb:int = dgb << egb;
  var ggb:int = fgb >> egb;
  var hgb:int = 44;
  var igb:int = ggb ^ hgb;
  d[35]:byte = igb;
  var jgb:int = d[35]:ubyte;
  var kgb:int = 24;
  var lgb:int = jgb << kgb;
  var mgb:int = lgb >> kgb;
  var ngb:int = 89;
  var ogb:int = mgb ^ ngb;
  d[35]:byte = ogb;
  var pgb:int = d[35]:ubyte;
  var qgb:int = 24;
  var rgb:int = pgb << qgb;
  var sgb:int = rgb >> qgb;
  var tgb:int = 6;
  var ugb:int = sgb ^ tgb;
  d[35]:byte = ugb;
  var vgb:int = d[35]:ubyte;
  var wgb:int = 24;
  var xgb:int = vgb << wgb;
  var ygb:int = xgb >> wgb;
  var zgb:int = 63;
  var ahb:int = ygb ^ zgb;
  d[35]:byte = ahb;
  var bhb:int = d[35]:ubyte;
  var chb:int = 24;
  var dhb:int = bhb << chb;
  var ehb:int = dhb >> chb;
  var fhb:int = 15;
  var ghb:int = ehb ^ fhb;
  d[35]:byte = ghb;
  var hhb:int = d[35]:ubyte;
  var ihb:int = 24;
  var jhb:int = hhb << ihb;
  var khb:int = jhb >> ihb;
  var lhb:int = 111;
  var mhb:int = khb ^ lhb;
  d[35]:byte = mhb;
  var nhb:int = d[35]:ubyte;
  var ohb:int = 24;
  var phb:int = nhb << ohb;
  var qhb:int = phb >> ohb;
  var rhb:int = 10;
  var shb:int = qhb ^ rhb;
  d[35]:byte = shb;
  var thb:int = 62;
  d[6]:byte = thb;
  var uhb:int = d[6]:ubyte;
  var vhb:int = 24;
  var whb:int = uhb << vhb;
  var xhb:int = whb >> vhb;
  var yhb:int = 87;
  var zhb:int = xhb ^ yhb;
  d[6]:byte = zhb;
  var aib:int = d[6]:ubyte;
  var bib:int = 24;
  var cib:int = aib << bib;
  var dib:int = cib >> bib;
  var eib:int = 123;
  var fib:int = dib ^ eib;
  d[6]:byte = fib;
  var gib:int = d[6]:ubyte;
  var hib:int = 24;
  var iib:int = gib << hib;
  var jib:int = iib >> hib;
  var kib:int = 59;
  var lib:int = jib ^ kib;
  d[6]:byte = lib;
  var mib:int = d[6]:ubyte;
  var nib:int = 24;
  var oib:int = mib << nib;
  var pib:int = oib >> nib;
  var qib:int = 19;
  var rib:int = pib ^ qib;
  d[6]:byte = rib;
  var sib:int = d[6]:ubyte;
  var tib:int = 24;
  var uib:int = sib << tib;
  var vib:int = uib >> tib;
  var wib:int = 95;
  var xib:int = vib ^ wib;
  d[6]:byte = xib;
  var yib:int = d[6]:ubyte;
  var zib:int = 24;
  var ajb:int = yib << zib;
  var bjb:int = ajb >> zib;
  var cjb:int = 17;
  var djb:int = bjb ^ cjb;
  d[6]:byte = djb;
  var ejb:int = d[6]:ubyte;
  var fjb:int = 24;
  var gjb:int = ejb << fjb;
  var hjb:int = gjb >> fjb;
  var ijb:int = 109;
  var jjb:int = hjb ^ ijb;
  d[6]:byte = jjb;
  var kjb:int = d[6]:ubyte;
  var ljb:int = 24;
  var mjb:int = kjb << ljb;
  var njb:int = mjb >> ljb;
  var ojb:int = 77;
  var pjb:int = njb ^ ojb;
  d[6]:byte = pjb;
  var qjb:int = d[6]:ubyte;
  var rjb:int = 24;
  var sjb:int = qjb << rjb;
  var tjb:int = sjb >> rjb;
  var ujb:int = 22;
  var vjb:int = tjb ^ ujb;
  d[6]:byte = vjb;
  var wjb:int = d[6]:ubyte;
  var xjb:int = 24;
  var yjb:int = wjb << xjb;
  var zjb:int = yjb >> xjb;
  var akb:int = 22;
  var bkb:int = zjb ^ akb;
  d[6]:byte = bkb;
  var ckb:int = d[6]:ubyte;
  var dkb:int = 24;
  var ekb:int = ckb << dkb;
  var fkb:int = ekb >> dkb;
  var gkb:int = 59;
  var hkb:int = fkb ^ gkb;
  d[6]:byte = hkb;
  var ikb:int = d[6]:ubyte;
  var jkb:int = 24;
  var kkb:int = ikb << jkb;
  var lkb:int = kkb >> jkb;
  var mkb:int = 38;
  var nkb:int = lkb ^ mkb;
  d[6]:byte = nkb;
  var okb:int = d[6]:ubyte;
  var pkb:int = 24;
  var qkb:int = okb << pkb;
  var rkb:int = qkb >> pkb;
  var skb:int = 111;
  var tkb:int = rkb ^ skb;
  d[6]:byte = tkb;
  var ukb:int = d[6]:ubyte;
  var vkb:int = 24;
  var wkb:int = ukb << vkb;
  var xkb:int = wkb >> vkb;
  var ykb:int = 11;
  var zkb:int = xkb ^ ykb;
  d[6]:byte = zkb;
  var alb:int = d[6]:ubyte;
  var blb:int = 24;
  var clb:int = alb << blb;
  var dlb:int = clb >> blb;
  var elb:int = 41;
  var flb:int = dlb ^ elb;
  d[6]:byte = flb;
  var glb:int = d[6]:ubyte;
  var hlb:int = 24;
  var ilb:int = glb << hlb;
  var jlb:int = ilb >> hlb;
  var klb:int = 19;
  var llb:int = jlb ^ klb;
  d[6]:byte = llb;
  var mlb:int = d[6]:ubyte;
  var nlb:int = 24;
  var olb:int = mlb << nlb;
  var plb:int = olb >> nlb;
  var qlb:int = 34;
  var rlb:int = plb ^ qlb;
  d[6]:byte = rlb;
  var slb:int = d[6]:ubyte;
  var tlb:int = 24;
  var ulb:int = slb << tlb;
  var vlb:int = ulb >> tlb;
  var wlb:int = 56;
  var xlb:int = vlb ^ wlb;
  d[6]:byte = xlb;
  var ylb:int = d[6]:ubyte;
  var zlb:int = 24;
  var amb:int = ylb << zlb;
  var bmb:int = amb >> zlb;
  var cmb:int = 104;
  var dmb:int = bmb ^ cmb;
  d[6]:byte = dmb;
  var emb:int = d[6]:ubyte;
  var fmb:int = 24;
  var gmb:int = emb << fmb;
  var hmb:int = gmb >> fmb;
  var imb:int = 30;
  var jmb:int = hmb ^ imb;
  d[6]:byte = jmb;
  var kmb:int = 88;
  d[28]:byte = kmb;
  var lmb:int = d[28]:ubyte;
  var mmb:int = 24;
  var nmb:int = lmb << mmb;
  var omb:int = nmb >> mmb;
  var pmb:int = 47;
  var qmb:int = omb ^ pmb;
  d[28]:byte = qmb;
  var rmb:int = d[28]:ubyte;
  var smb:int = 24;
  var tmb:int = rmb << smb;
  var umb:int = tmb >> smb;
  var vmb:int = 100;
  var wmb:int = umb ^ vmb;
  d[28]:byte = wmb;
  var xmb:int = d[28]:ubyte;
  var ymb:int = 24;
  var zmb:int = xmb << ymb;
  var anb:int = zmb >> ymb;
  var bnb:int = 75;
  var cnb:int = anb ^ bnb;
  d[28]:byte = cnb;
  var dnb:int = d[28]:ubyte;
  var enb:int = 24;
  var fnb:int = dnb << enb;
  var gnb:int = fnb >> enb;
  var hnb:int = 122;
  var inb:int = gnb ^ hnb;
  d[28]:byte = inb;
  var jnb:int = d[28]:ubyte;
  var knb:int = 24;
  var lnb:int = jnb << knb;
  var mnb:int = lnb >> knb;
  var nnb:int = 92;
  var onb:int = mnb ^ nnb;
  d[28]:byte = onb;
  var pnb:int = d[28]:ubyte;
  var qnb:int = 24;
  var rnb:int = pnb << qnb;
  var snb:int = rnb >> qnb;
  var tnb:int = 56;
  var unb:int = snb ^ tnb;
  d[28]:byte = unb;
  var vnb:int = d[28]:ubyte;
  var wnb:int = 24;
  var xnb:int = vnb << wnb;
  var ynb:int = xnb >> wnb;
  var znb:int = 75;
  var aob:int = ynb ^ znb;
  d[28]:byte = aob;
  var bob:int = d[28]:ubyte;
  var cob:int = 24;
  var dob:int = bob << cob;
  var eob:int = dob >> cob;
  var fob:int = 119;
  var gob:int = eob ^ fob;
  d[28]:byte = gob;
  var hob:int = d[28]:ubyte;
  var iob:int = 24;
  var job:int = hob << iob;
  var kob:int = job >> iob;
  var lob:int = 41;
  var mob:int = kob ^ lob;
  d[28]:byte = mob;
  var nob:int = d[28]:ubyte;
  var oob:int = 24;
  var pob:int = nob << oob;
  var qob:int = pob >> oob;
  var rob:int = 11;
  var sob:int = qob ^ rob;
  d[28]:byte = sob;
  var tob:int = d[28]:ubyte;
  var uob:int = 24;
  var vob:int = tob << uob;
  var wob:int = vob >> uob;
  var xob:int = 77;
  var yob:int = wob ^ xob;
  d[28]:byte = yob;
  var zob:int = d[28]:ubyte;
  var apb:int = 24;
  var bpb:int = zob << apb;
  var cpb:int = bpb >> apb;
  var dpb:int = 64;
  var epb:int = cpb ^ dpb;
  d[28]:byte = epb;
  var fpb:int = d[28]:ubyte;
  var gpb:int = 24;
  var hpb:int = fpb << gpb;
  var ipb:int = hpb >> gpb;
  var jpb:int = 113;
  var kpb:int = ipb ^ jpb;
  d[28]:byte = kpb;
  var lpb:int = d[28]:ubyte;
  var mpb:int = 24;
  var npb:int = lpb << mpb;
  var opb:int = npb >> mpb;
  var ppb:int = 68;
  var qpb:int = opb ^ ppb;
  d[28]:byte = qpb;
  var rpb:int = d[28]:ubyte;
  var spb:int = 24;
  var tpb:int = rpb << spb;
  var upb:int = tpb >> spb;
  var vpb:int = 73;
  var wpb:int = upb ^ vpb;
  d[28]:byte = wpb;
  var xpb:int = d[28]:ubyte;
  var ypb:int = 24;
  var zpb:int = xpb << ypb;
  var aqb:int = zpb >> ypb;
  var bqb:int = 119;
  var cqb:int = aqb ^ bqb;
  d[28]:byte = cqb;
  var dqb:int = d[28]:ubyte;
  var eqb:int = 24;
  var fqb:int = dqb << eqb;
  var gqb:int = fqb >> eqb;
  var hqb:int = 63;
  var iqb:int = gqb ^ hqb;
  d[28]:byte = iqb;
  var jqb:int = d[28]:ubyte;
  var kqb:int = 24;
  var lqb:int = jqb << kqb;
  var mqb:int = lqb >> kqb;
  var nqb:int = 98;
  var oqb:int = mqb ^ nqb;
  d[28]:byte = oqb;
  var pqb:int = d[28]:ubyte;
  var qqb:int = 24;
  var rqb:int = pqb << qqb;
  var sqb:int = rqb >> qqb;
  var tqb:int = 5;
  var uqb:int = sqb ^ tqb;
  d[28]:byte = uqb;
  var vqb:int = d[28]:ubyte;
  var wqb:int = 24;
  var xqb:int = vqb << wqb;
  var yqb:int = xqb >> wqb;
  var zqb:int = 53;
  var arb:int = yqb ^ zqb;
  d[28]:byte = arb;
  var brb:int = 89;
  d[48]:byte = brb;
  var crb:int = d[48]:ubyte;
  var drb:int = 24;
  var erb:int = crb << drb;
  var frb:int = erb >> drb;
  var grb:int = 74;
  var hrb:int = frb ^ grb;
  d[48]:byte = hrb;
  var irb:int = d[48]:ubyte;
  var jrb:int = 24;
  var krb:int = irb << jrb;
  var lrb:int = krb >> jrb;
  var mrb:int = 112;
  var nrb:int = lrb ^ mrb;
  d[48]:byte = nrb;
  var orb:int = d[48]:ubyte;
  var prb:int = 24;
  var qrb:int = orb << prb;
  var rrb:int = qrb >> prb;
  var srb:int = 59;
  var trb:int = rrb ^ srb;
  d[48]:byte = trb;
  var urb:int = d[48]:ubyte;
  var vrb:int = 24;
  var wrb:int = urb << vrb;
  var xrb:int = wrb >> vrb;
  var yrb:int = 6;
  var zrb:int = xrb ^ yrb;
  d[48]:byte = zrb;
  var asb:int = d[48]:ubyte;
  var bsb:int = 24;
  var csb:int = asb << bsb;
  var dsb:int = csb >> bsb;
  var esb:int = 18;
  var fsb:int = dsb ^ esb;
  d[48]:byte = fsb;
  var gsb:int = d[48]:ubyte;
  var hsb:int = 24;
  var isb:int = gsb << hsb;
  var jsb:int = isb >> hsb;
  var ksb:int = 108;
  var lsb:int = jsb ^ ksb;
  d[48]:byte = lsb;
  var msb:int = d[48]:ubyte;
  var nsb:int = 24;
  var osb:int = msb << nsb;
  var psb:int = osb >> nsb;
  var qsb:int = 112;
  var rsb:int = psb ^ qsb;
  d[48]:byte = rsb;
  var ssb:int = d[48]:ubyte;
  var tsb:int = 24;
  var usb:int = ssb << tsb;
  var vsb:int = usb >> tsb;
  var wsb:int = 123;
  var xsb:int = vsb ^ wsb;
  d[48]:byte = xsb;
  var ysb:int = d[48]:ubyte;
  var zsb:int = 24;
  var atb:int = ysb << zsb;
  var btb:int = atb >> zsb;
  var ctb:int = 15;
  var dtb:int = btb ^ ctb;
  d[48]:byte = dtb;
  var etb:int = d[48]:ubyte;
  var ftb:int = 24;
  var gtb:int = etb << ftb;
  var htb:int = gtb >> ftb;
  var itb:int = 85;
  var jtb:int = htb ^ itb;
  d[48]:byte = jtb;
  var ktb:int = d[48]:ubyte;
  var ltb:int = 24;
  var mtb:int = ktb << ltb;
  var ntb:int = mtb >> ltb;
  var otb:int = 54;
  var ptb:int = ntb ^ otb;
  d[48]:byte = ptb;
  var qtb:int = d[48]:ubyte;
  var rtb:int = 24;
  var stb:int = qtb << rtb;
  var ttb:int = stb >> rtb;
  var utb:int = 4;
  var vtb:int = ttb ^ utb;
  d[48]:byte = vtb;
  var wtb:int = d[48]:ubyte;
  var xtb:int = 24;
  var ytb:int = wtb << xtb;
  var ztb:int = ytb >> xtb;
  var aub:int = 82;
  var bub:int = ztb ^ aub;
  d[48]:byte = bub;
  var cub:int = d[48]:ubyte;
  var dub:int = 24;
  var eub:int = cub << dub;
  var fub:int = eub >> dub;
  var gub:int = 111;
  var hub:int = fub ^ gub;
  d[48]:byte = hub;
  var iub:int = d[48]:ubyte;
  var jub:int = 24;
  var kub:int = iub << jub;
  var lub:int = kub >> jub;
  var mub:int = 122;
  var nub:int = lub ^ mub;
  d[48]:byte = nub;
  var oub:int = d[48]:ubyte;
  var pub:int = 24;
  var qub:int = oub << pub;
  var rub:int = qub >> pub;
  var sub:int = 102;
  var tub:int = rub ^ sub;
  d[48]:byte = tub;
  var uub:int = d[48]:ubyte;
  var vub:int = 24;
  var wub:int = uub << vub;
  var xub:int = wub >> vub;
  var yub:int = 58;
  var zub:int = xub ^ yub;
  d[48]:byte = zub;
  var avb:int = d[48]:ubyte;
  var bvb:int = 24;
  var cvb:int = avb << bvb;
  var dvb:int = cvb >> bvb;
  var evb:int = 69;
  var fvb:int = dvb ^ evb;
  d[48]:byte = fvb;
  var gvb:int = d[48]:ubyte;
  var hvb:int = 24;
  var ivb:int = gvb << hvb;
  var jvb:int = ivb >> hvb;
  var kvb:int = 1;
  var lvb:int = jvb ^ kvb;
  d[48]:byte = lvb;
  var mvb:int = d[48]:ubyte;
  var nvb:int = 24;
  var ovb:int = mvb << nvb;
  var pvb:int = ovb >> nvb;
  var qvb:int = 104;
  var rvb:int = pvb ^ qvb;
  d[48]:byte = rvb;
  var svb:int = 62;
  d[21]:byte = svb;
  var tvb:int = d[21]:ubyte;
  var uvb:int = 24;
  var vvb:int = tvb << uvb;
  var wvb:int = vvb >> uvb;
  var xvb:int = 22;
  var yvb:int = wvb ^ xvb;
  d[21]:byte = yvb;
  var zvb:int = d[21]:ubyte;
  var awb:int = 24;
  var bwb:int = zvb << awb;
  var cwb:int = bwb >> awb;
  var dwb:int = 62;
  var ewb:int = cwb ^ dwb;
  d[21]:byte = ewb;
  var fwb:int = d[21]:ubyte;
  var gwb:int = 24;
  var hwb:int = fwb << gwb;
  var iwb:int = hwb >> gwb;
  var jwb:int = 17;
  var kwb:int = iwb ^ jwb;
  d[21]:byte = kwb;
  var lwb:int = d[21]:ubyte;
  var mwb:int = 24;
  var nwb:int = lwb << mwb;
  var owb:int = nwb >> mwb;
  var pwb:int = 54;
  var qwb:int = owb ^ pwb;
  d[21]:byte = qwb;
  var rwb:int = d[21]:ubyte;
  var swb:int = 24;
  var twb:int = rwb << swb;
  var uwb:int = twb >> swb;
  var vwb:int = 20;
  var wwb:int = uwb ^ vwb;
  d[21]:byte = wwb;
  var xwb:int = d[21]:ubyte;
  var ywb:int = 24;
  var zwb:int = xwb << ywb;
  var axb:int = zwb >> ywb;
  var bxb:int = 109;
  var cxb:int = axb ^ bxb;
  d[21]:byte = cxb;
  var dxb:int = d[21]:ubyte;
  var exb:int = 24;
  var fxb:int = dxb << exb;
  var gxb:int = fxb >> exb;
  var hxb:int = 38;
  var ixb:int = gxb ^ hxb;
  d[21]:byte = ixb;
  var jxb:int = d[21]:ubyte;
  var kxb:int = 24;
  var lxb:int = jxb << kxb;
  var mxb:int = lxb >> kxb;
  var nxb:int = 31;
  var oxb:int = mxb ^ nxb;
  d[21]:byte = oxb;
  var pxb:int = d[21]:ubyte;
  var qxb:int = 24;
  var rxb:int = pxb << qxb;
  var sxb:int = rxb >> qxb;
  var txb:int = 103;
  var uxb:int = sxb ^ txb;
  d[21]:byte = uxb;
  var vxb:int = d[21]:ubyte;
  var wxb:int = 24;
  var xxb:int = vxb << wxb;
  var yxb:int = xxb >> wxb;
  var zxb:int = 47;
  var ayb:int = yxb ^ zxb;
  d[21]:byte = ayb;
  var byb:int = d[21]:ubyte;
  var cyb:int = 24;
  var dyb:int = byb << cyb;
  var eyb:int = dyb >> cyb;
  var fyb:int = 74;
  var gyb:int = eyb ^ fyb;
  d[21]:byte = gyb;
  var hyb:int = d[21]:ubyte;
  var iyb:int = 24;
  var jyb:int = hyb << iyb;
  var kyb:int = jyb >> iyb;
  var lyb:int = 51;
  var myb:int = kyb ^ lyb;
  d[21]:byte = myb;
  var nyb:int = d[21]:ubyte;
  var oyb:int = 24;
  var pyb:int = nyb << oyb;
  var qyb:int = pyb >> oyb;
  var ryb:int = 13;
  var syb:int = qyb ^ ryb;
  d[21]:byte = syb;
  var tyb:int = d[21]:ubyte;
  var uyb:int = 24;
  var vyb:int = tyb << uyb;
  var wyb:int = vyb >> uyb;
  var xyb:int = 92;
  var yyb:int = wyb ^ xyb;
  d[21]:byte = yyb;
  var zyb:int = d[21]:ubyte;
  var azb:int = 24;
  var bzb:int = zyb << azb;
  var czb:int = bzb >> azb;
  var dzb:int = 96;
  var ezb:int = czb ^ dzb;
  d[21]:byte = ezb;
  var fzb:int = d[21]:ubyte;
  var gzb:int = 24;
  var hzb:int = fzb << gzb;
  var izb:int = hzb >> gzb;
  var jzb:int = 14;
  var kzb:int = izb ^ jzb;
  d[21]:byte = kzb;
  var lzb:int = d[21]:ubyte;
  var mzb:int = 24;
  var nzb:int = lzb << mzb;
  var ozb:int = nzb >> mzb;
  var pzb:int = 110;
  var qzb:int = ozb ^ pzb;
  d[21]:byte = qzb;
  var rzb:int = d[21]:ubyte;
  var szb:int = 24;
  var tzb:int = rzb << szb;
  var uzb:int = tzb >> szb;
  var vzb:int = 95;
  var wzb:int = uzb ^ vzb;
  d[21]:byte = wzb;
  var xzb:int = d[21]:ubyte;
  var yzb:int = 24;
  var zzb:int = xzb << yzb;
  var aac:int = zzb >> yzb;
  var bac:int = 109;
  var cac:int = aac ^ bac;
  d[21]:byte = cac;
  var dac:int = d[21]:ubyte;
  var eac:int = 24;
  var fac:int = dac << eac;
  var gac:int = fac >> eac;
  var hac:int = 66;
  var iac:int = gac ^ hac;
  d[21]:byte = iac;
  var jac:int = 6;
  d[15]:byte = jac;
  var kac:int = d[15]:ubyte;
  var lac:int = 24;
  var mac:int = kac << lac;
  var nac:int = mac >> lac;
  var oac:int = 89;
  var pac:int = nac ^ oac;
  d[15]:byte = pac;
  var qac:int = d[15]:ubyte;
  var rac:int = 24;
  var sac:int = qac << rac;
  var tac:int = sac >> rac;
  var uac:int = 70;
  var vac:int = tac ^ uac;
  d[15]:byte = vac;
  var wac:int = d[15]:ubyte;
  var xac:int = 24;
  var yac:int = wac << xac;
  var zac:int = yac >> xac;
  var abc:int = 98;
  var bbc:int = zac ^ abc;
  d[15]:byte = bbc;
  var cbc:int = d[15]:ubyte;
  var dbc:int = 24;
  var ebc:int = cbc << dbc;
  var fbc:int = ebc >> dbc;
  var gbc:int = 122;
  var hbc:int = fbc ^ gbc;
  d[15]:byte = hbc;
  var ibc:int = d[15]:ubyte;
  var jbc:int = 24;
  var kbc:int = ibc << jbc;
  var lbc:int = kbc >> jbc;
  var mbc:int = 86;
  var nbc:int = lbc ^ mbc;
  d[15]:byte = nbc;
  var obc:int = d[15]:ubyte;
  var pbc:int = 24;
  var qbc:int = obc << pbc;
  var rbc:int = qbc >> pbc;
  var sbc:int = 8;
  var tbc:int = rbc ^ sbc;
  d[15]:byte = tbc;
  var ubc:int = d[15]:ubyte;
  var vbc:int = 24;
  var wbc:int = ubc << vbc;
  var xbc:int = wbc >> vbc;
  var ybc:int = 45;
  var zbc:int = xbc ^ ybc;
  d[15]:byte = zbc;
  var acc:int = d[15]:ubyte;
  var bcc:int = 24;
  var ccc:int = acc << bcc;
  var dcc:int = ccc >> bcc;
  var ecc:int = 110;
  var fcc:int = dcc ^ ecc;
  d[15]:byte = fcc;
  var gcc:int = d[15]:ubyte;
  var hcc:int = 24;
  var icc:int = gcc << hcc;
  var jcc:int = icc >> hcc;
  var kcc:int = 20;
  var lcc:int = jcc ^ kcc;
  d[15]:byte = lcc;
  var mcc:int = d[15]:ubyte;
  var ncc:int = 24;
  var occ:int = mcc << ncc;
  var pcc:int = occ >> ncc;
  var qcc:int = 5;
  var rcc:int = pcc ^ qcc;
  d[15]:byte = rcc;
  var scc:int = d[15]:ubyte;
  var tcc:int = 24;
  var ucc:int = scc << tcc;
  var vcc:int = ucc >> tcc;
  var wcc:int = 23;
  var xcc:int = vcc ^ wcc;
  d[15]:byte = xcc;
  var ycc:int = d[15]:ubyte;
  var zcc:int = 24;
  var adc:int = ycc << zcc;
  var bdc:int = adc >> zcc;
  var cdc:int = 38;
  var ddc:int = bdc ^ cdc;
  d[15]:byte = ddc;
  var edc:int = d[15]:ubyte;
  var fdc:int = 24;
  var gdc:int = edc << fdc;
  var hdc:int = gdc >> fdc;
  var idc:int = 61;
  var jdc:int = hdc ^ idc;
  d[15]:byte = jdc;
  var kdc:int = d[15]:ubyte;
  var ldc:int = 24;
  var mdc:int = kdc << ldc;
  var ndc:int = mdc >> ldc;
  var odc:int = 33;
  var pdc:int = ndc ^ odc;
  d[15]:byte = pdc;
  var qdc:int = d[15]:ubyte;
  var rdc:int = 24;
  var sdc:int = qdc << rdc;
  var tdc:int = sdc >> rdc;
  var udc:int = 72;
  var vdc:int = tdc ^ udc;
  d[15]:byte = vdc;
  var wdc:int = d[15]:ubyte;
  var xdc:int = 24;
  var ydc:int = wdc << xdc;
  var zdc:int = ydc >> xdc;
  var aec:int = 19;
  var bec:int = zdc ^ aec;
  d[15]:byte = bec;
  var cec:int = d[15]:ubyte;
  var dec:int = 24;
  var eec:int = cec << dec;
  var fec:int = eec >> dec;
  var gec:int = 13;
  var hec:int = fec ^ gec;
  d[15]:byte = hec;
  var iec:int = d[15]:ubyte;
  var jec:int = 24;
  var kec:int = iec << jec;
  var lec:int = kec >> jec;
  var mec:int = 29;
  var nec:int = lec ^ mec;
  d[15]:byte = nec;
  var oec:int = d[15]:ubyte;
  var pec:int = 24;
  var qec:int = oec << pec;
  var rec:int = qec >> pec;
  var sec:int = 7;
  var tec:int = rec ^ sec;
  d[15]:byte = tec;
  var uec:int = d[15]:ubyte;
  var vec:int = 24;
  var wec:int = uec << vec;
  var xec:int = wec >> vec;
  var yec:int = 51;
  var zec:int = xec ^ yec;
  d[15]:byte = zec;
  var afc:int = 68;
  d[52]:byte = afc;
  var bfc:int = d[52]:ubyte;
  var cfc:int = 24;
  var dfc:int = bfc << cfc;
  var efc:int = dfc >> cfc;
  var ffc:int = 2;
  var gfc:int = efc ^ ffc;
  d[52]:byte = gfc;
  var hfc:int = d[52]:ubyte;
  var ifc:int = 24;
  var jfc:int = hfc << ifc;
  var kfc:int = jfc >> ifc;
  var lfc:int = 107;
  var mfc:int = kfc ^ lfc;
  d[52]:byte = mfc;
  var nfc:int = d[52]:ubyte;
  var ofc:int = 24;
  var pfc:int = nfc << ofc;
  var qfc:int = pfc >> ofc;
  var rfc:int = 45;
  var sfc:int = qfc ^ rfc;
  d[52]:byte = sfc;
  var tfc:int = d[52]:ubyte;
  var ufc:int = 24;
  var vfc:int = tfc << ufc;
  var wfc:int = vfc >> ufc;
  var xfc:int = 66;
  var yfc:int = wfc ^ xfc;
  d[52]:byte = yfc;
  var zfc:int = d[52]:ubyte;
  var agc:int = 24;
  var bgc:int = zfc << agc;
  var cgc:int = bgc >> agc;
  var dgc:int = 64;
  var egc:int = cgc ^ dgc;
  d[52]:byte = egc;
  var fgc:int = d[52]:ubyte;
  var ggc:int = 24;
  var hgc:int = fgc << ggc;
  var igc:int = hgc >> ggc;
  var jgc:int = 69;
  var kgc:int = igc ^ jgc;
  d[52]:byte = kgc;
  var lgc:int = d[52]:ubyte;
  var mgc:int = 24;
  var ngc:int = lgc << mgc;
  var ogc:int = ngc >> mgc;
  var pgc:int = 38;
  var qgc:int = ogc ^ pgc;
  d[52]:byte = qgc;
  var rgc:int = d[52]:ubyte;
  var sgc:int = 24;
  var tgc:int = rgc << sgc;
  var ugc:int = tgc >> sgc;
  var vgc:int = 106;
  var wgc:int = ugc ^ vgc;
  d[52]:byte = wgc;
  var xgc:int = d[52]:ubyte;
  var ygc:int = 24;
  var zgc:int = xgc << ygc;
  var ahc:int = zgc >> ygc;
  var bhc:int = 94;
  var chc:int = ahc ^ bhc;
  d[52]:byte = chc;
  var dhc:int = d[52]:ubyte;
  var ehc:int = 24;
  var fhc:int = dhc << ehc;
  var ghc:int = fhc >> ehc;
  var hhc:int = 76;
  var ihc:int = ghc ^ hhc;
  d[52]:byte = ihc;
  var jhc:int = d[52]:ubyte;
  var khc:int = 24;
  var lhc:int = jhc << khc;
  var mhc:int = lhc >> khc;
  var nhc:int = 69;
  var ohc:int = mhc ^ nhc;
  d[52]:byte = ohc;
  var phc:int = d[52]:ubyte;
  var qhc:int = 24;
  var rhc:int = phc << qhc;
  var shc:int = rhc >> qhc;
  var thc:int = 20;
  var uhc:int = shc ^ thc;
  d[52]:byte = uhc;
  var vhc:int = d[52]:ubyte;
  var whc:int = 24;
  var xhc:int = vhc << whc;
  var yhc:int = xhc >> whc;
  var zhc:int = 34;
  var aic:int = yhc ^ zhc;
  d[52]:byte = aic;
  var bic:int = d[52]:ubyte;
  var cic:int = 24;
  var dic:int = bic << cic;
  var eic:int = dic >> cic;
  var fic:int = 3;
  var gic:int = eic ^ fic;
  d[52]:byte = gic;
  var hic:int = d[52]:ubyte;
  var iic:int = 24;
  var jic:int = hic << iic;
  var kic:int = jic >> iic;
  var lic:int = 39;
  var mic:int = kic ^ lic;
  d[52]:byte = mic;
  var nic:int = d[52]:ubyte;
  var oic:int = 24;
  var pic:int = nic << oic;
  var qic:int = pic >> oic;
  var ric:int = 64;
  var sic:int = qic ^ ric;
  d[52]:byte = sic;
  var tic:int = d[52]:ubyte;
  var uic:int = 24;
  var vic:int = tic << uic;
  var wic:int = vic >> uic;
  var xic:int = 26;
  var yic:int = wic ^ xic;
  d[52]:byte = yic;
  var zic:int = d[52]:ubyte;
  var ajc:int = 24;
  var bjc:int = zic << ajc;
  var cjc:int = bjc >> ajc;
  var djc:int = 14;
  var ejc:int = cjc ^ djc;
  d[52]:byte = ejc;
  var fjc:int = d[52]:ubyte;
  var gjc:int = 24;
  var hjc:int = fjc << gjc;
  var ijc:int = hjc >> gjc;
  var jjc:int = 123;
  var kjc:int = ijc ^ jjc;
  d[52]:byte = kjc;
  var ljc:int = d[52]:ubyte;
  var mjc:int = 24;
  var njc:int = ljc << mjc;
  var ojc:int = njc >> mjc;
  var pjc:int = 28;
  var qjc:int = ojc ^ pjc;
  d[52]:byte = qjc;
  var rjc:int = 63;
  d[18]:byte = rjc;
  var sjc:int = d[18]:ubyte;
  var tjc:int = 24;
  var ujc:int = sjc << tjc;
  var vjc:int = ujc >> tjc;
  var wjc:int = 112;
  var xjc:int = vjc ^ wjc;
  d[18]:byte = xjc;
  var yjc:int = d[18]:ubyte;
  var zjc:int = 24;
  var akc:int = yjc << zjc;
  var bkc:int = akc >> zjc;
  var ckc:int = 26;
  var dkc:int = bkc ^ ckc;
  d[18]:byte = dkc;
  var ekc:int = d[18]:ubyte;
  var fkc:int = 24;
  var gkc:int = ekc << fkc;
  var hkc:int = gkc >> fkc;
  var ikc:int = 72;
  var jkc:int = hkc ^ ikc;
  d[18]:byte = jkc;
  var kkc:int = d[18]:ubyte;
  var lkc:int = 24;
  var mkc:int = kkc << lkc;
  var nkc:int = mkc >> lkc;
  var okc:int = 103;
  var pkc:int = nkc ^ okc;
  d[18]:byte = pkc;
  var qkc:int = d[18]:ubyte;
  var rkc:int = 24;
  var skc:int = qkc << rkc;
  var tkc:int = skc >> rkc;
  var ukc:int = 37;
  var vkc:int = tkc ^ ukc;
  d[18]:byte = vkc;
  var wkc:int = d[18]:ubyte;
  var xkc:int = 24;
  var ykc:int = wkc << xkc;
  var zkc:int = ykc >> xkc;
  var alc:int = 122;
  var blc:int = zkc ^ alc;
  d[18]:byte = blc;
  var clc:int = d[18]:ubyte;
  var dlc:int = 24;
  var elc:int = clc << dlc;
  var flc:int = elc >> dlc;
  var glc:int = 48;
  var hlc:int = flc ^ glc;
  d[18]:byte = hlc;
  var ilc:int = d[18]:ubyte;
  var jlc:int = 24;
  var klc:int = ilc << jlc;
  var llc:int = klc >> jlc;
  var mlc:int = 82;
  var nlc:int = llc ^ mlc;
  d[18]:byte = nlc;
  var olc:int = d[18]:ubyte;
  var plc:int = 24;
  var qlc:int = olc << plc;
  var rlc:int = qlc >> plc;
  var slc:int = 50;
  var tlc:int = rlc ^ slc;
  d[18]:byte = tlc;
  var ulc:int = d[18]:ubyte;
  var vlc:int = 24;
  var wlc:int = ulc << vlc;
  var xlc:int = wlc >> vlc;
  var ylc:int = 60;
  var zlc:int = xlc ^ ylc;
  d[18]:byte = zlc;
  var amc:int = d[18]:ubyte;
  var bmc:int = 24;
  var cmc:int = amc << bmc;
  var dmc:int = cmc >> bmc;
  var emc:int = 80;
  var fmc:int = dmc ^ emc;
  d[18]:byte = fmc;
  var gmc:int = d[18]:ubyte;
  var hmc:int = 24;
  var imc:int = gmc << hmc;
  var jmc:int = imc >> hmc;
  var kmc:int = 20;
  var lmc:int = jmc ^ kmc;
  d[18]:byte = lmc;
  var mmc:int = d[18]:ubyte;
  var nmc:int = 24;
  var omc:int = mmc << nmc;
  var pmc:int = omc >> nmc;
  var qmc:int = 53;
  var rmc:int = pmc ^ qmc;
  d[18]:byte = rmc;
  var smc:int = d[18]:ubyte;
  var tmc:int = 24;
  var umc:int = smc << tmc;
  var vmc:int = umc >> tmc;
  var wmc:int = 19;
  var xmc:int = vmc ^ wmc;
  d[18]:byte = xmc;
  var ymc:int = d[18]:ubyte;
  var zmc:int = 24;
  var anc:int = ymc << zmc;
  var bnc:int = anc >> zmc;
  var cnc:int = 5;
  var dnc:int = bnc ^ cnc;
  d[18]:byte = dnc;
  var enc:int = d[18]:ubyte;
  var fnc:int = 24;
  var gnc:int = enc << fnc;
  var hnc:int = gnc >> fnc;
  var inc:int = 104;
  var jnc:int = hnc ^ inc;
  d[18]:byte = jnc;
  var knc:int = d[18]:ubyte;
  var lnc:int = 24;
  var mnc:int = knc << lnc;
  var nnc:int = mnc >> lnc;
  var onc:int = 111;
  var pnc:int = nnc ^ onc;
  d[18]:byte = pnc;
  var qnc:int = d[18]:ubyte;
  var rnc:int = 24;
  var snc:int = qnc << rnc;
  var tnc:int = snc >> rnc;
  var unc:int = 26;
  var vnc:int = tnc ^ unc;
  d[18]:byte = vnc;
  var wnc:int = d[18]:ubyte;
  var xnc:int = 24;
  var ync:int = wnc << xnc;
  var znc:int = ync >> xnc;
  var aoc:int = 94;
  var boc:int = znc ^ aoc;
  d[18]:byte = boc;
  var coc:int = d[18]:ubyte;
  var doc:int = 24;
  var eoc:int = coc << doc;
  var foc:int = eoc >> doc;
  var goc:int = 25;
  var hoc:int = foc ^ goc;
  d[18]:byte = hoc;
  var ioc:int = 119;
  d[0]:byte = ioc;
  var joc:int = d[0]:ubyte;
  var koc:int = 24;
  var loc:int = joc << koc;
  var moc:int = loc >> koc;
  var noc:int = 2;
  var ooc:int = moc ^ noc;
  d[0]:byte = ooc;
  var poc:int = d[0]:ubyte;
  var qoc:int = 24;
  var roc:int = poc << qoc;
  var soc:int = roc >> qoc;
  var toc:int = 68;
  var uoc:int = soc ^ toc;
  d[0]:byte = uoc;
  var voc:int = d[0]:ubyte;
  var woc:int = 24;
  var xoc:int = voc << woc;
  var yoc:int = xoc >> woc;
  var zoc:int = 27;
  var apc:int = yoc ^ zoc;
  d[0]:byte = apc;
  var bpc:int = d[0]:ubyte;
  var cpc:int = 24;
  var dpc:int = bpc << cpc;
  var epc:int = dpc >> cpc;
  var fpc:int = 38;
  var gpc:int = epc ^ fpc;
  d[0]:byte = gpc;
  var hpc:int = d[0]:ubyte;
  var ipc:int = 24;
  var jpc:int = hpc << ipc;
  var kpc:int = jpc >> ipc;
  var lpc:int = 109;
  var mpc:int = kpc ^ lpc;
  d[0]:byte = mpc;
  var npc:int = d[0]:ubyte;
  var opc:int = 24;
  var ppc:int = npc << opc;
  var qpc:int = ppc >> opc;
  var rpc:int = 101;
  var spc:int = qpc ^ rpc;
  d[0]:byte = spc;
  var tpc:int = d[0]:ubyte;
  var upc:int = 24;
  var vpc:int = tpc << upc;
  var wpc:int = vpc >> upc;
  var xpc:int = 122;
  var ypc:int = wpc ^ xpc;
  d[0]:byte = ypc;
  var zpc:int = d[0]:ubyte;
  var aqc:int = 24;
  var bqc:int = zpc << aqc;
  var cqc:int = bqc >> aqc;
  var dqc:int = 85;
  var eqc:int = cqc ^ dqc;
  d[0]:byte = eqc;
  var fqc:int = d[0]:ubyte;
  var gqc:int = 24;
  var hqc:int = fqc << gqc;
  var iqc:int = hqc >> gqc;
  var jqc:int = 117;
  var kqc:int = iqc ^ jqc;
  d[0]:byte = kqc;
  var lqc:int = d[0]:ubyte;
  var mqc:int = 24;
  var nqc:int = lqc << mqc;
  var oqc:int = nqc >> mqc;
  var pqc:int = 107;
  var qqc:int = oqc ^ pqc;
  d[0]:byte = qqc;
  var rqc:int = d[0]:ubyte;
  var sqc:int = 24;
  var tqc:int = rqc << sqc;
  var uqc:int = tqc >> sqc;
  var vqc:int = 57;
  var wqc:int = uqc ^ vqc;
  d[0]:byte = wqc;
  var xqc:int = d[0]:ubyte;
  var yqc:int = 24;
  var zqc:int = xqc << yqc;
  var arc:int = zqc >> yqc;
  var brc:int = 29;
  var crc:int = arc ^ brc;
  d[0]:byte = crc;
  var drc:int = d[0]:ubyte;
  var erc:int = 24;
  var frc:int = drc << erc;
  var grc:int = frc >> erc;
  var hrc:int = 120;
  var irc:int = grc ^ hrc;
  d[0]:byte = irc;
  var jrc:int = d[0]:ubyte;
  var krc:int = 24;
  var lrc:int = jrc << krc;
  var mrc:int = lrc >> krc;
  var nrc:int = 123;
  var orc:int = mrc ^ nrc;
  d[0]:byte = orc;
  var prc:int = d[0]:ubyte;
  var qrc:int = 24;
  var rrc:int = prc << qrc;
  var src:int = rrc >> qrc;
  var trc:int = 54;
  var urc:int = src ^ trc;
  d[0]:byte = urc;
  var vrc:int = d[0]:ubyte;
  var wrc:int = 24;
  var xrc:int = vrc << wrc;
  var yrc:int = xrc >> wrc;
  var zrc:int = 68;
  var asc:int = yrc ^ zrc;
  d[0]:byte = asc;
  var bsc:int = d[0]:ubyte;
  var csc:int = 24;
  var dsc:int = bsc << csc;
  var esc:int = dsc >> csc;
  var fsc:int = 113;
  var gsc:int = esc ^ fsc;
  d[0]:byte = gsc;
  var hsc:int = d[0]:ubyte;
  var isc:int = 24;
  var jsc:int = hsc << isc;
  var ksc:int = jsc >> isc;
  var lsc:int = 2;
  var msc:int = ksc ^ lsc;
  d[0]:byte = msc;
  var nsc:int = d[0]:ubyte;
  var osc:int = 24;
  var psc:int = nsc << osc;
  var qsc:int = psc >> osc;
  var rsc:int = 74;
  var ssc:int = qsc ^ rsc;
  d[0]:byte = ssc;
  var tsc:int = d[0]:ubyte;
  var usc:int = 24;
  var vsc:int = tsc << usc;
  var wsc:int = vsc >> usc;
  var xsc:int = 21;
  var ysc:int = wsc ^ xsc;
  d[0]:byte = ysc;
  var zsc:int = 72;
  d[20]:byte = zsc;
  var atc:int = d[20]:ubyte;
  var btc:int = 24;
  var ctc:int = atc << btc;
  var dtc:int = ctc >> btc;
  var etc:int = 127;
  var ftc:int = dtc ^ etc;
  d[20]:byte = ftc;
  var gtc:int = d[20]:ubyte;
  var htc:int = 24;
  var itc:int = gtc << htc;
  var jtc:int = itc >> htc;
  var ktc:int = 105;
  var ltc:int = jtc ^ ktc;
  d[20]:byte = ltc;
  var mtc:int = d[20]:ubyte;
  var ntc:int = 24;
  var otc:int = mtc << ntc;
  var ptc:int = otc >> ntc;
  var qtc:int = 49;
  var rtc:int = ptc ^ qtc;
  d[20]:byte = rtc;
  var stc:int = d[20]:ubyte;
  var ttc:int = 24;
  var utc:int = stc << ttc;
  var vtc:int = utc >> ttc;
  var wtc:int = 103;
  var xtc:int = vtc ^ wtc;
  d[20]:byte = xtc;
  var ytc:int = d[20]:ubyte;
  var ztc:int = 24;
  var auc:int = ytc << ztc;
  var buc:int = auc >> ztc;
  var cuc:int = 26;
  var duc:int = buc ^ cuc;
  d[20]:byte = duc;
  var euc:int = d[20]:ubyte;
  var fuc:int = 24;
  var guc:int = euc << fuc;
  var huc:int = guc >> fuc;
  var iuc:int = 22;
  var juc:int = huc ^ iuc;
  d[20]:byte = juc;
  var kuc:int = d[20]:ubyte;
  var luc:int = 24;
  var muc:int = kuc << luc;
  var nuc:int = muc >> luc;
  var ouc:int = 52;
  var puc:int = nuc ^ ouc;
  d[20]:byte = puc;
  var quc:int = d[20]:ubyte;
  var ruc:int = 24;
  var suc:int = quc << ruc;
  var tuc:int = suc >> ruc;
  var uuc:int = 90;
  var vuc:int = tuc ^ uuc;
  d[20]:byte = vuc;
  var wuc:int = d[20]:ubyte;
  var xuc:int = 24;
  var yuc:int = wuc << xuc;
  var zuc:int = yuc >> xuc;
  var avc:int = 6;
  var bvc:int = zuc ^ avc;
  d[20]:byte = bvc;
  var cvc:int = d[20]:ubyte;
  var dvc:int = 24;
  var evc:int = cvc << dvc;
  var fvc:int = evc >> dvc;
  var gvc:int = 66;
  var hvc:int = fvc ^ gvc;
  d[20]:byte = hvc;
  var ivc:int = d[20]:ubyte;
  var jvc:int = 24;
  var kvc:int = ivc << jvc;
  var lvc:int = kvc >> jvc;
  var mvc:int = 11;
  var nvc:int = lvc ^ mvc;
  d[20]:byte = nvc;
  var ovc:int = d[20]:ubyte;
  var pvc:int = 24;
  var qvc:int = ovc << pvc;
  var rvc:int = qvc >> pvc;
  var svc:int = 3;
  var tvc:int = rvc ^ svc;
  d[20]:byte = tvc;
  var uvc:int = d[20]:ubyte;
  var vvc:int = 24;
  var wvc:int = uvc << vvc;
  var xvc:int = wvc >> vvc;
  var yvc:int = 2;
  var zvc:int = xvc ^ yvc;
  d[20]:byte = zvc;
  var awc:int = d[20]:ubyte;
  var bwc:int = 24;
  var cwc:int = awc << bwc;
  var dwc:int = cwc >> bwc;
  var ewc:int = 38;
  var fwc:int = dwc ^ ewc;
  d[20]:byte = fwc;
  var gwc:int = d[20]:ubyte;
  var hwc:int = 24;
  var iwc:int = gwc << hwc;
  var jwc:int = iwc >> hwc;
  var kwc:int = 124;
  var lwc:int = jwc ^ kwc;
  d[20]:byte = lwc;
  var mwc:int = d[20]:ubyte;
  var nwc:int = 24;
  var owc:int = mwc << nwc;
  var pwc:int = owc >> nwc;
  var qwc:int = 46;
  var rwc:int = pwc ^ qwc;
  d[20]:byte = rwc;
  var swc:int = d[20]:ubyte;
  var twc:int = 24;
  var uwc:int = swc << twc;
  var vwc:int = uwc >> twc;
  var wwc:int = 22;
  var xwc:int = vwc ^ wwc;
  d[20]:byte = xwc;
  var ywc:int = d[20]:ubyte;
  var zwc:int = 24;
  var axc:int = ywc << zwc;
  var bxc:int = axc >> zwc;
  var cxc:int = 11;
  var dxc:int = bxc ^ cxc;
  d[20]:byte = dxc;
  var exc:int = d[20]:ubyte;
  var fxc:int = 24;
  var gxc:int = exc << fxc;
  var hxc:int = gxc >> fxc;
  var ixc:int = 114;
  var jxc:int = hxc ^ ixc;
  d[20]:byte = jxc;
  var kxc:int = d[20]:ubyte;
  var lxc:int = 24;
  var mxc:int = kxc << lxc;
  var nxc:int = mxc >> lxc;
  var oxc:int = 77;
  var pxc:int = nxc ^ oxc;
  d[20]:byte = pxc;
  var qxc:int = 5;
  d[19]:byte = qxc;
  var rxc:int = d[19]:ubyte;
  var sxc:int = 24;
  var txc:int = rxc << sxc;
  var uxc:int = txc >> sxc;
  var vxc:int = 60;
  var wxc:int = uxc ^ vxc;
  d[19]:byte = wxc;
  var xxc:int = d[19]:ubyte;
  var yxc:int = 24;
  var zxc:int = xxc << yxc;
  var ayc:int = zxc >> yxc;
  var byc:int = 100;
  var cyc:int = ayc ^ byc;
  d[19]:byte = cyc;
  var dyc:int = d[19]:ubyte;
  var eyc:int = 24;
  var fyc:int = dyc << eyc;
  var gyc:int = fyc >> eyc;
  var hyc:int = 112;
  var iyc:int = gyc ^ hyc;
  d[19]:byte = iyc;
  var jyc:int = d[19]:ubyte;
  var kyc:int = 24;
  var lyc:int = jyc << kyc;
  var myc:int = lyc >> kyc;
  var nyc:int = 77;
  var oyc:int = myc ^ nyc;
  d[19]:byte = oyc;
  var pyc:int = d[19]:ubyte;
  var qyc:int = 24;
  var ryc:int = pyc << qyc;
  var syc:int = ryc >> qyc;
  var tyc:int = 38;
  var uyc:int = syc ^ tyc;
  d[19]:byte = uyc;
  var vyc:int = d[19]:ubyte;
  var wyc:int = 24;
  var xyc:int = vyc << wyc;
  var yyc:int = xyc >> wyc;
  var zyc:int = 121;
  var azc:int = yyc ^ zyc;
  d[19]:byte = azc;
  var bzc:int = d[19]:ubyte;
  var czc:int = 24;
  var dzc:int = bzc << czc;
  var ezc:int = dzc >> czc;
  var fzc:int = 110;
  var gzc:int = ezc ^ fzc;
  d[19]:byte = gzc;
  var hzc:int = d[19]:ubyte;
  var izc:int = 24;
  var jzc:int = hzc << izc;
  var kzc:int = jzc >> izc;
  var lzc:int = 29;
  var mzc:int = kzc ^ lzc;
  d[19]:byte = mzc;
  var nzc:int = d[19]:ubyte;
  var ozc:int = 24;
  var pzc:int = nzc << ozc;
  var qzc:int = pzc >> ozc;
  var rzc:int = 64;
  var szc:int = qzc ^ rzc;
  d[19]:byte = szc;
  var tzc:int = d[19]:ubyte;
  var uzc:int = 24;
  var vzc:int = tzc << uzc;
  var wzc:int = vzc >> uzc;
  var xzc:int = 37;
  var yzc:int = wzc ^ xzc;
  d[19]:byte = yzc;
  var zzc:int = d[19]:ubyte;
  var aad:int = 24;
  var bad:int = zzc << aad;
  var cad:int = bad >> aad;
  var dad:int = 98;
  var ead:int = cad ^ dad;
  d[19]:byte = ead;
  var fad:int = d[19]:ubyte;
  var gad:int = 24;
  var had:int = fad << gad;
  var iad:int = had >> gad;
  var jad:int = 68;
  var kad:int = iad ^ jad;
  d[19]:byte = kad;
  var lad:int = d[19]:ubyte;
  var mad:int = 24;
  var nad:int = lad << mad;
  var oad:int = nad >> mad;
  var pad:int = 126;
  var qad:int = oad ^ pad;
  d[19]:byte = qad;
  var rad:int = d[19]:ubyte;
  var sad:int = 24;
  var tad:int = rad << sad;
  var uad:int = tad >> sad;
  var vad:int = 108;
  var wad:int = uad ^ vad;
  d[19]:byte = wad;
  var xad:int = d[19]:ubyte;
  var yad:int = 24;
  var zad:int = xad << yad;
  var abd:int = zad >> yad;
  var bbd:int = 71;
  var cbd:int = abd ^ bbd;
  d[19]:byte = cbd;
  var dbd:int = d[19]:ubyte;
  var ebd:int = 24;
  var fbd:int = dbd << ebd;
  var gbd:int = fbd >> ebd;
  var hbd:int = 74;
  var ibd:int = gbd ^ hbd;
  d[19]:byte = ibd;
  var jbd:int = d[19]:ubyte;
  var kbd:int = 24;
  var lbd:int = jbd << kbd;
  var mbd:int = lbd >> kbd;
  var nbd:int = 94;
  var obd:int = mbd ^ nbd;
  d[19]:byte = obd;
  var pbd:int = d[19]:ubyte;
  var qbd:int = 24;
  var rbd:int = pbd << qbd;
  var sbd:int = rbd >> qbd;
  var tbd:int = 3;
  var ubd:int = sbd ^ tbd;
  d[19]:byte = ubd;
  var vbd:int = d[19]:ubyte;
  var wbd:int = 24;
  var xbd:int = vbd << wbd;
  var ybd:int = xbd >> wbd;
  var zbd:int = 33;
  var acd:int = ybd ^ zbd;
  d[19]:byte = acd;
  var bcd:int = d[19]:ubyte;
  var ccd:int = 24;
  var dcd:int = bcd << ccd;
  var ecd:int = dcd >> ccd;
  var fcd:int = 95;
  var gcd:int = ecd ^ fcd;
  d[19]:byte = gcd;
  var hcd:int = 22;
  d[34]:byte = hcd;
  var icd:int = d[34]:ubyte;
  var jcd:int = 24;
  var kcd:int = icd << jcd;
  var lcd:int = kcd >> jcd;
  var mcd:int = 36;
  var ncd:int = lcd ^ mcd;
  d[34]:byte = ncd;
  var ocd:int = d[34]:ubyte;
  var pcd:int = 24;
  var qcd:int = ocd << pcd;
  var rcd:int = qcd >> pcd;
  var scd:int = 22;
  var tcd:int = rcd ^ scd;
  d[34]:byte = tcd;
  var ucd:int = d[34]:ubyte;
  var vcd:int = 24;
  var wcd:int = ucd << vcd;
  var xcd:int = wcd >> vcd;
  var ycd:int = 125;
  var zcd:int = xcd ^ ycd;
  d[34]:byte = zcd;
  var add:int = d[34]:ubyte;
  var bdd:int = 24;
  var cdd:int = add << bdd;
  var ddd:int = cdd >> bdd;
  var edd:int = 125;
  var fdd:int = ddd ^ edd;
  d[34]:byte = fdd;
  var gdd:int = d[34]:ubyte;
  var hdd:int = 24;
  var idd:int = gdd << hdd;
  var jdd:int = idd >> hdd;
  var kdd:int = 27;
  var ldd:int = jdd ^ kdd;
  d[34]:byte = ldd;
  var mdd:int = d[34]:ubyte;
  var ndd:int = 24;
  var odd:int = mdd << ndd;
  var pdd:int = odd >> ndd;
  var qdd:int = 25;
  var rdd:int = pdd ^ qdd;
  d[34]:byte = rdd;
  var sdd:int = d[34]:ubyte;
  var tdd:int = 24;
  var udd:int = sdd << tdd;
  var vdd:int = udd >> tdd;
  var wdd:int = 31;
  var xdd:int = vdd ^ wdd;
  d[34]:byte = xdd;
  var ydd:int = d[34]:ubyte;
  var zdd:int = 24;
  var aed:int = ydd << zdd;
  var bed:int = aed >> zdd;
  var ced:int = 118;
  var ded:int = bed ^ ced;
  d[34]:byte = ded;
  var eed:int = d[34]:ubyte;
  var fed:int = 24;
  var ged:int = eed << fed;
  var hed:int = ged >> fed;
  var ied:int = 124;
  var jed:int = hed ^ ied;
  d[34]:byte = jed;
  var ked:int = d[34]:ubyte;
  var led:int = 24;
  var med:int = ked << led;
  var ned:int = med >> led;
  var oed:int = 83;
  var ped:int = ned ^ oed;
  d[34]:byte = ped;
  var qed:int = d[34]:ubyte;
  var red:int = 24;
  var sed:int = qed << red;
  var ted:int = sed >> red;
  var ued:int = 50;
  var ved:int = ted ^ ued;
  d[34]:byte = ved;
  var wed:int = d[34]:ubyte;
  var xed:int = 24;
  var yed:int = wed << xed;
  var zed:int = yed >> xed;
  var afd:int = 4;
  var bfd:int = zed ^ afd;
  d[34]:byte = bfd;
  var cfd:int = d[34]:ubyte;
  var dfd:int = 24;
  var efd:int = cfd << dfd;
  var ffd:int = efd >> dfd;
  var gfd:int = 83;
  var hfd:int = ffd ^ gfd;
  d[34]:byte = hfd;
  var ifd:int = d[34]:ubyte;
  var jfd:int = 24;
  var kfd:int = ifd << jfd;
  var lfd:int = kfd >> jfd;
  var mfd:int = 29;
  var nfd:int = lfd ^ mfd;
  d[34]:byte = nfd;
  var ofd:int = d[34]:ubyte;
  var pfd:int = 24;
  var qfd:int = ofd << pfd;
  var rfd:int = qfd >> pfd;
  var sfd:int = 113;
  var tfd:int = rfd ^ sfd;
  d[34]:byte = tfd;
  var ufd:int = d[34]:ubyte;
  var vfd:int = 24;
  var wfd:int = ufd << vfd;
  var xfd:int = wfd >> vfd;
  var yfd:int = 7;
  var zfd:int = xfd ^ yfd;
  d[34]:byte = zfd;
  var agd:int = d[34]:ubyte;
  var bgd:int = 24;
  var cgd:int = agd << bgd;
  var dgd:int = cgd >> bgd;
  var egd:int = 98;
  var fgd:int = dgd ^ egd;
  d[34]:byte = fgd;
  var ggd:int = d[34]:ubyte;
  var hgd:int = 24;
  var igd:int = ggd << hgd;
  var jgd:int = igd >> hgd;
  var kgd:int = 39;
  var lgd:int = jgd ^ kgd;
  d[34]:byte = lgd;
  var mgd:int = d[34]:ubyte;
  var ngd:int = 24;
  var ogd:int = mgd << ngd;
  var pgd:int = ogd >> ngd;
  var qgd:int = 121;
  var rgd:int = pgd ^ qgd;
  d[34]:byte = rgd;
  var sgd:int = d[34]:ubyte;
  var tgd:int = 24;
  var ugd:int = sgd << tgd;
  var vgd:int = ugd >> tgd;
  var wgd:int = 48;
  var xgd:int = vgd ^ wgd;
  d[34]:byte = xgd;
  var ygd:int = 48;
  d[36]:byte = ygd;
  var zgd:int = d[36]:ubyte;
  var ahd:int = 24;
  var bhd:int = zgd << ahd;
  var chd:int = bhd >> ahd;
  var dhd:int = 10;
  var ehd:int = chd ^ dhd;
  d[36]:byte = ehd;
  var fhd:int = d[36]:ubyte;
  var ghd:int = 24;
  var hhd:int = fhd << ghd;
  var ihd:int = hhd >> ghd;
  var jhd:int = 90;
  var khd:int = ihd ^ jhd;
  d[36]:byte = khd;
  var lhd:int = d[36]:ubyte;
  var mhd:int = 24;
  var nhd:int = lhd << mhd;
  var ohd:int = nhd >> mhd;
  var phd:int = 6;
  var qhd:int = ohd ^ phd;
  d[36]:byte = qhd;
  var rhd:int = d[36]:ubyte;
  var shd:int = 24;
  var thd:int = rhd << shd;
  var uhd:int = thd >> shd;
  var vhd:int = 109;
  var whd:int = uhd ^ vhd;
  d[36]:byte = whd;
  var xhd:int = d[36]:ubyte;
  var yhd:int = 24;
  var zhd:int = xhd << yhd;
  var aid:int = zhd >> yhd;
  var bid:int = 32;
  var cid:int = aid ^ bid;
  d[36]:byte = cid;
  var did:int = d[36]:ubyte;
  var eid:int = 24;
  var fid:int = did << eid;
  var gid:int = fid >> eid;
  var hid:int = 29;
  var iid:int = gid ^ hid;
  d[36]:byte = iid;
  var jid:int = d[36]:ubyte;
  var kid:int = 24;
  var lid:int = jid << kid;
  var mid:int = lid >> kid;
  var nid:int = 88;
  var oid:int = mid ^ nid;
  d[36]:byte = oid;
  var pid:int = d[36]:ubyte;
  var qid:int = 24;
  var rid:int = pid << qid;
  var sid:int = rid >> qid;
  var tid:int = 26;
  var uid:int = sid ^ tid;
  d[36]:byte = uid;
  var vid:int = d[36]:ubyte;
  var wid:int = 24;
  var xid:int = vid << wid;
  var yid:int = xid >> wid;
  var zid:int = 104;
  var ajd:int = yid ^ zid;
  d[36]:byte = ajd;
  var bjd:int = d[36]:ubyte;
  var cjd:int = 24;
  var djd:int = bjd << cjd;
  var ejd:int = djd >> cjd;
  var fjd:int = 86;
  var gjd:int = ejd ^ fjd;
  d[36]:byte = gjd;
  var hjd:int = d[36]:ubyte;
  var ijd:int = 24;
  var jjd:int = hjd << ijd;
  var kjd:int = jjd >> ijd;
  var ljd:int = 14;
  var mjd:int = kjd ^ ljd;
  d[36]:byte = mjd;
  var njd:int = d[36]:ubyte;
  var ojd:int = 24;
  var pjd:int = njd << ojd;
  var qjd:int = pjd >> ojd;
  var rjd:int = 121;
  var sjd:int = qjd ^ rjd;
  d[36]:byte = sjd;
  var tjd:int = d[36]:ubyte;
  var ujd:int = 24;
  var vjd:int = tjd << ujd;
  var wjd:int = vjd >> ujd;
  var xjd:int = 76;
  var yjd:int = wjd ^ xjd;
  d[36]:byte = yjd;
  var zjd:int = d[36]:ubyte;
  var akd:int = 24;
  var bkd:int = zjd << akd;
  var ckd:int = bkd >> akd;
  var dkd:int = 63;
  var ekd:int = ckd ^ dkd;
  d[36]:byte = ekd;
  var fkd:int = d[36]:ubyte;
  var gkd:int = 24;
  var hkd:int = fkd << gkd;
  var ikd:int = hkd >> gkd;
  var jkd:int = 87;
  var kkd:int = ikd ^ jkd;
  d[36]:byte = kkd;
  var lkd:int = d[36]:ubyte;
  var mkd:int = 24;
  var nkd:int = lkd << mkd;
  var okd:int = nkd >> mkd;
  var pkd:int = 62;
  var qkd:int = okd ^ pkd;
  d[36]:byte = qkd;
  var rkd:int = d[36]:ubyte;
  var skd:int = 24;
  var tkd:int = rkd << skd;
  var ukd:int = tkd >> skd;
  var vkd:int = 63;
  var wkd:int = ukd ^ vkd;
  d[36]:byte = wkd;
  var xkd:int = d[36]:ubyte;
  var ykd:int = 24;
  var zkd:int = xkd << ykd;
  var ald:int = zkd >> ykd;
  var bld:int = 45;
  var cld:int = ald ^ bld;
  d[36]:byte = cld;
  var dld:int = d[36]:ubyte;
  var eld:int = 24;
  var fld:int = dld << eld;
  var gld:int = fld >> eld;
  var hld:int = 121;
  var ild:int = gld ^ hld;
  d[36]:byte = ild;
  var jld:int = d[36]:ubyte;
  var kld:int = 24;
  var lld:int = jld << kld;
  var mld:int = lld >> kld;
  var nld:int = 42;
  var old:int = mld ^ nld;
  d[36]:byte = old;
  var pld:int = 19;
  d[16]:byte = pld;
  var qld:int = d[16]:ubyte;
  var rld:int = 24;
  var sld:int = qld << rld;
  var tld:int = sld >> rld;
  var uld:int = 72;
  var vld:int = tld ^ uld;
  d[16]:byte = vld;
  var wld:int = d[16]:ubyte;
  var xld:int = 24;
  var yld:int = wld << xld;
  var zld:int = yld >> xld;
  var amd:int = 94;
  var bmd:int = zld ^ amd;
  d[16]:byte = bmd;
  var cmd:int = d[16]:ubyte;
  var dmd:int = 24;
  var emd:int = cmd << dmd;
  var fmd:int = emd >> dmd;
  var gmd:int = 45;
  var hmd:int = fmd ^ gmd;
  d[16]:byte = hmd;
  var imd:int = d[16]:ubyte;
  var jmd:int = 24;
  var kmd:int = imd << jmd;
  var lmd:int = kmd >> jmd;
  var mmd:int = 47;
  var nmd:int = lmd ^ mmd;
  d[16]:byte = nmd;
  var omd:int = d[16]:ubyte;
  var pmd:int = 24;
  var qmd:int = omd << pmd;
  var rmd:int = qmd >> pmd;
  var smd:int = 0;
  var tmd:int = rmd ^ smd;
  d[16]:byte = tmd;
  var umd:int = d[16]:ubyte;
  var vmd:int = 24;
  var wmd:int = umd << vmd;
  var xmd:int = wmd >> vmd;
  var ymd:int = 44;
  var zmd:int = xmd ^ ymd;
  d[16]:byte = zmd;
  var and:int = d[16]:ubyte;
  var bnd:int = 24;
  var cnd:int = and << bnd;
  var dnd:int = cnd >> bnd;
  var end:int = 10;
  var fnd:int = dnd ^ end;
  d[16]:byte = fnd;
  var gnd:int = d[16]:ubyte;
  var hnd:int = 24;
  var ind:int = gnd << hnd;
  var jnd:int = ind >> hnd;
  var knd:int = 83;
  var lnd:int = jnd ^ knd;
  d[16]:byte = lnd;
  var mnd:int = d[16]:ubyte;
  var nnd:int = 24;
  var ond:int = mnd << nnd;
  var pnd:int = ond >> nnd;
  var qnd:int = 91;
  var rnd:int = pnd ^ qnd;
  d[16]:byte = rnd;
  var snd:int = d[16]:ubyte;
  var tnd:int = 24;
  var und:int = snd << tnd;
  var vnd:int = und >> tnd;
  var wnd:int = 63;
  var xnd:int = vnd ^ wnd;
  d[16]:byte = xnd;
  var ynd:int = d[16]:ubyte;
  var znd:int = 24;
  var aod:int = ynd << znd;
  var bod:int = aod >> znd;
  var cod:int = 75;
  var dod:int = bod ^ cod;
  d[16]:byte = dod;
  var eod:int = d[16]:ubyte;
  var fod:int = 24;
  var god:int = eod << fod;
  var hod:int = god >> fod;
  var iod:int = 73;
  var jod:int = hod ^ iod;
  d[16]:byte = jod;
  var kod:int = d[16]:ubyte;
  var lod:int = 24;
  var mod:int = kod << lod;
  var nod:int = mod >> lod;
  var ood:int = 92;
  var pod:int = nod ^ ood;
  d[16]:byte = pod;
  var qod:int = d[16]:ubyte;
  var rod:int = 24;
  var sod:int = qod << rod;
  var tod:int = sod >> rod;
  var uod:int = 101;
  var vod:int = tod ^ uod;
  d[16]:byte = vod;
  var wod:int = d[16]:ubyte;
  var xod:int = 24;
  var yod:int = wod << xod;
  var zod:int = yod >> xod;
  var apd:int = 60;
  var bpd:int = zod ^ apd;
  d[16]:byte = bpd;
  var cpd:int = d[16]:ubyte;
  var dpd:int = 24;
  var epd:int = cpd << dpd;
  var fpd:int = epd >> dpd;
  var gpd:int = 68;
  var hpd:int = fpd ^ gpd;
  d[16]:byte = hpd;
  var ipd:int = d[16]:ubyte;
  var jpd:int = 24;
  var kpd:int = ipd << jpd;
  var lpd:int = kpd >> jpd;
  var mpd:int = 22;
  var npd:int = lpd ^ mpd;
  d[16]:byte = npd;
  var opd:int = d[16]:ubyte;
  var ppd:int = 24;
  var qpd:int = opd << ppd;
  var rpd:int = qpd >> ppd;
  var spd:int = 19;
  var tpd:int = rpd ^ spd;
  d[16]:byte = tpd;
  var upd:int = d[16]:ubyte;
  var vpd:int = 24;
  var wpd:int = upd << vpd;
  var xpd:int = wpd >> vpd;
  var ypd:int = 3;
  var zpd:int = xpd ^ ypd;
  d[16]:byte = zpd;
  var aqd:int = d[16]:ubyte;
  var bqd:int = 24;
  var cqd:int = aqd << bqd;
  var dqd:int = cqd >> bqd;
  var eqd:int = 63;
  var fqd:int = dqd ^ eqd;
  d[16]:byte = fqd;
  var gqd:int = 3;
  d[25]:byte = gqd;
  var hqd:int = d[25]:ubyte;
  var iqd:int = 24;
  var jqd:int = hqd << iqd;
  var kqd:int = jqd >> iqd;
  var lqd:int = 4;
  var mqd:int = kqd ^ lqd;
  d[25]:byte = mqd;
  var nqd:int = d[25]:ubyte;
  var oqd:int = 24;
  var pqd:int = nqd << oqd;
  var qqd:int = pqd >> oqd;
  var rqd:int = 119;
  var sqd:int = qqd ^ rqd;
  d[25]:byte = sqd;
  var tqd:int = d[25]:ubyte;
  var uqd:int = 24;
  var vqd:int = tqd << uqd;
  var wqd:int = vqd >> uqd;
  var xqd:int = 111;
  var yqd:int = wqd ^ xqd;
  d[25]:byte = yqd;
  var zqd:int = d[25]:ubyte;
  var ard:int = 24;
  var brd:int = zqd << ard;
  var crd:int = brd >> ard;
  var drd:int = 7;
  var erd:int = crd ^ drd;
  d[25]:byte = erd;
  var frd:int = d[25]:ubyte;
  var grd:int = 24;
  var hrd:int = frd << grd;
  var ird:int = hrd >> grd;
  var jrd:int = 112;
  var krd:int = ird ^ jrd;
  d[25]:byte = krd;
  var lrd:int = d[25]:ubyte;
  var mrd:int = 24;
  var nrd:int = lrd << mrd;
  var ord:int = nrd >> mrd;
  var prd:int = 32;
  var qrd:int = ord ^ prd;
  d[25]:byte = qrd;
  var rrd:int = d[25]:ubyte;
  var srd:int = 24;
  var trd:int = rrd << srd;
  var urd:int = trd >> srd;
  var vrd:int = 59;
  var wrd:int = urd ^ vrd;
  d[25]:byte = wrd;
  var xrd:int = d[25]:ubyte;
  var yrd:int = 24;
  var zrd:int = xrd << yrd;
  var asd:int = zrd >> yrd;
  var bsd:int = 127;
  var csd:int = asd ^ bsd;
  d[25]:byte = csd;
  var dsd:int = d[25]:ubyte;
  var esd:int = 24;
  var fsd:int = dsd << esd;
  var gsd:int = fsd >> esd;
  var hsd:int = 26;
  var isd:int = gsd ^ hsd;
  d[25]:byte = isd;
  var jsd:int = d[25]:ubyte;
  var ksd:int = 24;
  var lsd:int = jsd << ksd;
  var msd:int = lsd >> ksd;
  var nsd:int = 81;
  var osd:int = msd ^ nsd;
  d[25]:byte = osd;
  var psd:int = d[25]:ubyte;
  var qsd:int = 24;
  var rsd:int = psd << qsd;
  var ssd:int = rsd >> qsd;
  var tsd:int = 33;
  var usd:int = ssd ^ tsd;
  d[25]:byte = usd;
  var vsd:int = d[25]:ubyte;
  var wsd:int = 24;
  var xsd:int = vsd << wsd;
  var ysd:int = xsd >> wsd;
  var zsd:int = 123;
  var atd:int = ysd ^ zsd;
  d[25]:byte = atd;
  var btd:int = d[25]:ubyte;
  var ctd:int = 24;
  var dtd:int = btd << ctd;
  var etd:int = dtd >> ctd;
  var ftd:int = 12;
  var gtd:int = etd ^ ftd;
  d[25]:byte = gtd;
  var htd:int = d[25]:ubyte;
  var itd:int = 24;
  var jtd:int = htd << itd;
  var ktd:int = jtd >> itd;
  var ltd:int = 84;
  var mtd:int = ktd ^ ltd;
  d[25]:byte = mtd;
  var ntd:int = d[25]:ubyte;
  var otd:int = 24;
  var ptd:int = ntd << otd;
  var qtd:int = ptd >> otd;
  var rtd:int = 11;
  var std:int = qtd ^ rtd;
  d[25]:byte = std;
  var ttd:int = d[25]:ubyte;
  var utd:int = 24;
  var vtd:int = ttd << utd;
  var wtd:int = vtd >> utd;
  var xtd:int = 21;
  var ytd:int = wtd ^ xtd;
  d[25]:byte = ytd;
  var ztd:int = d[25]:ubyte;
  var aud:int = 24;
  var bud:int = ztd << aud;
  var cud:int = bud >> aud;
  var dud:int = 103;
  var eud:int = cud ^ dud;
  d[25]:byte = eud;
  var fud:int = d[25]:ubyte;
  var gud:int = 24;
  var hud:int = fud << gud;
  var iud:int = hud >> gud;
  var jud:int = 97;
  var kud:int = iud ^ jud;
  d[25]:byte = kud;
  var lud:int = d[25]:ubyte;
  var mud:int = 24;
  var nud:int = lud << mud;
  var oud:int = nud >> mud;
  var pud:int = 119;
  var qud:int = oud ^ pud;
  d[25]:byte = qud;
  var rud:int = d[25]:ubyte;
  var sud:int = 24;
  var tud:int = rud << sud;
  var uud:int = tud >> sud;
  var vud:int = 117;
  var wud:int = uud ^ vud;
  d[25]:byte = wud;
  var xud:int = 92;
  d[5]:byte = xud;
  var yud:int = d[5]:ubyte;
  var zud:int = 24;
  var avd:int = yud << zud;
  var bvd:int = avd >> zud;
  var cvd:int = 124;
  var dvd:int = bvd ^ cvd;
  d[5]:byte = dvd;
  var evd:int = d[5]:ubyte;
  var fvd:int = 24;
  var gvd:int = evd << fvd;
  var hvd:int = gvd >> fvd;
  var ivd:int = 112;
  var jvd:int = hvd ^ ivd;
  d[5]:byte = jvd;
  var kvd:int = d[5]:ubyte;
  var lvd:int = 24;
  var mvd:int = kvd << lvd;
  var nvd:int = mvd >> lvd;
  var ovd:int = 60;
  var pvd:int = nvd ^ ovd;
  d[5]:byte = pvd;
  var qvd:int = d[5]:ubyte;
  var rvd:int = 24;
  var svd:int = qvd << rvd;
  var tvd:int = svd >> rvd;
  var uvd:int = 120;
  var vvd:int = tvd ^ uvd;
  d[5]:byte = vvd;
  var wvd:int = d[5]:ubyte;
  var xvd:int = 24;
  var yvd:int = wvd << xvd;
  var zvd:int = yvd >> xvd;
  var awd:int = 15;
  var bwd:int = zvd ^ awd;
  d[5]:byte = bwd;
  var cwd:int = d[5]:ubyte;
  var dwd:int = 24;
  var ewd:int = cwd << dwd;
  var fwd:int = ewd >> dwd;
  var gwd:int = 115;
  var hwd:int = fwd ^ gwd;
  d[5]:byte = hwd;
  var iwd:int = d[5]:ubyte;
  var jwd:int = 24;
  var kwd:int = iwd << jwd;
  var lwd:int = kwd >> jwd;
  var mwd:int = 46;
  var nwd:int = lwd ^ mwd;
  d[5]:byte = nwd;
  var owd:int = d[5]:ubyte;
  var pwd:int = 24;
  var qwd:int = owd << pwd;
  var rwd:int = qwd >> pwd;
  var swd:int = 49;
  var twd:int = rwd ^ swd;
  d[5]:byte = twd;
  var uwd:int = d[5]:ubyte;
  var vwd:int = 24;
  var wwd:int = uwd << vwd;
  var xwd:int = wwd >> vwd;
  var ywd:int = 7;
  var zwd:int = xwd ^ ywd;
  d[5]:byte = zwd;
  var axd:int = d[5]:ubyte;
  var bxd:int = 24;
  var cxd:int = axd << bxd;
  var dxd:int = cxd >> bxd;
  var exd:int = 57;
  var fxd:int = dxd ^ exd;
  d[5]:byte = fxd;
  var gxd:int = d[5]:ubyte;
  var hxd:int = 24;
  var ixd:int = gxd << hxd;
  var jxd:int = ixd >> hxd;
  var kxd:int = 48;
  var lxd:int = jxd ^ kxd;
  d[5]:byte = lxd;
  var mxd:int = d[5]:ubyte;
  var nxd:int = 24;
  var oxd:int = mxd << nxd;
  var pxd:int = oxd >> nxd;
  var qxd:int = 102;
  var rxd:int = pxd ^ qxd;
  d[5]:byte = rxd;
  var sxd:int = d[5]:ubyte;
  var txd:int = 24;
  var uxd:int = sxd << txd;
  var vxd:int = uxd >> txd;
  var wxd:int = 81;
  var xxd:int = vxd ^ wxd;
  d[5]:byte = xxd;
  var yxd:int = d[5]:ubyte;
  var zxd:int = 24;
  var ayd:int = yxd << zxd;
  var byd:int = ayd >> zxd;
  var cyd:int = 44;
  var dyd:int = byd ^ cyd;
  d[5]:byte = dyd;
  var eyd:int = d[5]:ubyte;
  var fyd:int = 24;
  var gyd:int = eyd << fyd;
  var hyd:int = gyd >> fyd;
  var iyd:int = 105;
  var jyd:int = hyd ^ iyd;
  d[5]:byte = jyd;
  var kyd:int = d[5]:ubyte;
  var lyd:int = 24;
  var myd:int = kyd << lyd;
  var nyd:int = myd >> lyd;
  var oyd:int = 46;
  var pyd:int = nyd ^ oyd;
  d[5]:byte = pyd;
  var qyd:int = d[5]:ubyte;
  var ryd:int = 24;
  var syd:int = qyd << ryd;
  var tyd:int = syd >> ryd;
  var uyd:int = 6;
  var vyd:int = tyd ^ uyd;
  d[5]:byte = vyd;
  var wyd:int = d[5]:ubyte;
  var xyd:int = 24;
  var yyd:int = wyd << xyd;
  var zyd:int = yyd >> xyd;
  var azd:int = 79;
  var bzd:int = zyd ^ azd;
  d[5]:byte = bzd;
  var czd:int = d[5]:ubyte;
  var dzd:int = 24;
  var ezd:int = czd << dzd;
  var fzd:int = ezd >> dzd;
  var gzd:int = 126;
  var hzd:int = fzd ^ gzd;
  d[5]:byte = hzd;
  var izd:int = d[5]:ubyte;
  var jzd:int = 24;
  var kzd:int = izd << jzd;
  var lzd:int = kzd >> jzd;
  var mzd:int = 84;
  var nzd:int = lzd ^ mzd;
  d[5]:byte = nzd;
  var ozd:int = 56;
  d[7]:byte = ozd;
  var pzd:int = d[7]:ubyte;
  var qzd:int = 24;
  var rzd:int = pzd << qzd;
  var szd:int = rzd >> qzd;
  var tzd:int = 76;
  var uzd:int = szd ^ tzd;
  d[7]:byte = uzd;
  var vzd:int = d[7]:ubyte;
  var wzd:int = 24;
  var xzd:int = vzd << wzd;
  var yzd:int = xzd >> wzd;
  var zzd:int = 109;
  var aae:int = yzd ^ zzd;
  d[7]:byte = aae;
  var bae:int = d[7]:ubyte;
  var cae:int = 24;
  var dae:int = bae << cae;
  var eae:int = dae >> cae;
  var fae:int = 113;
  var gae:int = eae ^ fae;
  d[7]:byte = gae;
  var hae:int = d[7]:ubyte;
  var iae:int = 24;
  var jae:int = hae << iae;
  var kae:int = jae >> iae;
  var lae:int = 25;
  var mae:int = kae ^ lae;
  d[7]:byte = mae;
  var nae:int = d[7]:ubyte;
  var oae:int = 24;
  var pae:int = nae << oae;
  var qae:int = pae >> oae;
  var rae:int = 47;
  var sae:int = qae ^ rae;
  d[7]:byte = sae;
  var tae:int = d[7]:ubyte;
  var uae:int = 24;
  var vae:int = tae << uae;
  var wae:int = vae >> uae;
  var xae:int = 40;
  var yae:int = wae ^ xae;
  d[7]:byte = yae;
  var zae:int = d[7]:ubyte;
  var abe:int = 24;
  var bbe:int = zae << abe;
  var cbe:int = bbe >> abe;
  var dbe:int = 42;
  var ebe:int = cbe ^ dbe;
  d[7]:byte = ebe;
  var fbe:int = d[7]:ubyte;
  var gbe:int = 24;
  var hbe:int = fbe << gbe;
  var ibe:int = hbe >> gbe;
  var jbe:int = 97;
  var kbe:int = ibe ^ jbe;
  d[7]:byte = kbe;
  var lbe:int = d[7]:ubyte;
  var mbe:int = 24;
  var nbe:int = lbe << mbe;
  var obe:int = nbe >> mbe;
  var pbe:int = 91;
  var qbe:int = obe ^ pbe;
  d[7]:byte = qbe;
  var rbe:int = d[7]:ubyte;
  var sbe:int = 24;
  var tbe:int = rbe << sbe;
  var ube:int = tbe >> sbe;
  var vbe:int = 37;
  var wbe:int = ube ^ vbe;
  d[7]:byte = wbe;
  var xbe:int = d[7]:ubyte;
  var ybe:int = 24;
  var zbe:int = xbe << ybe;
  var ace:int = zbe >> ybe;
  var bce:int = 79;
  var cce:int = ace ^ bce;
  d[7]:byte = cce;
  var dce:int = d[7]:ubyte;
  var ece:int = 24;
  var fce:int = dce << ece;
  var gce:int = fce >> ece;
  var hce:int = 101;
  var ice:int = gce ^ hce;
  d[7]:byte = ice;
  var jce:int = d[7]:ubyte;
  var kce:int = 24;
  var lce:int = jce << kce;
  var mce:int = lce >> kce;
  var nce:int = 109;
  var oce:int = mce ^ nce;
  d[7]:byte = oce;
  var pce:int = d[7]:ubyte;
  var qce:int = 24;
  var rce:int = pce << qce;
  var sce:int = rce >> qce;
  var tce:int = 19;
  var uce:int = sce ^ tce;
  d[7]:byte = uce;
  var vce:int = d[7]:ubyte;
  var wce:int = 24;
  var xce:int = vce << wce;
  var yce:int = xce >> wce;
  var zce:int = 82;
  var ade:int = yce ^ zce;
  d[7]:byte = ade;
  var bde:int = d[7]:ubyte;
  var cde:int = 24;
  var dde:int = bde << cde;
  var ede:int = dde >> cde;
  var fde:int = 28;
  var gde:int = ede ^ fde;
  d[7]:byte = gde;
  var hde:int = d[7]:ubyte;
  var ide:int = 24;
  var jde:int = hde << ide;
  var kde:int = jde >> ide;
  var lde:int = 58;
  var mde:int = kde ^ lde;
  d[7]:byte = mde;
  var nde:int = d[7]:ubyte;
  var ode:int = 24;
  var pde:int = nde << ode;
  var qde:int = pde >> ode;
  var rde:int = 96;
  var sde:int = qde ^ rde;
  d[7]:byte = sde;
  var tde:int = d[7]:ubyte;
  var ude:int = 24;
  var vde:int = tde << ude;
  var wde:int = vde >> ude;
  var xde:int = 51;
  var yde:int = wde ^ xde;
  d[7]:byte = yde;
  var zde:int = d[7]:ubyte;
  var aee:int = 24;
  var bee:int = zde << aee;
  var cee:int = bee >> aee;
  var dee:int = 68;
  var eee:int = cee ^ dee;
  d[7]:byte = eee;
  var fee:int = 75;
  d[27]:byte = fee;
  var gee:int = d[27]:ubyte;
  var hee:int = 24;
  var iee:int = gee << hee;
  var jee:int = iee >> hee;
  var kee:int = 112;
  var lee:int = jee ^ kee;
  d[27]:byte = lee;
  var mee:int = d[27]:ubyte;
  var nee:int = 24;
  var oee:int = mee << nee;
  var pee:int = oee >> nee;
  var qee:int = 84;
  var ree:int = pee ^ qee;
  d[27]:byte = ree;
  var see:int = d[27]:ubyte;
  var tee:int = 24;
  var uee:int = see << tee;
  var vee:int = uee >> tee;
  var wee:int = 127;
  var xee:int = vee ^ wee;
  d[27]:byte = xee;
  var yee:int = d[27]:ubyte;
  var zee:int = 24;
  var afe:int = yee << zee;
  var bfe:int = afe >> zee;
  var cfe:int = 32;
  var dfe:int = bfe ^ cfe;
  d[27]:byte = dfe;
  var efe:int = d[27]:ubyte;
  var ffe:int = 24;
  var gfe:int = efe << ffe;
  var hfe:int = gfe >> ffe;
  var ife:int = 108;
  var jfe:int = hfe ^ ife;
  d[27]:byte = jfe;
  var kfe:int = d[27]:ubyte;
  var lfe:int = 24;
  var mfe:int = kfe << lfe;
  var nfe:int = mfe >> lfe;
  var ofe:int = 7;
  var pfe:int = nfe ^ ofe;
  d[27]:byte = pfe;
  var qfe:int = d[27]:ubyte;
  var rfe:int = 24;
  var sfe:int = qfe << rfe;
  var tfe:int = sfe >> rfe;
  var ufe:int = 126;
  var vfe:int = tfe ^ ufe;
  d[27]:byte = vfe;
  var wfe:int = d[27]:ubyte;
  var xfe:int = 24;
  var yfe:int = wfe << xfe;
  var zfe:int = yfe >> xfe;
  var age:int = 102;
  var bge:int = zfe ^ age;
  d[27]:byte = bge;
  var cge:int = d[27]:ubyte;
  var dge:int = 24;
  var ege:int = cge << dge;
  var fge:int = ege >> dge;
  var gge:int = 35;
  var hge:int = fge ^ gge;
  d[27]:byte = hge;
  var ige:int = d[27]:ubyte;
  var jge:int = 24;
  var kge:int = ige << jge;
  var lge:int = kge >> jge;
  var mge:int = 120;
  var nge:int = lge ^ mge;
  d[27]:byte = nge;
  var oge:int = d[27]:ubyte;
  var pge:int = 24;
  var qge:int = oge << pge;
  var rge:int = qge >> pge;
  var sge:int = 25;
  var tge:int = rge ^ sge;
  d[27]:byte = tge;
  var uge:int = d[27]:ubyte;
  var vge:int = 24;
  var wge:int = uge << vge;
  var xge:int = wge >> vge;
  var yge:int = 71;
  var zge:int = xge ^ yge;
  d[27]:byte = zge;
  var ahe:int = d[27]:ubyte;
  var bhe:int = 24;
  var che:int = ahe << bhe;
  var dhe:int = che >> bhe;
  var ehe:int = 94;
  var fhe:int = dhe ^ ehe;
  d[27]:byte = fhe;
  var ghe:int = d[27]:ubyte;
  var hhe:int = 24;
  var ihe:int = ghe << hhe;
  var jhe:int = ihe >> hhe;
  var khe:int = 79;
  var lhe:int = jhe ^ khe;
  d[27]:byte = lhe;
  var mhe:int = d[27]:ubyte;
  var nhe:int = 24;
  var ohe:int = mhe << nhe;
  var phe:int = ohe >> nhe;
  var qhe:int = 115;
  var rhe:int = phe ^ qhe;
  d[27]:byte = rhe;
  var she:int = d[27]:ubyte;
  var the:int = 24;
  var uhe:int = she << the;
  var vhe:int = uhe >> the;
  var whe:int = 120;
  var xhe:int = vhe ^ whe;
  d[27]:byte = xhe;
  var yhe:int = d[27]:ubyte;
  var zhe:int = 24;
  var aie:int = yhe << zhe;
  var bie:int = aie >> zhe;
  var cie:int = 38;
  var die:int = bie ^ cie;
  d[27]:byte = die;
  var eie:int = d[27]:ubyte;
  var fie:int = 24;
  var gie:int = eie << fie;
  var hie:int = gie >> fie;
  var iie:int = 123;
  var jie:int = hie ^ iie;
  d[27]:byte = jie;
  var kie:int = d[27]:ubyte;
  var lie:int = 24;
  var mie:int = kie << lie;
  var nie:int = mie >> lie;
  var oie:int = 99;
  var pie:int = nie ^ oie;
  d[27]:byte = pie;
  var qie:int = d[27]:ubyte;
  var rie:int = 24;
  var sie:int = qie << rie;
  var tie:int = sie >> rie;
  var uie:int = 10;
  var vie:int = tie ^ uie;
  d[27]:byte = vie;
  var wie:int = 25;
  d[10]:byte = wie;
  var xie:int = d[10]:ubyte;
  var yie:int = 24;
  var zie:int = xie << yie;
  var aje:int = zie >> yie;
  var bje:int = 38;
  var cje:int = aje ^ bje;
  d[10]:byte = cje;
  var dje:int = d[10]:ubyte;
  var eje:int = 24;
  var fje:int = dje << eje;
  var gje:int = fje >> eje;
  var hje:int = 33;
  var ije:int = gje ^ hje;
  d[10]:byte = ije;
  var jje:int = d[10]:ubyte;
  var kje:int = 24;
  var lje:int = jje << kje;
  var mje:int = lje >> kje;
  var nje:int = 43;
  var oje:int = mje ^ nje;
  d[10]:byte = oje;
  var pje:int = d[10]:ubyte;
  var qje:int = 24;
  var rje:int = pje << qje;
  var sje:int = rje >> qje;
  var tje:int = 92;
  var uje:int = sje ^ tje;
  d[10]:byte = uje;
  var vje:int = d[10]:ubyte;
  var wje:int = 24;
  var xje:int = vje << wje;
  var yje:int = xje >> wje;
  var zje:int = 17;
  var ake:int = yje ^ zje;
  d[10]:byte = ake;
  var bke:int = d[10]:ubyte;
  var cke:int = 24;
  var dke:int = bke << cke;
  var eke:int = dke >> cke;
  var fke:int = 79;
  var gke:int = eke ^ fke;
  d[10]:byte = gke;
  var hke:int = d[10]:ubyte;
  var ike:int = 24;
  var jke:int = hke << ike;
  var kke:int = jke >> ike;
  var lke:int = 21;
  var mke:int = kke ^ lke;
  d[10]:byte = mke;
  var nke:int = d[10]:ubyte;
  var oke:int = 24;
  var pke:int = nke << oke;
  var qke:int = pke >> oke;
  var rke:int = 81;
  var ske:int = qke ^ rke;
  d[10]:byte = ske;
  var tke:int = d[10]:ubyte;
  var uke:int = 24;
  var vke:int = tke << uke;
  var wke:int = vke >> uke;
  var xke:int = 88;
  var yke:int = wke ^ xke;
  d[10]:byte = yke;
  var zke:int = d[10]:ubyte;
  var ale:int = 24;
  var ble:int = zke << ale;
  var cle:int = ble >> ale;
  var dle:int = 27;
  var ele:int = cle ^ dle;
  d[10]:byte = ele;
  var fle:int = d[10]:ubyte;
  var gle:int = 24;
  var hle:int = fle << gle;
  var ile:int = hle >> gle;
  var jle:int = 34;
  var kle:int = ile ^ jle;
  d[10]:byte = kle;
  var lle:int = d[10]:ubyte;
  var mle:int = 24;
  var nle:int = lle << mle;
  var ole:int = nle >> mle;
  var ple:int = 31;
  var qle:int = ole ^ ple;
  d[10]:byte = qle;
  var rle:int = d[10]:ubyte;
  var sle:int = 24;
  var tle:int = rle << sle;
  var ule:int = tle >> sle;
  var vle:int = 15;
  var wle:int = ule ^ vle;
  d[10]:byte = wle;
  var xle:int = d[10]:ubyte;
  var yle:int = 24;
  var zle:int = xle << yle;
  var ame:int = zle >> yle;
  var bme:int = 3;
  var cme:int = ame ^ bme;
  d[10]:byte = cme;
  var dme:int = d[10]:ubyte;
  var eme:int = 24;
  var fme:int = dme << eme;
  var gme:int = fme >> eme;
  var hme:int = 61;
  var ime:int = gme ^ hme;
  d[10]:byte = ime;
  var jme:int = d[10]:ubyte;
  var kme:int = 24;
  var lme:int = jme << kme;
  var mme:int = lme >> kme;
  var nme:int = 29;
  var ome:int = mme ^ nme;
  d[10]:byte = ome;
  var pme:int = d[10]:ubyte;
  var qme:int = 24;
  var rme:int = pme << qme;
  var sme:int = rme >> qme;
  var tme:int = 72;
  var ume:int = sme ^ tme;
  d[10]:byte = ume;
  var vme:int = d[10]:ubyte;
  var wme:int = 24;
  var xme:int = vme << wme;
  var yme:int = xme >> wme;
  var zme:int = 9;
  var ane:int = yme ^ zme;
  d[10]:byte = ane;
  var bne:int = d[10]:ubyte;
  var cne:int = 24;
  var dne:int = bne << cne;
  var ene:int = dne >> cne;
  var fne:int = 107;
  var gne:int = ene ^ fne;
  d[10]:byte = gne;
  var hne:int = d[10]:ubyte;
  var ine:int = 24;
  var jne:int = hne << ine;
  var kne:int = jne >> ine;
  var lne:int = 63;
  var mne:int = kne ^ lne;
  d[10]:byte = mne;
  var nne:int = 69;
  d[50]:byte = nne;
  var one:int = d[50]:ubyte;
  var pne:int = 24;
  var qne:int = one << pne;
  var rne:int = qne >> pne;
  var sne:int = 39;
  var tne:int = rne ^ sne;
  d[50]:byte = tne;
  var une:int = d[50]:ubyte;
  var vne:int = 24;
  var wne:int = une << vne;
  var xne:int = wne >> vne;
  var yne:int = 0;
  var zne:int = xne ^ yne;
  d[50]:byte = zne;
  var aoe:int = d[50]:ubyte;
  var boe:int = 24;
  var coe:int = aoe << boe;
  var doe:int = coe >> boe;
  var eoe:int = 127;
  var foe:int = doe ^ eoe;
  d[50]:byte = foe;
  var goe:int = d[50]:ubyte;
  var hoe:int = 24;
  var ioe:int = goe << hoe;
  var joe:int = ioe >> hoe;
  var koe:int = 74;
  var loe:int = joe ^ koe;
  d[50]:byte = loe;
  var moe:int = d[50]:ubyte;
  var noe:int = 24;
  var ooe:int = moe << noe;
  var poe:int = ooe >> noe;
  var qoe:int = 84;
  var roe:int = poe ^ qoe;
  d[50]:byte = roe;
  var soe:int = d[50]:ubyte;
  var toe:int = 24;
  var uoe:int = soe << toe;
  var voe:int = uoe >> toe;
  var woe:int = 28;
  var xoe:int = voe ^ woe;
  d[50]:byte = xoe;
  var yoe:int = d[50]:ubyte;
  var zoe:int = 24;
  var ape:int = yoe << zoe;
  var bpe:int = ape >> zoe;
  var cpe:int = 57;
  var dpe:int = bpe ^ cpe;
  d[50]:byte = dpe;
  var epe:int = d[50]:ubyte;
  var fpe:int = 24;
  var gpe:int = epe << fpe;
  var hpe:int = gpe >> fpe;
  var ipe:int = 54;
  var jpe:int = hpe ^ ipe;
  d[50]:byte = jpe;
  var kpe:int = d[50]:ubyte;
  var lpe:int = 24;
  var mpe:int = kpe << lpe;
  var npe:int = mpe >> lpe;
  var ope:int = 92;
  var ppe:int = npe ^ ope;
  d[50]:byte = ppe;
  var qpe:int = d[50]:ubyte;
  var rpe:int = 24;
  var spe:int = qpe << rpe;
  var tpe:int = spe >> rpe;
  var upe:int = 14;
  var vpe:int = tpe ^ upe;
  d[50]:byte = vpe;
  var wpe:int = d[50]:ubyte;
  var xpe:int = 24;
  var ype:int = wpe << xpe;
  var zpe:int = ype >> xpe;
  var aqe:int = 116;
  var bqe:int = zpe ^ aqe;
  d[50]:byte = bqe;
  var cqe:int = d[50]:ubyte;
  var dqe:int = 24;
  var eqe:int = cqe << dqe;
  var fqe:int = eqe >> dqe;
  var gqe:int = 46;
  var hqe:int = fqe ^ gqe;
  d[50]:byte = hqe;
  var iqe:int = d[50]:ubyte;
  var jqe:int = 24;
  var kqe:int = iqe << jqe;
  var lqe:int = kqe >> jqe;
  var mqe:int = 104;
  var nqe:int = lqe ^ mqe;
  d[50]:byte = nqe;
  var oqe:int = d[50]:ubyte;
  var pqe:int = 24;
  var qqe:int = oqe << pqe;
  var rqe:int = qqe >> pqe;
  var sqe:int = 34;
  var tqe:int = rqe ^ sqe;
  d[50]:byte = tqe;
  var uqe:int = d[50]:ubyte;
  var vqe:int = 24;
  var wqe:int = uqe << vqe;
  var xqe:int = wqe >> vqe;
  var yqe:int = 119;
  var zqe:int = xqe ^ yqe;
  d[50]:byte = zqe;
  var are:int = d[50]:ubyte;
  var bre:int = 24;
  var cre:int = are << bre;
  var dre:int = cre >> bre;
  var ere:int = 87;
  var fre:int = dre ^ ere;
  d[50]:byte = fre;
  var gre:int = d[50]:ubyte;
  var hre:int = 24;
  var ire:int = gre << hre;
  var jre:int = ire >> hre;
  var kre:int = 12;
  var lre:int = jre ^ kre;
  d[50]:byte = lre;
  var mre:int = d[50]:ubyte;
  var nre:int = 24;
  var ore:int = mre << nre;
  var pre:int = ore >> nre;
  var qre:int = 6;
  var rre:int = pre ^ qre;
  d[50]:byte = rre;
  var sre:int = d[50]:ubyte;
  var tre:int = 24;
  var ure:int = sre << tre;
  var vre:int = ure >> tre;
  var wre:int = 12;
  var xre:int = vre ^ wre;
  d[50]:byte = xre;
  var yre:int = d[50]:ubyte;
  var zre:int = 24;
  var ase:int = yre << zre;
  var bse:int = ase >> zre;
  var cse:int = 7;
  var dse:int = bse ^ cse;
  d[50]:byte = dse;
  var ese:int = 9;
  d[31]:byte = ese;
  var fse:int = d[31]:ubyte;
  var gse:int = 24;
  var hse:int = fse << gse;
  var ise:int = hse >> gse;
  var jse:int = 36;
  var kse:int = ise ^ jse;
  d[31]:byte = kse;
  var lse:int = d[31]:ubyte;
  var mse:int = 24;
  var nse:int = lse << mse;
  var ose:int = nse >> mse;
  var pse:int = 78;
  var qse:int = ose ^ pse;
  d[31]:byte = qse;
  var rse:int = d[31]:ubyte;
  var sse:int = 24;
  var tse:int = rse << sse;
  var use:int = tse >> sse;
  var vse:int = 68;
  var wse:int = use ^ vse;
  d[31]:byte = wse;
  var xse:int = d[31]:ubyte;
  var yse:int = 24;
  var zse:int = xse << yse;
  var ate:int = zse >> yse;
  var bte:int = 122;
  var cte:int = ate ^ bte;
  d[31]:byte = cte;
  var dte:int = d[31]:ubyte;
  var ete:int = 24;
  var fte:int = dte << ete;
  var gte:int = fte >> ete;
  var hte:int = 54;
  var ite:int = gte ^ hte;
  d[31]:byte = ite;
  var jte:int = d[31]:ubyte;
  var kte:int = 24;
  var lte:int = jte << kte;
  var mte:int = lte >> kte;
  var nte:int = 63;
  var ote:int = mte ^ nte;
  d[31]:byte = ote;
  var pte:int = d[31]:ubyte;
  var qte:int = 24;
  var rte:int = pte << qte;
  var ste:int = rte >> qte;
  var tte:int = 53;
  var ute:int = ste ^ tte;
  d[31]:byte = ute;
  var vte:int = d[31]:ubyte;
  var wte:int = 24;
  var xte:int = vte << wte;
  var yte:int = xte >> wte;
  var zte:int = 111;
  var aue:int = yte ^ zte;
  d[31]:byte = aue;
  var bue:int = d[31]:ubyte;
  var cue:int = 24;
  var due:int = bue << cue;
  var eue:int = due >> cue;
  var fue:int = 98;
  var gue:int = eue ^ fue;
  d[31]:byte = gue;
  var hue:int = d[31]:ubyte;
  var iue:int = 24;
  var jue:int = hue << iue;
  var kue:int = jue >> iue;
  var lue:int = 58;
  var mue:int = kue ^ lue;
  d[31]:byte = mue;
  var nue:int = d[31]:ubyte;
  var oue:int = 24;
  var pue:int = nue << oue;
  var que:int = pue >> oue;
  var rue:int = 9;
  var sue:int = que ^ rue;
  d[31]:byte = sue;
  var tue:int = d[31]:ubyte;
  var uue:int = 24;
  var vue:int = tue << uue;
  var wue:int = vue >> uue;
  var xue:int = 3;
  var yue:int = wue ^ xue;
  d[31]:byte = yue;
  var zue:int = d[31]:ubyte;
  var ave:int = 24;
  var bve:int = zue << ave;
  var cve:int = bve >> ave;
  var dve:int = 118;
  var eve:int = cve ^ dve;
  d[31]:byte = eve;
  var fve:int = d[31]:ubyte;
  var gve:int = 24;
  var hve:int = fve << gve;
  var ive:int = hve >> gve;
  var jve:int = 70;
  var kve:int = ive ^ jve;
  d[31]:byte = kve;
  var lve:int = d[31]:ubyte;
  var mve:int = 24;
  var nve:int = lve << mve;
  var ove:int = nve >> mve;
  var pve:int = 99;
  var qve:int = ove ^ pve;
  d[31]:byte = qve;
  var rve:int = d[31]:ubyte;
  var sve:int = 24;
  var tve:int = rve << sve;
  var uve:int = tve >> sve;
  var vve:int = 25;
  var wve:int = uve ^ vve;
  d[31]:byte = wve;
  var xve:int = d[31]:ubyte;
  var yve:int = 24;
  var zve:int = xve << yve;
  var awe:int = zve >> yve;
  var bwe:int = 122;
  var cwe:int = awe ^ bwe;
  d[31]:byte = cwe;
  var dwe:int = d[31]:ubyte;
  var ewe:int = 24;
  var fwe:int = dwe << ewe;
  var gwe:int = fwe >> ewe;
  var hwe:int = 14;
  var iwe:int = gwe ^ hwe;
  d[31]:byte = iwe;
  var jwe:int = d[31]:ubyte;
  var kwe:int = 24;
  var lwe:int = jwe << kwe;
  var mwe:int = lwe >> kwe;
  var nwe:int = 98;
  var owe:int = mwe ^ nwe;
  d[31]:byte = owe;
  var pwe:int = d[31]:ubyte;
  var qwe:int = 24;
  var rwe:int = pwe << qwe;
  var swe:int = rwe >> qwe;
  var twe:int = 52;
  var uwe:int = swe ^ twe;
  d[31]:byte = uwe;
  var vwe:int = 12;
  d[17]:byte = vwe;
  var wwe:int = d[17]:ubyte;
  var xwe:int = 24;
  var ywe:int = wwe << xwe;
  var zwe:int = ywe >> xwe;
  var axe:int = 91;
  var bxe:int = zwe ^ axe;
  d[17]:byte = bxe;
  var cxe:int = d[17]:ubyte;
  var dxe:int = 24;
  var exe:int = cxe << dxe;
  var fxe:int = exe >> dxe;
  var gxe:int = 20;
  var hxe:int = fxe ^ gxe;
  d[17]:byte = hxe;
  var ixe:int = d[17]:ubyte;
  var jxe:int = 24;
  var kxe:int = ixe << jxe;
  var lxe:int = kxe >> jxe;
  var mxe:int = 95;
  var nxe:int = lxe ^ mxe;
  d[17]:byte = nxe;
  var oxe:int = d[17]:ubyte;
  var pxe:int = 24;
  var qxe:int = oxe << pxe;
  var rxe:int = qxe >> pxe;
  var sxe:int = 110;
  var txe:int = rxe ^ sxe;
  d[17]:byte = txe;
  var uxe:int = d[17]:ubyte;
  var vxe:int = 24;
  var wxe:int = uxe << vxe;
  var xxe:int = wxe >> vxe;
  var yxe:int = 27;
  var zxe:int = xxe ^ yxe;
  d[17]:byte = zxe;
  var aye:int = d[17]:ubyte;
  var bye:int = 24;
  var cye:int = aye << bye;
  var dye:int = cye >> bye;
  var eye:int = 91;
  var fye:int = dye ^ eye;
  d[17]:byte = fye;
  var gye:int = d[17]:ubyte;
  var hye:int = 24;
  var iye:int = gye << hye;
  var jye:int = iye >> hye;
  var kye:int = 24;
  var lye:int = jye ^ kye;
  d[17]:byte = lye;
  var mye:int = d[17]:ubyte;
  var nye:int = 24;
  var oye:int = mye << nye;
  var pye:int = oye >> nye;
  var qye:int = 2;
  var rye:int = pye ^ qye;
  d[17]:byte = rye;
  var sye:int = d[17]:ubyte;
  var tye:int = 24;
  var uye:int = sye << tye;
  var vye:int = uye >> tye;
  var wye:int = 53;
  var xye:int = vye ^ wye;
  d[17]:byte = xye;
  var yye:int = d[17]:ubyte;
  var zye:int = 24;
  var aze:int = yye << zye;
  var bze:int = aze >> zye;
  var cze:int = 121;
  var dze:int = bze ^ cze;
  d[17]:byte = dze;
  var eze:int = d[17]:ubyte;
  var fze:int = 24;
  var gze:int = eze << fze;
  var hze:int = gze >> fze;
  var ize:int = 118;
  var jze:int = hze ^ ize;
  d[17]:byte = jze;
  var kze:int = d[17]:ubyte;
  var lze:int = 24;
  var mze:int = kze << lze;
  var nze:int = mze >> lze;
  var oze:int = 53;
  var pze:int = nze ^ oze;
  d[17]:byte = pze;
  var qze:int = d[17]:ubyte;
  var rze:int = 24;
  var sze:int = qze << rze;
  var tze:int = sze >> rze;
  var uze:int = 82;
  var vze:int = tze ^ uze;
  d[17]:byte = vze;
  var wze:int = d[17]:ubyte;
  var xze:int = 24;
  var yze:int = wze << xze;
  var zze:int = yze >> xze;
  var aaf:int = 122;
  var baf:int = zze ^ aaf;
  d[17]:byte = baf;
  var caf:int = d[17]:ubyte;
  var daf:int = 24;
  var eaf:int = caf << daf;
  var faf:int = eaf >> daf;
  var gaf:int = 58;
  var haf:int = faf ^ gaf;
  d[17]:byte = haf;
  var iaf:int = d[17]:ubyte;
  var jaf:int = 24;
  var kaf:int = iaf << jaf;
  var laf:int = kaf >> jaf;
  var maf:int = 57;
  var naf:int = laf ^ maf;
  d[17]:byte = naf;
  var oaf:int = d[17]:ubyte;
  var paf:int = 24;
  var qaf:int = oaf << paf;
  var raf:int = qaf >> paf;
  var saf:int = 118;
  var taf:int = raf ^ saf;
  d[17]:byte = taf;
  var uaf:int = d[17]:ubyte;
  var vaf:int = 24;
  var waf:int = uaf << vaf;
  var xaf:int = waf >> vaf;
  var yaf:int = 92;
  var zaf:int = xaf ^ yaf;
  d[17]:byte = zaf;
  var abf:int = d[17]:ubyte;
  var bbf:int = 24;
  var cbf:int = abf << bbf;
  var dbf:int = cbf >> bbf;
  var ebf:int = 85;
  var fbf:int = dbf ^ ebf;
  d[17]:byte = fbf;
  var gbf:int = d[17]:ubyte;
  var hbf:int = 24;
  var ibf:int = gbf << hbf;
  var jbf:int = ibf >> hbf;
  var kbf:int = 66;
  var lbf:int = jbf ^ kbf;
  d[17]:byte = lbf;
  var mbf:int = 110;
  d[40]:byte = mbf;
  var nbf:int = d[40]:ubyte;
  var obf:int = 24;
  var pbf:int = nbf << obf;
  var qbf:int = pbf >> obf;
  var rbf:int = 110;
  var sbf:int = qbf ^ rbf;
  d[40]:byte = sbf;
  var tbf:int = d[40]:ubyte;
  var ubf:int = 24;
  var vbf:int = tbf << ubf;
  var wbf:int = vbf >> ubf;
  var xbf:int = 101;
  var ybf:int = wbf ^ xbf;
  d[40]:byte = ybf;
  var zbf:int = d[40]:ubyte;
  var acf:int = 24;
  var bcf:int = zbf << acf;
  var ccf:int = bcf >> acf;
  var dcf:int = 97;
  var ecf:int = ccf ^ dcf;
  d[40]:byte = ecf;
  var fcf:int = d[40]:ubyte;
  var gcf:int = 24;
  var hcf:int = fcf << gcf;
  var icf:int = hcf >> gcf;
  var jcf:int = 21;
  var kcf:int = icf ^ jcf;
  d[40]:byte = kcf;
  var lcf:int = d[40]:ubyte;
  var mcf:int = 24;
  var ncf:int = lcf << mcf;
  var ocf:int = ncf >> mcf;
  var pcf:int = 96;
  var qcf:int = ocf ^ pcf;
  d[40]:byte = qcf;
  var rcf:int = d[40]:ubyte;
  var scf:int = 24;
  var tcf:int = rcf << scf;
  var ucf:int = tcf >> scf;
  var vcf:int = 0;
  var wcf:int = ucf ^ vcf;
  d[40]:byte = wcf;
  var xcf:int = d[40]:ubyte;
  var ycf:int = 24;
  var zcf:int = xcf << ycf;
  var adf:int = zcf >> ycf;
  var bdf:int = 110;
  var cdf:int = adf ^ bdf;
  d[40]:byte = cdf;
  var ddf:int = d[40]:ubyte;
  var edf:int = 24;
  var fdf:int = ddf << edf;
  var gdf:int = fdf >> edf;
  var hdf:int = 48;
  var idf:int = gdf ^ hdf;
  d[40]:byte = idf;
  var jdf:int = d[40]:ubyte;
  var kdf:int = 24;
  var ldf:int = jdf << kdf;
  var mdf:int = ldf >> kdf;
  var ndf:int = 33;
  var odf:int = mdf ^ ndf;
  d[40]:byte = odf;
  var pdf:int = d[40]:ubyte;
  var qdf:int = 24;
  var rdf:int = pdf << qdf;
  var sdf:int = rdf >> qdf;
  var tdf:int = 86;
  var udf:int = sdf ^ tdf;
  d[40]:byte = udf;
  var vdf:int = d[40]:ubyte;
  var wdf:int = 24;
  var xdf:int = vdf << wdf;
  var ydf:int = xdf >> wdf;
  var zdf:int = 35;
  var aef:int = ydf ^ zdf;
  d[40]:byte = aef;
  var bef:int = d[40]:ubyte;
  var cef:int = 24;
  var def:int = bef << cef;
  var eef:int = def >> cef;
  var fef:int = 49;
  var gef:int = eef ^ fef;
  d[40]:byte = gef;
  var hef:int = d[40]:ubyte;
  var ief:int = 24;
  var jef:int = hef << ief;
  var kef:int = jef >> ief;
  var lef:int = 84;
  var mef:int = kef ^ lef;
  d[40]:byte = mef;
  var nef:int = d[40]:ubyte;
  var oef:int = 24;
  var pef:int = nef << oef;
  var qef:int = pef >> oef;
  var ref:int = 86;
  var sef:int = qef ^ ref;
  d[40]:byte = sef;
  var tef:int = d[40]:ubyte;
  var uef:int = 24;
  var vef:int = tef << uef;
  var wef:int = vef >> uef;
  var xef:int = 113;
  var yef:int = wef ^ xef;
  d[40]:byte = yef;
  var zef:int = d[40]:ubyte;
  var aff:int = 24;
  var bff:int = zef << aff;
  var cff:int = bff >> aff;
  var dff:int = 51;
  var eff:int = cff ^ dff;
  d[40]:byte = eff;
  var fff:int = d[40]:ubyte;
  var gff:int = 24;
  var hff:int = fff << gff;
  var iff:int = hff >> gff;
  var jff:int = 12;
  var kff:int = iff ^ jff;
  d[40]:byte = kff;
  var lff:int = d[40]:ubyte;
  var mff:int = 24;
  var nff:int = lff << mff;
  var off:int = nff >> mff;
  var pff:int = 52;
  var qff:int = off ^ pff;
  d[40]:byte = qff;
  var rff:int = d[40]:ubyte;
  var sff:int = 24;
  var tff:int = rff << sff;
  var uff:int = tff >> sff;
  var vff:int = 4;
  var wff:int = uff ^ vff;
  d[40]:byte = wff;
  var xff:int = d[40]:ubyte;
  var yff:int = 24;
  var zff:int = xff << yff;
  var agf:int = zff >> yff;
  var bgf:int = 105;
  var cgf:int = agf ^ bgf;
  d[40]:byte = cgf;
  var dgf:int = 55;
  d[44]:byte = dgf;
  var egf:int = d[44]:ubyte;
  var fgf:int = 24;
  var ggf:int = egf << fgf;
  var hgf:int = ggf >> fgf;
  var igf:int = 113;
  var jgf:int = hgf ^ igf;
  d[44]:byte = jgf;
  var kgf:int = d[44]:ubyte;
  var lgf:int = 24;
  var mgf:int = kgf << lgf;
  var ngf:int = mgf >> lgf;
  var ogf:int = 64;
  var pgf:int = ngf ^ ogf;
  d[44]:byte = pgf;
  var qgf:int = d[44]:ubyte;
  var rgf:int = 24;
  var sgf:int = qgf << rgf;
  var tgf:int = sgf >> rgf;
  var ugf:int = 103;
  var vgf:int = tgf ^ ugf;
  d[44]:byte = vgf;
  var wgf:int = d[44]:ubyte;
  var xgf:int = 24;
  var ygf:int = wgf << xgf;
  var zgf:int = ygf >> xgf;
  var ahf:int = 69;
  var bhf:int = zgf ^ ahf;
  d[44]:byte = bhf;
  var chf:int = d[44]:ubyte;
  var dhf:int = 24;
  var ehf:int = chf << dhf;
  var fhf:int = ehf >> dhf;
  var ghf:int = 112;
  var hhf:int = fhf ^ ghf;
  d[44]:byte = hhf;
  var ihf:int = d[44]:ubyte;
  var jhf:int = 24;
  var khf:int = ihf << jhf;
  var lhf:int = khf >> jhf;
  var mhf:int = 51;
  var nhf:int = lhf ^ mhf;
  d[44]:byte = nhf;
  var ohf:int = d[44]:ubyte;
  var phf:int = 24;
  var qhf:int = ohf << phf;
  var rhf:int = qhf >> phf;
  var shf:int = 103;
  var thf:int = rhf ^ shf;
  d[44]:byte = thf;
  var uhf:int = d[44]:ubyte;
  var vhf:int = 24;
  var whf:int = uhf << vhf;
  var xhf:int = whf >> vhf;
  var yhf:int = 43;
  var zhf:int = xhf ^ yhf;
  d[44]:byte = zhf;
  var aif:int = d[44]:ubyte;
  var bif:int = 24;
  var cif:int = aif << bif;
  var dif:int = cif >> bif;
  var eif:int = 11;
  var fif:int = dif ^ eif;
  d[44]:byte = fif;
  var gif:int = d[44]:ubyte;
  var hif:int = 24;
  var iif:int = gif << hif;
  var jif:int = iif >> hif;
  var kif:int = 119;
  var lif:int = jif ^ kif;
  d[44]:byte = lif;
  var mif:int = d[44]:ubyte;
  var nif:int = 24;
  var oif:int = mif << nif;
  var pif:int = oif >> nif;
  var qif:int = 8;
  var rif:int = pif ^ qif;
  d[44]:byte = rif;
  var sif:int = d[44]:ubyte;
  var tif:int = 24;
  var uif:int = sif << tif;
  var vif:int = uif >> tif;
  var wif:int = 36;
  var xif:int = vif ^ wif;
  d[44]:byte = xif;
  var yif:int = d[44]:ubyte;
  var zif:int = 24;
  var ajf:int = yif << zif;
  var bjf:int = ajf >> zif;
  var cjf:int = 14;
  var djf:int = bjf ^ cjf;
  d[44]:byte = djf;
  var ejf:int = d[44]:ubyte;
  var fjf:int = 24;
  var gjf:int = ejf << fjf;
  var hjf:int = gjf >> fjf;
  var ijf:int = 90;
  var jjf:int = hjf ^ ijf;
  d[44]:byte = jjf;
  var kjf:int = d[44]:ubyte;
  var ljf:int = 24;
  var mjf:int = kjf << ljf;
  var njf:int = mjf >> ljf;
  var ojf:int = 74;
  var pjf:int = njf ^ ojf;
  d[44]:byte = pjf;
  var qjf:int = d[44]:ubyte;
  var rjf:int = 24;
  var sjf:int = qjf << rjf;
  var tjf:int = sjf >> rjf;
  var ujf:int = 42;
  var vjf:int = tjf ^ ujf;
  d[44]:byte = vjf;
  var wjf:int = d[44]:ubyte;
  var xjf:int = 24;
  var yjf:int = wjf << xjf;
  var zjf:int = yjf >> xjf;
  var akf:int = 103;
  var bkf:int = zjf ^ akf;
  d[44]:byte = bkf;
  var ckf:int = d[44]:ubyte;
  var dkf:int = 24;
  var ekf:int = ckf << dkf;
  var fkf:int = ekf >> dkf;
  var gkf:int = 120;
  var hkf:int = fkf ^ gkf;
  d[44]:byte = hkf;
  var ikf:int = d[44]:ubyte;
  var jkf:int = 24;
  var kkf:int = ikf << jkf;
  var lkf:int = kkf >> jkf;
  var mkf:int = 84;
  var nkf:int = lkf ^ mkf;
  d[44]:byte = nkf;
  var okf:int = d[44]:ubyte;
  var pkf:int = 24;
  var qkf:int = okf << pkf;
  var rkf:int = qkf >> pkf;
  var skf:int = 91;
  var tkf:int = rkf ^ skf;
  d[44]:byte = tkf;
  var ukf:int = 28;
  d[23]:byte = ukf;
  var vkf:int = d[23]:ubyte;
  var wkf:int = 24;
  var xkf:int = vkf << wkf;
  var ykf:int = xkf >> wkf;
  var zkf:int = 38;
  var alf:int = ykf ^ zkf;
  d[23]:byte = alf;
  var blf:int = d[23]:ubyte;
  var clf:int = 24;
  var dlf:int = blf << clf;
  var elf:int = dlf >> clf;
  var flf:int = 126;
  var glf:int = elf ^ flf;
  d[23]:byte = glf;
  var hlf:int = d[23]:ubyte;
  var ilf:int = 24;
  var jlf:int = hlf << ilf;
  var klf:int = jlf >> ilf;
  var llf:int = 37;
  var mlf:int = klf ^ llf;
  d[23]:byte = mlf;
  var nlf:int = d[23]:ubyte;
  var olf:int = 24;
  var plf:int = nlf << olf;
  var qlf:int = plf >> olf;
  var rlf:int = 78;
  var slf:int = qlf ^ rlf;
  d[23]:byte = slf;
  var tlf:int = d[23]:ubyte;
  var ulf:int = 24;
  var vlf:int = tlf << ulf;
  var wlf:int = vlf >> ulf;
  var xlf:int = 81;
  var ylf:int = wlf ^ xlf;
  d[23]:byte = ylf;
  var zlf:int = d[23]:ubyte;
  var amf:int = 24;
  var bmf:int = zlf << amf;
  var cmf:int = bmf >> amf;
  var dmf:int = 125;
  var emf:int = cmf ^ dmf;
  d[23]:byte = emf;
  var fmf:int = d[23]:ubyte;
  var gmf:int = 24;
  var hmf:int = fmf << gmf;
  var imf:int = hmf >> gmf;
  var jmf:int = 84;
  var kmf:int = imf ^ jmf;
  d[23]:byte = kmf;
  var lmf:int = d[23]:ubyte;
  var mmf:int = 24;
  var nmf:int = lmf << mmf;
  var omf:int = nmf >> mmf;
  var pmf:int = 44;
  var qmf:int = omf ^ pmf;
  d[23]:byte = qmf;
  var rmf:int = d[23]:ubyte;
  var smf:int = 24;
  var tmf:int = rmf << smf;
  var umf:int = tmf >> smf;
  var vmf:int = 52;
  var wmf:int = umf ^ vmf;
  d[23]:byte = wmf;
  var xmf:int = d[23]:ubyte;
  var ymf:int = 24;
  var zmf:int = xmf << ymf;
  var anf:int = zmf >> ymf;
  var bnf:int = 89;
  var cnf:int = anf ^ bnf;
  d[23]:byte = cnf;
  var dnf:int = d[23]:ubyte;
  var enf:int = 24;
  var fnf:int = dnf << enf;
  var gnf:int = fnf >> enf;
  var hnf:int = 54;
  var inf:int = gnf ^ hnf;
  d[23]:byte = inf;
  var jnf:int = d[23]:ubyte;
  var knf:int = 24;
  var lnf:int = jnf << knf;
  var mnf:int = lnf >> knf;
  var nnf:int = 18;
  var onf:int = mnf ^ nnf;
  d[23]:byte = onf;
  var pnf:int = d[23]:ubyte;
  var qnf:int = 24;
  var rnf:int = pnf << qnf;
  var snf:int = rnf >> qnf;
  var tnf:int = 112;
  var unf:int = snf ^ tnf;
  d[23]:byte = unf;
  var vnf:int = d[23]:ubyte;
  var wnf:int = 24;
  var xnf:int = vnf << wnf;
  var ynf:int = xnf >> wnf;
  var znf:int = 31;
  var aof:int = ynf ^ znf;
  d[23]:byte = aof;
  var bof:int = d[23]:ubyte;
  var cof:int = 24;
  var dof:int = bof << cof;
  var eof:int = dof >> cof;
  var fof:int = 60;
  var gof:int = eof ^ fof;
  d[23]:byte = gof;
  var hof:int = d[23]:ubyte;
  var iof:int = 24;
  var jof:int = hof << iof;
  var kof:int = jof >> iof;
  var lof:int = 61;
  var mof:int = kof ^ lof;
  d[23]:byte = mof;
  var nof:int = d[23]:ubyte;
  var oof:int = 24;
  var pof:int = nof << oof;
  var qof:int = pof >> oof;
  var rof:int = 72;
  var sof:int = qof ^ rof;
  d[23]:byte = sof;
  var tof:int = d[23]:ubyte;
  var uof:int = 24;
  var vof:int = tof << uof;
  var wof:int = vof >> uof;
  var xof:int = 71;
  var yof:int = wof ^ xof;
  d[23]:byte = yof;
  var zof:int = d[23]:ubyte;
  var apf:int = 24;
  var bpf:int = zof << apf;
  var cpf:int = bpf >> apf;
  var dpf:int = 29;
  var epf:int = cpf ^ dpf;
  d[23]:byte = epf;
  var fpf:int = d[23]:ubyte;
  var gpf:int = 24;
  var hpf:int = fpf << gpf;
  var ipf:int = hpf >> gpf;
  var jpf:int = 34;
  var kpf:int = ipf ^ jpf;
  d[23]:byte = kpf;
  var lpf:int = 40;
  d[3]:byte = lpf;
  var mpf:int = d[3]:ubyte;
  var npf:int = 24;
  var opf:int = mpf << npf;
  var ppf:int = opf >> npf;
  var qpf:int = 27;
  var rpf:int = ppf ^ qpf;
  d[3]:byte = rpf;
  var spf:int = d[3]:ubyte;
  var tpf:int = 24;
  var upf:int = spf << tpf;
  var vpf:int = upf >> tpf;
  var wpf:int = 67;
  var xpf:int = vpf ^ wpf;
  d[3]:byte = xpf;
  var ypf:int = d[3]:ubyte;
  var zpf:int = 24;
  var aqf:int = ypf << zpf;
  var bqf:int = aqf >> zpf;
  var cqf:int = 57;
  var dqf:int = bqf ^ cqf;
  d[3]:byte = dqf;
  var eqf:int = d[3]:ubyte;
  var fqf:int = 24;
  var gqf:int = eqf << fqf;
  var hqf:int = gqf >> fqf;
  var iqf:int = 36;
  var jqf:int = hqf ^ iqf;
  d[3]:byte = jqf;
  var kqf:int = d[3]:ubyte;
  var lqf:int = 24;
  var mqf:int = kqf << lqf;
  var nqf:int = mqf >> lqf;
  var oqf:int = 46;
  var pqf:int = nqf ^ oqf;
  d[3]:byte = pqf;
  var qqf:int = d[3]:ubyte;
  var rqf:int = 24;
  var sqf:int = qqf << rqf;
  var tqf:int = sqf >> rqf;
  var uqf:int = 46;
  var vqf:int = tqf ^ uqf;
  d[3]:byte = vqf;
  var wqf:int = d[3]:ubyte;
  var xqf:int = 24;
  var yqf:int = wqf << xqf;
  var zqf:int = yqf >> xqf;
  var arf:int = 72;
  var brf:int = zqf ^ arf;
  d[3]:byte = brf;
  var crf:int = d[3]:ubyte;
  var drf:int = 24;
  var erf:int = crf << drf;
  var frf:int = erf >> drf;
  var grf:int = 65;
  var hrf:int = frf ^ grf;
  d[3]:byte = hrf;
  var irf:int = d[3]:ubyte;
  var jrf:int = 24;
  var krf:int = irf << jrf;
  var lrf:int = krf >> jrf;
  var mrf:int = 76;
  var nrf:int = lrf ^ mrf;
  d[3]:byte = nrf;
  var orf:int = d[3]:ubyte;
  var prf:int = 24;
  var qrf:int = orf << prf;
  var rrf:int = qrf >> prf;
  var srf:int = 78;
  var trf:int = rrf ^ srf;
  d[3]:byte = trf;
  var urf:int = d[3]:ubyte;
  var vrf:int = 24;
  var wrf:int = urf << vrf;
  var xrf:int = wrf >> vrf;
  var yrf:int = 70;
  var zrf:int = xrf ^ yrf;
  d[3]:byte = zrf;
  var asf:int = d[3]:ubyte;
  var bsf:int = 24;
  var csf:int = asf << bsf;
  var dsf:int = csf >> bsf;
  var esf:int = 43;
  var fsf:int = dsf ^ esf;
  d[3]:byte = fsf;
  var gsf:int = d[3]:ubyte;
  var hsf:int = 24;
  var isf:int = gsf << hsf;
  var jsf:int = isf >> hsf;
  var ksf:int = 111;
  var lsf:int = jsf ^ ksf;
  d[3]:byte = lsf;
  var msf:int = d[3]:ubyte;
  var nsf:int = 24;
  var osf:int = msf << nsf;
  var psf:int = osf >> nsf;
  var qsf:int = 75;
  var rsf:int = psf ^ qsf;
  d[3]:byte = rsf;
  var ssf:int = d[3]:ubyte;
  var tsf:int = 24;
  var usf:int = ssf << tsf;
  var vsf:int = usf >> tsf;
  var wsf:int = 21;
  var xsf:int = vsf ^ wsf;
  d[3]:byte = xsf;
  var ysf:int = d[3]:ubyte;
  var zsf:int = 24;
  var atf:int = ysf << zsf;
  var btf:int = atf >> zsf;
  var ctf:int = 24;
  var dtf:int = btf ^ ctf;
  d[3]:byte = dtf;
  var etf:int = d[3]:ubyte;
  var ftf:int = 24;
  var gtf:int = etf << ftf;
  var htf:int = gtf >> ftf;
  var itf:int = 5;
  var jtf:int = htf ^ itf;
  d[3]:byte = jtf;
  var ktf:int = d[3]:ubyte;
  var ltf:int = 24;
  var mtf:int = ktf << ltf;
  var ntf:int = mtf >> ltf;
  var otf:int = 91;
  var ptf:int = ntf ^ otf;
  d[3]:byte = ptf;
  var qtf:int = d[3]:ubyte;
  var rtf:int = 24;
  var stf:int = qtf << rtf;
  var ttf:int = stf >> rtf;
  var utf:int = 83;
  var vtf:int = ttf ^ utf;
  d[3]:byte = vtf;
  var wtf:int = d[3]:ubyte;
  var xtf:int = 24;
  var ytf:int = wtf << xtf;
  var ztf:int = ytf >> xtf;
  var auf:int = 108;
  var buf:int = ztf ^ auf;
  d[3]:byte = buf;
  var cuf:int = 70;
  d[41]:byte = cuf;
  var duf:int = d[41]:ubyte;
  var euf:int = 24;
  var fuf:int = duf << euf;
  var guf:int = fuf >> euf;
  var huf:int = 99;
  var iuf:int = guf ^ huf;
  d[41]:byte = iuf;
  var juf:int = d[41]:ubyte;
  var kuf:int = 24;
  var luf:int = juf << kuf;
  var muf:int = luf >> kuf;
  var nuf:int = 33;
  var ouf:int = muf ^ nuf;
  d[41]:byte = ouf;
  var puf:int = d[41]:ubyte;
  var quf:int = 24;
  var ruf:int = puf << quf;
  var suf:int = ruf >> quf;
  var tuf:int = 71;
  var uuf:int = suf ^ tuf;
  d[41]:byte = uuf;
  var vuf:int = d[41]:ubyte;
  var wuf:int = 24;
  var xuf:int = vuf << wuf;
  var yuf:int = xuf >> wuf;
  var zuf:int = 20;
  var avf:int = yuf ^ zuf;
  d[41]:byte = avf;
  var bvf:int = d[41]:ubyte;
  var cvf:int = 24;
  var dvf:int = bvf << cvf;
  var evf:int = dvf >> cvf;
  var fvf:int = 108;
  var gvf:int = evf ^ fvf;
  d[41]:byte = gvf;
  var hvf:int = d[41]:ubyte;
  var ivf:int = 24;
  var jvf:int = hvf << ivf;
  var kvf:int = jvf >> ivf;
  var lvf:int = 92;
  var mvf:int = kvf ^ lvf;
  d[41]:byte = mvf;
  var nvf:int = d[41]:ubyte;
  var ovf:int = 24;
  var pvf:int = nvf << ovf;
  var qvf:int = pvf >> ovf;
  var rvf:int = 54;
  var svf:int = qvf ^ rvf;
  d[41]:byte = svf;
  var tvf:int = d[41]:ubyte;
  var uvf:int = 24;
  var vvf:int = tvf << uvf;
  var wvf:int = vvf >> uvf;
  var xvf:int = 101;
  var yvf:int = wvf ^ xvf;
  d[41]:byte = yvf;
  var zvf:int = d[41]:ubyte;
  var awf:int = 24;
  var bwf:int = zvf << awf;
  var cwf:int = bwf >> awf;
  var dwf:int = 127;
  var ewf:int = cwf ^ dwf;
  d[41]:byte = ewf;
  var fwf:int = d[41]:ubyte;
  var gwf:int = 24;
  var hwf:int = fwf << gwf;
  var iwf:int = hwf >> gwf;
  var jwf:int = 102;
  var kwf:int = iwf ^ jwf;
  d[41]:byte = kwf;
  var lwf:int = d[41]:ubyte;
  var mwf:int = 24;
  var nwf:int = lwf << mwf;
  var owf:int = nwf >> mwf;
  var pwf:int = 40;
  var qwf:int = owf ^ pwf;
  d[41]:byte = qwf;
  var rwf:int = d[41]:ubyte;
  var swf:int = 24;
  var twf:int = rwf << swf;
  var uwf:int = twf >> swf;
  var vwf:int = 52;
  var wwf:int = uwf ^ vwf;
  d[41]:byte = wwf;
  var xwf:int = d[41]:ubyte;
  var ywf:int = 24;
  var zwf:int = xwf << ywf;
  var axf:int = zwf >> ywf;
  var bxf:int = 46;
  var cxf:int = axf ^ bxf;
  d[41]:byte = cxf;
  var dxf:int = d[41]:ubyte;
  var exf:int = 24;
  var fxf:int = dxf << exf;
  var gxf:int = fxf >> exf;
  var hxf:int = 118;
  var ixf:int = gxf ^ hxf;
  d[41]:byte = ixf;
  var jxf:int = d[41]:ubyte;
  var kxf:int = 24;
  var lxf:int = jxf << kxf;
  var mxf:int = lxf >> kxf;
  var nxf:int = 99;
  var oxf:int = mxf ^ nxf;
  d[41]:byte = oxf;
  var pxf:int = d[41]:ubyte;
  var qxf:int = 24;
  var rxf:int = pxf << qxf;
  var sxf:int = rxf >> qxf;
  var txf:int = 49;
  var uxf:int = sxf ^ txf;
  d[41]:byte = uxf;
  var vxf:int = d[41]:ubyte;
  var wxf:int = 24;
  var xxf:int = vxf << wxf;
  var yxf:int = xxf >> wxf;
  var zxf:int = 65;
  var ayf:int = yxf ^ zxf;
  d[41]:byte = ayf;
  var byf:int = d[41]:ubyte;
  var cyf:int = 24;
  var dyf:int = byf << cyf;
  var eyf:int = dyf >> cyf;
  var fyf:int = 50;
  var gyf:int = eyf ^ fyf;
  d[41]:byte = gyf;
  var hyf:int = d[41]:ubyte;
  var iyf:int = 24;
  var jyf:int = hyf << iyf;
  var kyf:int = jyf >> iyf;
  var lyf:int = 56;
  var myf:int = kyf ^ lyf;
  d[41]:byte = myf;
  var nyf:int = d[41]:ubyte;
  var oyf:int = 24;
  var pyf:int = nyf << oyf;
  var qyf:int = pyf >> oyf;
  var ryf:int = 4;
  var syf:int = qyf ^ ryf;
  d[41]:byte = syf;
  var tyf:int = 80;
  d[30]:byte = tyf;
  var uyf:int = d[30]:ubyte;
  var vyf:int = 24;
  var wyf:int = uyf << vyf;
  var xyf:int = wyf >> vyf;
  var yyf:int = 88;
  var zyf:int = xyf ^ yyf;
  d[30]:byte = zyf;
  var azf:int = d[30]:ubyte;
  var bzf:int = 24;
  var czf:int = azf << bzf;
  var dzf:int = czf >> bzf;
  var ezf:int = 4;
  var fzf:int = dzf ^ ezf;
  d[30]:byte = fzf;
  var gzf:int = d[30]:ubyte;
  var hzf:int = 24;
  var izf:int = gzf << hzf;
  var jzf:int = izf >> hzf;
  var kzf:int = 123;
  var lzf:int = jzf ^ kzf;
  d[30]:byte = lzf;
  var mzf:int = d[30]:ubyte;
  var nzf:int = 24;
  var ozf:int = mzf << nzf;
  var pzf:int = ozf >> nzf;
  var qzf:int = 107;
  var rzf:int = pzf ^ qzf;
  d[30]:byte = rzf;
  var szf:int = d[30]:ubyte;
  var tzf:int = 24;
  var uzf:int = szf << tzf;
  var vzf:int = uzf >> tzf;
  var wzf:int = 26;
  var xzf:int = vzf ^ wzf;
  d[30]:byte = xzf;
  var yzf:int = d[30]:ubyte;
  var zzf:int = 24;
  var aag:int = yzf << zzf;
  var bag:int = aag >> zzf;
  var cag:int = 53;
  var dag:int = bag ^ cag;
  d[30]:byte = dag;
  var eag:int = d[30]:ubyte;
  var fag:int = 24;
  var gag:int = eag << fag;
  var hag:int = gag >> fag;
  var iag:int = 125;
  var jag:int = hag ^ iag;
  d[30]:byte = jag;
  var kag:int = d[30]:ubyte;
  var lag:int = 24;
  var mag:int = kag << lag;
  var nag:int = mag >> lag;
  var oag:int = 7;
  var pag:int = nag ^ oag;
  d[30]:byte = pag;
  var qag:int = d[30]:ubyte;
  var rag:int = 24;
  var sag:int = qag << rag;
  var tag:int = sag >> rag;
  var uag:int = 34;
  var vag:int = tag ^ uag;
  d[30]:byte = vag;
  var wag:int = d[30]:ubyte;
  var xag:int = 24;
  var yag:int = wag << xag;
  var zag:int = yag >> xag;
  var abg:int = 4;
  var bbg:int = zag ^ abg;
  d[30]:byte = bbg;
  var cbg:int = d[30]:ubyte;
  var dbg:int = 24;
  var ebg:int = cbg << dbg;
  var fbg:int = ebg >> dbg;
  var gbg:int = 9;
  var hbg:int = fbg ^ gbg;
  d[30]:byte = hbg;
  var ibg:int = d[30]:ubyte;
  var jbg:int = 24;
  var kbg:int = ibg << jbg;
  var lbg:int = kbg >> jbg;
  var mbg:int = 77;
  var nbg:int = lbg ^ mbg;
  d[30]:byte = nbg;
  var obg:int = d[30]:ubyte;
  var pbg:int = 24;
  var qbg:int = obg << pbg;
  var rbg:int = qbg >> pbg;
  var sbg:int = 14;
  var tbg:int = rbg ^ sbg;
  d[30]:byte = tbg;
  var ubg:int = d[30]:ubyte;
  var vbg:int = 24;
  var wbg:int = ubg << vbg;
  var xbg:int = wbg >> vbg;
  var ybg:int = 26;
  var zbg:int = xbg ^ ybg;
  d[30]:byte = zbg;
  var acg:int = d[30]:ubyte;
  var bcg:int = 24;
  var ccg:int = acg << bcg;
  var dcg:int = ccg >> bcg;
  var ecg:int = 8;
  var fcg:int = dcg ^ ecg;
  d[30]:byte = fcg;
  var gcg:int = d[30]:ubyte;
  var hcg:int = 24;
  var icg:int = gcg << hcg;
  var jcg:int = icg >> hcg;
  var kcg:int = 4;
  var lcg:int = jcg ^ kcg;
  d[30]:byte = lcg;
  var mcg:int = d[30]:ubyte;
  var ncg:int = 24;
  var ocg:int = mcg << ncg;
  var pcg:int = ocg >> ncg;
  var qcg:int = 111;
  var rcg:int = pcg ^ qcg;
  d[30]:byte = rcg;
  var scg:int = d[30]:ubyte;
  var tcg:int = 24;
  var ucg:int = scg << tcg;
  var vcg:int = ucg >> tcg;
  var wcg:int = 114;
  var xcg:int = vcg ^ wcg;
  d[30]:byte = xcg;
  var ycg:int = d[30]:ubyte;
  var zcg:int = 24;
  var adg:int = ycg << zcg;
  var bdg:int = adg >> zcg;
  var cdg:int = 109;
  var ddg:int = bdg ^ cdg;
  d[30]:byte = ddg;
  var edg:int = d[30]:ubyte;
  var fdg:int = 24;
  var gdg:int = edg << fdg;
  var hdg:int = gdg >> fdg;
  var idg:int = 39;
  var jdg:int = hdg ^ idg;
  d[30]:byte = jdg;
  var kdg:int = 80;
  d[29]:byte = kdg;
  var ldg:int = d[29]:ubyte;
  var mdg:int = 24;
  var ndg:int = ldg << mdg;
  var odg:int = ndg >> mdg;
  var pdg:int = 19;
  var qdg:int = odg ^ pdg;
  d[29]:byte = qdg;
  var rdg:int = d[29]:ubyte;
  var sdg:int = 24;
  var tdg:int = rdg << sdg;
  var udg:int = tdg >> sdg;
  var vdg:int = 24;
  var wdg:int = udg ^ vdg;
  d[29]:byte = wdg;
  var xdg:int = d[29]:ubyte;
  var ydg:int = 24;
  var zdg:int = xdg << ydg;
  var aeg:int = zdg >> ydg;
  var beg:int = 32;
  var ceg:int = aeg ^ beg;
  d[29]:byte = ceg;
  var deg:int = d[29]:ubyte;
  var eeg:int = 24;
  var feg:int = deg << eeg;
  var geg:int = feg >> eeg;
  var heg:int = 89;
  var ieg:int = geg ^ heg;
  d[29]:byte = ieg;
  var jeg:int = d[29]:ubyte;
  var keg:int = 24;
  var leg:int = jeg << keg;
  var meg:int = leg >> keg;
  var neg:int = 92;
  var oeg:int = meg ^ neg;
  d[29]:byte = oeg;
  var peg:int = d[29]:ubyte;
  var qeg:int = 24;
  var reg:int = peg << qeg;
  var seg:int = reg >> qeg;
  var teg:int = 54;
  var ueg:int = seg ^ teg;
  d[29]:byte = ueg;
  var veg:int = d[29]:ubyte;
  var weg:int = 24;
  var xeg:int = veg << weg;
  var yeg:int = xeg >> weg;
  var zeg:int = 66;
  var afg:int = yeg ^ zeg;
  d[29]:byte = afg;
  var bfg:int = d[29]:ubyte;
  var cfg:int = 24;
  var dfg:int = bfg << cfg;
  var efg:int = dfg >> cfg;
  var ffg:int = 8;
  var gfg:int = efg ^ ffg;
  d[29]:byte = gfg;
  var hfg:int = d[29]:ubyte;
  var ifg:int = 24;
  var jfg:int = hfg << ifg;
  var kfg:int = jfg >> ifg;
  var lfg:int = 22;
  var mfg:int = kfg ^ lfg;
  d[29]:byte = mfg;
  var nfg:int = d[29]:ubyte;
  var ofg:int = 24;
  var pfg:int = nfg << ofg;
  var qfg:int = pfg >> ofg;
  var rfg:int = 11;
  var sfg:int = qfg ^ rfg;
  d[29]:byte = sfg;
  var tfg:int = d[29]:ubyte;
  var ufg:int = 24;
  var vfg:int = tfg << ufg;
  var wfg:int = vfg >> ufg;
  var xfg:int = 81;
  var yfg:int = wfg ^ xfg;
  d[29]:byte = yfg;
  var zfg:int = d[29]:ubyte;
  var agg:int = 24;
  var bgg:int = zfg << agg;
  var cgg:int = bgg >> agg;
  var dgg:int = 69;
  var egg:int = cgg ^ dgg;
  d[29]:byte = egg;
  var fgg:int = d[29]:ubyte;
  var ggg:int = 24;
  var hgg:int = fgg << ggg;
  var igg:int = hgg >> ggg;
  var jgg:int = 102;
  var kgg:int = igg ^ jgg;
  d[29]:byte = kgg;
  var lgg:int = d[29]:ubyte;
  var mgg:int = 24;
  var ngg:int = lgg << mgg;
  var ogg:int = ngg >> mgg;
  var pgg:int = 58;
  var qgg:int = ogg ^ pgg;
  d[29]:byte = qgg;
  var rgg:int = d[29]:ubyte;
  var sgg:int = 24;
  var tgg:int = rgg << sgg;
  var ugg:int = tgg >> sgg;
  var vgg:int = 35;
  var wgg:int = ugg ^ vgg;
  d[29]:byte = wgg;
  var xgg:int = d[29]:ubyte;
  var ygg:int = 24;
  var zgg:int = xgg << ygg;
  var ahg:int = zgg >> ygg;
  var bhg:int = 107;
  var chg:int = ahg ^ bhg;
  d[29]:byte = chg;
  var dhg:int = d[29]:ubyte;
  var ehg:int = 24;
  var fhg:int = dhg << ehg;
  var ghg:int = fhg >> ehg;
  var hhg:int = 95;
  var ihg:int = ghg ^ hhg;
  d[29]:byte = ihg;
  var jhg:int = d[29]:ubyte;
  var khg:int = 24;
  var lhg:int = jhg << khg;
  var mhg:int = lhg >> khg;
  var nhg:int = 126;
  var ohg:int = mhg ^ nhg;
  d[29]:byte = ohg;
  var phg:int = d[29]:ubyte;
  var qhg:int = 24;
  var rhg:int = phg << qhg;
  var shg:int = rhg >> qhg;
  var thg:int = 87;
  var uhg:int = shg ^ thg;
  d[29]:byte = uhg;
  var vhg:int = d[29]:ubyte;
  var whg:int = 24;
  var xhg:int = vhg << whg;
  var yhg:int = xhg >> whg;
  var zhg:int = 54;
  var aig:int = yhg ^ zhg;
  d[29]:byte = aig;
  var big:int = 71;
  d[39]:byte = big;
  var cig:int = d[39]:ubyte;
  var dig:int = 24;
  var eig:int = cig << dig;
  var fig:int = eig >> dig;
  var gig:int = 56;
  var hig:int = fig ^ gig;
  d[39]:byte = hig;
  var iig:int = d[39]:ubyte;
  var jig:int = 24;
  var kig:int = iig << jig;
  var lig:int = kig >> jig;
  var mig:int = 1;
  var nig:int = lig ^ mig;
  d[39]:byte = nig;
  var oig:int = d[39]:ubyte;
  var pig:int = 24;
  var qig:int = oig << pig;
  var rig:int = qig >> pig;
  var sig:int = 118;
  var tig:int = rig ^ sig;
  d[39]:byte = tig;
  var uig:int = d[39]:ubyte;
  var vig:int = 24;
  var wig:int = uig << vig;
  var xig:int = wig >> vig;
  var yig:int = 53;
  var zig:int = xig ^ yig;
  d[39]:byte = zig;
  var ajg:int = d[39]:ubyte;
  var bjg:int = 24;
  var cjg:int = ajg << bjg;
  var djg:int = cjg >> bjg;
  var ejg:int = 83;
  var fjg:int = djg ^ ejg;
  d[39]:byte = fjg;
  var gjg:int = d[39]:ubyte;
  var hjg:int = 24;
  var ijg:int = gjg << hjg;
  var jjg:int = ijg >> hjg;
  var kjg:int = 40;
  var ljg:int = jjg ^ kjg;
  d[39]:byte = ljg;
  var mjg:int = d[39]:ubyte;
  var njg:int = 24;
  var ojg:int = mjg << njg;
  var pjg:int = ojg >> njg;
  var qjg:int = 22;
  var rjg:int = pjg ^ qjg;
  d[39]:byte = rjg;
  var sjg:int = d[39]:ubyte;
  var tjg:int = 24;
  var ujg:int = sjg << tjg;
  var vjg:int = ujg >> tjg;
  var wjg:int = 124;
  var xjg:int = vjg ^ wjg;
  d[39]:byte = xjg;
  var yjg:int = d[39]:ubyte;
  var zjg:int = 24;
  var akg:int = yjg << zjg;
  var bkg:int = akg >> zjg;
  var ckg:int = 122;
  var dkg:int = bkg ^ ckg;
  d[39]:byte = dkg;
  var ekg:int = d[39]:ubyte;
  var fkg:int = 24;
  var gkg:int = ekg << fkg;
  var hkg:int = gkg >> fkg;
  var ikg:int = 19;
  var jkg:int = hkg ^ ikg;
  d[39]:byte = jkg;
  var kkg:int = d[39]:ubyte;
  var lkg:int = 24;
  var mkg:int = kkg << lkg;
  var nkg:int = mkg >> lkg;
  var okg:int = 114;
  var pkg:int = nkg ^ okg;
  d[39]:byte = pkg;
  var qkg:int = d[39]:ubyte;
  var rkg:int = 24;
  var skg:int = qkg << rkg;
  var tkg:int = skg >> rkg;
  var ukg:int = 92;
  var vkg:int = tkg ^ ukg;
  d[39]:byte = vkg;
  var wkg:int = d[39]:ubyte;
  var xkg:int = 24;
  var ykg:int = wkg << xkg;
  var zkg:int = ykg >> xkg;
  var alg:int = 9;
  var blg:int = zkg ^ alg;
  d[39]:byte = blg;
  var clg:int = d[39]:ubyte;
  var dlg:int = 24;
  var elg:int = clg << dlg;
  var flg:int = elg >> dlg;
  var glg:int = 113;
  var hlg:int = flg ^ glg;
  d[39]:byte = hlg;
  var ilg:int = d[39]:ubyte;
  var jlg:int = 24;
  var klg:int = ilg << jlg;
  var llg:int = klg >> jlg;
  var mlg:int = 118;
  var nlg:int = llg ^ mlg;
  d[39]:byte = nlg;
  var olg:int = d[39]:ubyte;
  var plg:int = 24;
  var qlg:int = olg << plg;
  var rlg:int = qlg >> plg;
  var slg:int = 121;
  var tlg:int = rlg ^ slg;
  d[39]:byte = tlg;
  var ulg:int = d[39]:ubyte;
  var vlg:int = 24;
  var wlg:int = ulg << vlg;
  var xlg:int = wlg >> vlg;
  var ylg:int = 119;
  var zlg:int = xlg ^ ylg;
  d[39]:byte = zlg;
  var amg:int = d[39]:ubyte;
  var bmg:int = 24;
  var cmg:int = amg << bmg;
  var dmg:int = cmg >> bmg;
  var emg:int = 52;
  var fmg:int = dmg ^ emg;
  d[39]:byte = fmg;
  var gmg:int = d[39]:ubyte;
  var hmg:int = 24;
  var img:int = gmg << hmg;
  var jmg:int = img >> hmg;
  var kmg:int = 60;
  var lmg:int = jmg ^ kmg;
  d[39]:byte = lmg;
  var mmg:int = d[39]:ubyte;
  var nmg:int = 24;
  var omg:int = mmg << nmg;
  var pmg:int = omg >> nmg;
  var qmg:int = 6;
  var rmg:int = pmg ^ qmg;
  d[39]:byte = rmg;
  var smg:int = 4;
  d[32]:byte = smg;
  var tmg:int = d[32]:ubyte;
  var umg:int = 24;
  var vmg:int = tmg << umg;
  var wmg:int = vmg >> umg;
  var xmg:int = 84;
  var ymg:int = wmg ^ xmg;
  d[32]:byte = ymg;
  var zmg:int = d[32]:ubyte;
  var ang:int = 24;
  var bng:int = zmg << ang;
  var cng:int = bng >> ang;
  var dng:int = 120;
  var eng:int = cng ^ dng;
  d[32]:byte = eng;
  var fng:int = d[32]:ubyte;
  var gng:int = 24;
  var hng:int = fng << gng;
  var ing:int = hng >> gng;
  var jng:int = 89;
  var kng:int = ing ^ jng;
  d[32]:byte = kng;
  var lng:int = d[32]:ubyte;
  var mng:int = 24;
  var nng:int = lng << mng;
  var ong:int = nng >> mng;
  var png:int = 31;
  var qng:int = ong ^ png;
  d[32]:byte = qng;
  var rng:int = d[32]:ubyte;
  var sng:int = 24;
  var tng:int = rng << sng;
  var ung:int = tng >> sng;
  var vng:int = 30;
  var wng:int = ung ^ vng;
  d[32]:byte = wng;
  var xng:int = d[32]:ubyte;
  var yng:int = 24;
  var zng:int = xng << yng;
  var aog:int = zng >> yng;
  var bog:int = 107;
  var cog:int = aog ^ bog;
  d[32]:byte = cog;
  var dog:int = d[32]:ubyte;
  var eog:int = 24;
  var fog:int = dog << eog;
  var gog:int = fog >> eog;
  var hog:int = 112;
  var iog:int = gog ^ hog;
  d[32]:byte = iog;
  var jog:int = d[32]:ubyte;
  var kog:int = 24;
  var log:int = jog << kog;
  var mog:int = log >> kog;
  var nog:int = 101;
  var oog:int = mog ^ nog;
  d[32]:byte = oog;
  var pog:int = d[32]:ubyte;
  var qog:int = 24;
  var rog:int = pog << qog;
  var sog:int = rog >> qog;
  var tog:int = 68;
  var uog:int = sog ^ tog;
  d[32]:byte = uog;
  var vog:int = d[32]:ubyte;
  var wog:int = 24;
  var xog:int = vog << wog;
  var yog:int = xog >> wog;
  var zog:int = 55;
  var apg:int = yog ^ zog;
  d[32]:byte = apg;
  var bpg:int = d[32]:ubyte;
  var cpg:int = 24;
  var dpg:int = bpg << cpg;
  var epg:int = dpg >> cpg;
  var fpg:int = 9;
  var gpg:int = epg ^ fpg;
  d[32]:byte = gpg;
  var hpg:int = d[32]:ubyte;
  var ipg:int = 24;
  var jpg:int = hpg << ipg;
  var kpg:int = jpg >> ipg;
  var lpg:int = 56;
  var mpg:int = kpg ^ lpg;
  d[32]:byte = mpg;
  var npg:int = d[32]:ubyte;
  var opg:int = 24;
  var ppg:int = npg << opg;
  var qpg:int = ppg >> opg;
  var rpg:int = 100;
  var spg:int = qpg ^ rpg;
  d[32]:byte = spg;
  var tpg:int = d[32]:ubyte;
  var upg:int = 24;
  var vpg:int = tpg << upg;
  var wpg:int = vpg >> upg;
  var xpg:int = 109;
  var ypg:int = wpg ^ xpg;
  d[32]:byte = ypg;
  var zpg:int = d[32]:ubyte;
  var aqg:int = 24;
  var bqg:int = zpg << aqg;
  var cqg:int = bqg >> aqg;
  var dqg:int = 73;
  var eqg:int = cqg ^ dqg;
  d[32]:byte = eqg;
  var fqg:int = d[32]:ubyte;
  var gqg:int = 24;
  var hqg:int = fqg << gqg;
  var iqg:int = hqg >> gqg;
  var jqg:int = 106;
  var kqg:int = iqg ^ jqg;
  d[32]:byte = kqg;
  var lqg:int = d[32]:ubyte;
  var mqg:int = 24;
  var nqg:int = lqg << mqg;
  var oqg:int = nqg >> mqg;
  var pqg:int = 39;
  var qqg:int = oqg ^ pqg;
  d[32]:byte = qqg;
  var rqg:int = d[32]:ubyte;
  var sqg:int = 24;
  var tqg:int = rqg << sqg;
  var uqg:int = tqg >> sqg;
  var vqg:int = 50;
  var wqg:int = uqg ^ vqg;
  d[32]:byte = wqg;
  var xqg:int = d[32]:ubyte;
  var yqg:int = 24;
  var zqg:int = xqg << yqg;
  var arg:int = zqg >> yqg;
  var brg:int = 0;
  var crg:int = arg ^ brg;
  d[32]:byte = crg;
  var drg:int = d[32]:ubyte;
  var erg:int = 24;
  var frg:int = drg << erg;
  var grg:int = frg >> erg;
  var hrg:int = 10;
  var irg:int = grg ^ hrg;
  d[32]:byte = irg;
  var jrg:int = 25;
  d[33]:byte = jrg;
  var krg:int = d[33]:ubyte;
  var lrg:int = 24;
  var mrg:int = krg << lrg;
  var nrg:int = mrg >> lrg;
  var org:int = 9;
  var prg:int = nrg ^ org;
  d[33]:byte = prg;
  var qrg:int = d[33]:ubyte;
  var rrg:int = 24;
  var srg:int = qrg << rrg;
  var trg:int = srg >> rrg;
  var urg:int = 9;
  var vrg:int = trg ^ urg;
  d[33]:byte = vrg;
  var wrg:int = d[33]:ubyte;
  var xrg:int = 24;
  var yrg:int = wrg << xrg;
  var zrg:int = yrg >> xrg;
  var asg:int = 29;
  var bsg:int = zrg ^ asg;
  d[33]:byte = bsg;
  var csg:int = d[33]:ubyte;
  var dsg:int = 24;
  var esg:int = csg << dsg;
  var fsg:int = esg >> dsg;
  var gsg:int = 61;
  var hsg:int = fsg ^ gsg;
  d[33]:byte = hsg;
  var isg:int = d[33]:ubyte;
  var jsg:int = 24;
  var ksg:int = isg << jsg;
  var lsg:int = ksg >> jsg;
  var msg:int = 92;
  var nsg:int = lsg ^ msg;
  d[33]:byte = nsg;
  var osg:int = d[33]:ubyte;
  var psg:int = 24;
  var qsg:int = osg << psg;
  var rsg:int = qsg >> psg;
  var ssg:int = 43;
  var tsg:int = rsg ^ ssg;
  d[33]:byte = tsg;
  var usg:int = d[33]:ubyte;
  var vsg:int = 24;
  var wsg:int = usg << vsg;
  var xsg:int = wsg >> vsg;
  var ysg:int = 22;
  var zsg:int = xsg ^ ysg;
  d[33]:byte = zsg;
  var atg:int = d[33]:ubyte;
  var btg:int = 24;
  var ctg:int = atg << btg;
  var dtg:int = ctg >> btg;
  var etg:int = 60;
  var ftg:int = dtg ^ etg;
  d[33]:byte = ftg;
  var gtg:int = d[33]:ubyte;
  var htg:int = 24;
  var itg:int = gtg << htg;
  var jtg:int = itg >> htg;
  var ktg:int = 48;
  var ltg:int = jtg ^ ktg;
  d[33]:byte = ltg;
  var mtg:int = d[33]:ubyte;
  var ntg:int = 24;
  var otg:int = mtg << ntg;
  var ptg:int = otg >> ntg;
  var qtg:int = 10;
  var rtg:int = ptg ^ qtg;
  d[33]:byte = rtg;
  var stg:int = d[33]:ubyte;
  var ttg:int = 24;
  var utg:int = stg << ttg;
  var vtg:int = utg >> ttg;
  var wtg:int = 42;
  var xtg:int = vtg ^ wtg;
  d[33]:byte = xtg;
  var ytg:int = d[33]:ubyte;
  var ztg:int = 24;
  var aug:int = ytg << ztg;
  var bug:int = aug >> ztg;
  var cug:int = 116;
  var dug:int = bug ^ cug;
  d[33]:byte = dug;
  var eug:int = d[33]:ubyte;
  var fug:int = 24;
  var gug:int = eug << fug;
  var hug:int = gug >> fug;
  var iug:int = 114;
  var jug:int = hug ^ iug;
  d[33]:byte = jug;
  var kug:int = d[33]:ubyte;
  var lug:int = 24;
  var mug:int = kug << lug;
  var nug:int = mug >> lug;
  var oug:int = 104;
  var pug:int = nug ^ oug;
  d[33]:byte = pug;
  var qug:int = d[33]:ubyte;
  var rug:int = 24;
  var sug:int = qug << rug;
  var tug:int = sug >> rug;
  var uug:int = 54;
  var vug:int = tug ^ uug;
  d[33]:byte = vug;
  var wug:int = d[33]:ubyte;
  var xug:int = 24;
  var yug:int = wug << xug;
  var zug:int = yug >> xug;
  var avg:int = 83;
  var bvg:int = zug ^ avg;
  d[33]:byte = bvg;
  var cvg:int = d[33]:ubyte;
  var dvg:int = 24;
  var evg:int = cvg << dvg;
  var fvg:int = evg >> dvg;
  var gvg:int = 100;
  var hvg:int = fvg ^ gvg;
  d[33]:byte = hvg;
  var ivg:int = d[33]:ubyte;
  var jvg:int = 24;
  var kvg:int = ivg << jvg;
  var lvg:int = kvg >> jvg;
  var mvg:int = 63;
  var nvg:int = lvg ^ mvg;
  d[33]:byte = nvg;
  var ovg:int = d[33]:ubyte;
  var pvg:int = 24;
  var qvg:int = ovg << pvg;
  var rvg:int = qvg >> pvg;
  var svg:int = 0;
  var tvg:int = rvg ^ svg;
  d[33]:byte = tvg;
  var uvg:int = d[33]:ubyte;
  var vvg:int = 24;
  var wvg:int = uvg << vvg;
  var xvg:int = wvg >> vvg;
  var yvg:int = 123;
  var zvg:int = xvg ^ yvg;
  d[33]:byte = zvg;
  var awg:int = 32;
  d[24]:byte = awg;
  var bwg:int = d[24]:ubyte;
  var cwg:int = 24;
  var dwg:int = bwg << cwg;
  var ewg:int = dwg >> cwg;
  var fwg:int = 51;
  var gwg:int = ewg ^ fwg;
  d[24]:byte = gwg;
  var hwg:int = d[24]:ubyte;
  var iwg:int = 24;
  var jwg:int = hwg << iwg;
  var kwg:int = jwg >> iwg;
  var lwg:int = 31;
  var mwg:int = kwg ^ lwg;
  d[24]:byte = mwg;
  var nwg:int = d[24]:ubyte;
  var owg:int = 24;
  var pwg:int = nwg << owg;
  var qwg:int = pwg >> owg;
  var rwg:int = 75;
  var swg:int = qwg ^ rwg;
  d[24]:byte = swg;
  var twg:int = d[24]:ubyte;
  var uwg:int = 24;
  var vwg:int = twg << uwg;
  var wwg:int = vwg >> uwg;
  var xwg:int = 114;
  var ywg:int = wwg ^ xwg;
  d[24]:byte = ywg;
  var zwg:int = d[24]:ubyte;
  var axg:int = 24;
  var bxg:int = zwg << axg;
  var cxg:int = bxg >> axg;
  var dxg:int = 121;
  var exg:int = cxg ^ dxg;
  d[24]:byte = exg;
  var fxg:int = d[24]:ubyte;
  var gxg:int = 24;
  var hxg:int = fxg << gxg;
  var ixg:int = hxg >> gxg;
  var jxg:int = 58;
  var kxg:int = ixg ^ jxg;
  d[24]:byte = kxg;
  var lxg:int = d[24]:ubyte;
  var mxg:int = 24;
  var nxg:int = lxg << mxg;
  var oxg:int = nxg >> mxg;
  var pxg:int = 61;
  var qxg:int = oxg ^ pxg;
  d[24]:byte = qxg;
  var rxg:int = d[24]:ubyte;
  var sxg:int = 24;
  var txg:int = rxg << sxg;
  var uxg:int = txg >> sxg;
  var vxg:int = 26;
  var wxg:int = uxg ^ vxg;
  d[24]:byte = wxg;
  var xxg:int = d[24]:ubyte;
  var yxg:int = 24;
  var zxg:int = xxg << yxg;
  var ayg:int = zxg >> yxg;
  var byg:int = 102;
  var cyg:int = ayg ^ byg;
  d[24]:byte = cyg;
  var dyg:int = d[24]:ubyte;
  var eyg:int = 24;
  var fyg:int = dyg << eyg;
  var gyg:int = fyg >> eyg;
  var hyg:int = 34;
  var iyg:int = gyg ^ hyg;
  d[24]:byte = iyg;
  var jyg:int = d[24]:ubyte;
  var kyg:int = 24;
  var lyg:int = jyg << kyg;
  var myg:int = lyg >> kyg;
  var nyg:int = 75;
  var oyg:int = myg ^ nyg;
  d[24]:byte = oyg;
  var pyg:int = d[24]:ubyte;
  var qyg:int = 24;
  var ryg:int = pyg << qyg;
  var syg:int = ryg >> qyg;
  var tyg:int = 99;
  var uyg:int = syg ^ tyg;
  d[24]:byte = uyg;
  var vyg:int = d[24]:ubyte;
  var wyg:int = 24;
  var xyg:int = vyg << wyg;
  var yyg:int = xyg >> wyg;
  var zyg:int = 124;
  var azg:int = yyg ^ zyg;
  d[24]:byte = azg;
  var bzg:int = d[24]:ubyte;
  var czg:int = 24;
  var dzg:int = bzg << czg;
  var ezg:int = dzg >> czg;
  var fzg:int = 3;
  var gzg:int = ezg ^ fzg;
  d[24]:byte = gzg;
  var hzg:int = d[24]:ubyte;
  var izg:int = 24;
  var jzg:int = hzg << izg;
  var kzg:int = jzg >> izg;
  var lzg:int = 56;
  var mzg:int = kzg ^ lzg;
  d[24]:byte = mzg;
  var nzg:int = d[24]:ubyte;
  var ozg:int = 24;
  var pzg:int = nzg << ozg;
  var qzg:int = pzg >> ozg;
  var rzg:int = 99;
  var szg:int = qzg ^ rzg;
  d[24]:byte = szg;
  var tzg:int = d[24]:ubyte;
  var uzg:int = 24;
  var vzg:int = tzg << uzg;
  var wzg:int = vzg >> uzg;
  var xzg:int = 112;
  var yzg:int = wzg ^ xzg;
  d[24]:byte = yzg;
  var zzg:int = d[24]:ubyte;
  var aah:int = 24;
  var bah:int = zzg << aah;
  var cah:int = bah >> aah;
  var dah:int = 30;
  var eah:int = cah ^ dah;
  d[24]:byte = eah;
  var fah:int = d[24]:ubyte;
  var gah:int = 24;
  var hah:int = fah << gah;
  var iah:int = hah >> gah;
  var jah:int = 123;
  var kah:int = iah ^ jah;
  d[24]:byte = kah;
  var lah:int = d[24]:ubyte;
  var mah:int = 24;
  var nah:int = lah << mah;
  var oah:int = nah >> mah;
  var pah:int = 117;
  var qah:int = oah ^ pah;
  d[24]:byte = qah;
  var rah:int = 11;
  d[47]:byte = rah;
  var sah:int = d[47]:ubyte;
  var tah:int = 24;
  var uah:int = sah << tah;
  var vah:int = uah >> tah;
  var wah:int = 38;
  var xah:int = vah ^ wah;
  d[47]:byte = xah;
  var yah:int = d[47]:ubyte;
  var zah:int = 24;
  var abh:int = yah << zah;
  var bbh:int = abh >> zah;
  var cbh:int = 54;
  var dbh:int = bbh ^ cbh;
  d[47]:byte = dbh;
  var ebh:int = d[47]:ubyte;
  var fbh:int = 24;
  var gbh:int = ebh << fbh;
  var hbh:int = gbh >> fbh;
  var ibh:int = 68;
  var jbh:int = hbh ^ ibh;
  d[47]:byte = jbh;
  var kbh:int = d[47]:ubyte;
  var lbh:int = 24;
  var mbh:int = kbh << lbh;
  var nbh:int = mbh >> lbh;
  var obh:int = 53;
  var pbh:int = nbh ^ obh;
  d[47]:byte = pbh;
  var qbh:int = d[47]:ubyte;
  var rbh:int = 24;
  var sbh:int = qbh << rbh;
  var tbh:int = sbh >> rbh;
  var ubh:int = 89;
  var vbh:int = tbh ^ ubh;
  d[47]:byte = vbh;
  var wbh:int = d[47]:ubyte;
  var xbh:int = 24;
  var ybh:int = wbh << xbh;
  var zbh:int = ybh >> xbh;
  var ach:int = 65;
  var bch:int = zbh ^ ach;
  d[47]:byte = bch;
  var cch:int = d[47]:ubyte;
  var dch:int = 24;
  var ech:int = cch << dch;
  var fch:int = ech >> dch;
  var gch:int = 113;
  var hch:int = fch ^ gch;
  d[47]:byte = hch;
  var ich:int = d[47]:ubyte;
  var jch:int = 24;
  var kch:int = ich << jch;
  var lch:int = kch >> jch;
  var mch:int = 124;
  var nch:int = lch ^ mch;
  d[47]:byte = nch;
  var och:int = d[47]:ubyte;
  var pch:int = 24;
  var qch:int = och << pch;
  var rch:int = qch >> pch;
  var sch:int = 15;
  var tch:int = rch ^ sch;
  d[47]:byte = tch;
  var uch:int = d[47]:ubyte;
  var vch:int = 24;
  var wch:int = uch << vch;
  var xch:int = wch >> vch;
  var ych:int = 1;
  var zch:int = xch ^ ych;
  d[47]:byte = zch;
  var adh:int = d[47]:ubyte;
  var bdh:int = 24;
  var cdh:int = adh << bdh;
  var ddh:int = cdh >> bdh;
  var edh:int = 115;
  var fdh:int = ddh ^ edh;
  d[47]:byte = fdh;
  var gdh:int = d[47]:ubyte;
  var hdh:int = 24;
  var idh:int = gdh << hdh;
  var jdh:int = idh >> hdh;
  var kdh:int = 83;
  var ldh:int = jdh ^ kdh;
  d[47]:byte = ldh;
  var mdh:int = d[47]:ubyte;
  var ndh:int = 24;
  var odh:int = mdh << ndh;
  var pdh:int = odh >> ndh;
  var qdh:int = 103;
  var rdh:int = pdh ^ qdh;
  d[47]:byte = rdh;
  var sdh:int = d[47]:ubyte;
  var tdh:int = 24;
  var udh:int = sdh << tdh;
  var vdh:int = udh >> tdh;
  var wdh:int = 31;
  var xdh:int = vdh ^ wdh;
  d[47]:byte = xdh;
  var ydh:int = d[47]:ubyte;
  var zdh:int = 24;
  var aeh:int = ydh << zdh;
  var beh:int = aeh >> zdh;
  var ceh:int = 125;
  var deh:int = beh ^ ceh;
  d[47]:byte = deh;
  var eeh:int = d[47]:ubyte;
  var feh:int = 24;
  var geh:int = eeh << feh;
  var heh:int = geh >> feh;
  var ieh:int = 91;
  var jeh:int = heh ^ ieh;
  d[47]:byte = jeh;
  var keh:int = d[47]:ubyte;
  var leh:int = 24;
  var meh:int = keh << leh;
  var neh:int = meh >> leh;
  var oeh:int = 96;
  var peh:int = neh ^ oeh;
  d[47]:byte = peh;
  var qeh:int = d[47]:ubyte;
  var reh:int = 24;
  var seh:int = qeh << reh;
  var teh:int = seh >> reh;
  var ueh:int = 107;
  var veh:int = teh ^ ueh;
  d[47]:byte = veh;
  var weh:int = d[47]:ubyte;
  var xeh:int = 24;
  var yeh:int = weh << xeh;
  var zeh:int = yeh >> xeh;
  var afh:int = 85;
  var bfh:int = zeh ^ afh;
  d[47]:byte = bfh;
  var cfh:int = d[47]:ubyte;
  var dfh:int = 24;
  var efh:int = cfh << dfh;
  var ffh:int = efh >> dfh;
  var gfh:int = 63;
  var hfh:int = ffh ^ gfh;
  d[47]:byte = hfh;
  var ifh:int = 15;
  d[8]:byte = ifh;
  var jfh:int = d[8]:ubyte;
  var kfh:int = 24;
  var lfh:int = jfh << kfh;
  var mfh:int = lfh >> kfh;
  var nfh:int = 4;
  var ofh:int = mfh ^ nfh;
  d[8]:byte = ofh;
  var pfh:int = d[8]:ubyte;
  var qfh:int = 24;
  var rfh:int = pfh << qfh;
  var sfh:int = rfh >> qfh;
  var tfh:int = 57;
  var ufh:int = sfh ^ tfh;
  d[8]:byte = ufh;
  var vfh:int = d[8]:ubyte;
  var wfh:int = 24;
  var xfh:int = vfh << wfh;
  var yfh:int = xfh >> wfh;
  var zfh:int = 90;
  var agh:int = yfh ^ zfh;
  d[8]:byte = agh;
  var bgh:int = d[8]:ubyte;
  var cgh:int = 24;
  var dgh:int = bgh << cgh;
  var egh:int = dgh >> cgh;
  var fgh:int = 6;
  var ggh:int = egh ^ fgh;
  d[8]:byte = ggh;
  var hgh:int = d[8]:ubyte;
  var igh:int = 24;
  var jgh:int = hgh << igh;
  var kgh:int = jgh >> igh;
  var lgh:int = 20;
  var mgh:int = kgh ^ lgh;
  d[8]:byte = mgh;
  var ngh:int = d[8]:ubyte;
  var ogh:int = 24;
  var pgh:int = ngh << ogh;
  var qgh:int = pgh >> ogh;
  var rgh:int = 123;
  var sgh:int = qgh ^ rgh;
  d[8]:byte = sgh;
  var tgh:int = d[8]:ubyte;
  var ugh:int = 24;
  var vgh:int = tgh << ugh;
  var wgh:int = vgh >> ugh;
  var xgh:int = 96;
  var ygh:int = wgh ^ xgh;
  d[8]:byte = ygh;
  var zgh:int = d[8]:ubyte;
  var ahh:int = 24;
  var bhh:int = zgh << ahh;
  var chh:int = bhh >> ahh;
  var dhh:int = 78;
  var ehh:int = chh ^ dhh;
  d[8]:byte = ehh;
  var fhh:int = d[8]:ubyte;
  var ghh:int = 24;
  var hhh:int = fhh << ghh;
  var ihh:int = hhh >> ghh;
  var jhh:int = 47;
  var khh:int = ihh ^ jhh;
  d[8]:byte = khh;
  var lhh:int = d[8]:ubyte;
  var mhh:int = 24;
  var nhh:int = lhh << mhh;
  var ohh:int = nhh >> mhh;
  var phh:int = 27;
  var qhh:int = ohh ^ phh;
  d[8]:byte = qhh;
  var rhh:int = d[8]:ubyte;
  var shh:int = 24;
  var thh:int = rhh << shh;
  var uhh:int = thh >> shh;
  var vhh:int = 121;
  var whh:int = uhh ^ vhh;
  d[8]:byte = whh;
  var xhh:int = d[8]:ubyte;
  var yhh:int = 24;
  var zhh:int = xhh << yhh;
  var aih:int = zhh >> yhh;
  var bih:int = 119;
  var cih:int = aih ^ bih;
  d[8]:byte = cih;
  var dih:int = d[8]:ubyte;
  var eih:int = 24;
  var fih:int = dih << eih;
  var gih:int = fih >> eih;
  var hih:int = 90;
  var iih:int = gih ^ hih;
  d[8]:byte = iih;
  var jih:int = d[8]:ubyte;
  var kih:int = 24;
  var lih:int = jih << kih;
  var mih:int = lih >> kih;
  var nih:int = 20;
  var oih:int = mih ^ nih;
  d[8]:byte = oih;
  var pih:int = d[8]:ubyte;
  var qih:int = 24;
  var rih:int = pih << qih;
  var sih:int = rih >> qih;
  var tih:int = 30;
  var uih:int = sih ^ tih;
  d[8]:byte = uih;
  var vih:int = d[8]:ubyte;
  var wih:int = 24;
  var xih:int = vih << wih;
  var yih:int = xih >> wih;
  var zih:int = 100;
  var ajh:int = yih ^ zih;
  d[8]:byte = ajh;
  var bjh:int = d[8]:ubyte;
  var cjh:int = 24;
  var djh:int = bjh << cjh;
  var ejh:int = djh >> cjh;
  var fjh:int = 80;
  var gjh:int = ejh ^ fjh;
  d[8]:byte = gjh;
  var hjh:int = d[8]:ubyte;
  var ijh:int = 24;
  var jjh:int = hjh << ijh;
  var kjh:int = jjh >> ijh;
  var ljh:int = 67;
  var mjh:int = kjh ^ ljh;
  d[8]:byte = mjh;
  var njh:int = d[8]:ubyte;
  var ojh:int = 24;
  var pjh:int = njh << ojh;
  var qjh:int = pjh >> ojh;
  var rjh:int = 44;
  var sjh:int = qjh ^ rjh;
  d[8]:byte = sjh;
  var tjh:int = d[8]:ubyte;
  var ujh:int = 24;
  var vjh:int = tjh << ujh;
  var wjh:int = vjh >> ujh;
  var xjh:int = 46;
  var yjh:int = wjh ^ xjh;
  d[8]:byte = yjh;
  var zjh:int = 126;
  d[14]:byte = zjh;
  var akh:int = d[14]:ubyte;
  var bkh:int = 24;
  var ckh:int = akh << bkh;
  var dkh:int = ckh >> bkh;
  var ekh:int = 4;
  var fkh:int = dkh ^ ekh;
  d[14]:byte = fkh;
  var gkh:int = d[14]:ubyte;
  var hkh:int = 24;
  var ikh:int = gkh << hkh;
  var jkh:int = ikh >> hkh;
  var kkh:int = 115;
  var lkh:int = jkh ^ kkh;
  d[14]:byte = lkh;
  var mkh:int = d[14]:ubyte;
  var nkh:int = 24;
  var okh:int = mkh << nkh;
  var pkh:int = okh >> nkh;
  var qkh:int = 103;
  var rkh:int = pkh ^ qkh;
  d[14]:byte = rkh;
  var skh:int = d[14]:ubyte;
  var tkh:int = 24;
  var ukh:int = skh << tkh;
  var vkh:int = ukh >> tkh;
  var wkh:int = 23;
  var xkh:int = vkh ^ wkh;
  d[14]:byte = xkh;
  var ykh:int = d[14]:ubyte;
  var zkh:int = 24;
  var alh:int = ykh << zkh;
  var blh:int = alh >> zkh;
  var clh:int = 114;
  var dlh:int = blh ^ clh;
  d[14]:byte = dlh;
  var elh:int = d[14]:ubyte;
  var flh:int = 24;
  var glh:int = elh << flh;
  var hlh:int = glh >> flh;
  var ilh:int = 63;
  var jlh:int = hlh ^ ilh;
  d[14]:byte = jlh;
  var klh:int = d[14]:ubyte;
  var llh:int = 24;
  var mlh:int = klh << llh;
  var nlh:int = mlh >> llh;
  var olh:int = 51;
  var plh:int = nlh ^ olh;
  d[14]:byte = plh;
  var qlh:int = d[14]:ubyte;
  var rlh:int = 24;
  var slh:int = qlh << rlh;
  var tlh:int = slh >> rlh;
  var ulh:int = 55;
  var vlh:int = tlh ^ ulh;
  d[14]:byte = vlh;
  var wlh:int = d[14]:ubyte;
  var xlh:int = 24;
  var ylh:int = wlh << xlh;
  var zlh:int = ylh >> xlh;
  var amh:int = 72;
  var bmh:int = zlh ^ amh;
  d[14]:byte = bmh;
  var cmh:int = d[14]:ubyte;
  var dmh:int = 24;
  var emh:int = cmh << dmh;
  var fmh:int = emh >> dmh;
  var gmh:int = 90;
  var hmh:int = fmh ^ gmh;
  d[14]:byte = hmh;
  var imh:int = d[14]:ubyte;
  var jmh:int = 24;
  var kmh:int = imh << jmh;
  var lmh:int = kmh >> jmh;
  var mmh:int = 115;
  var nmh:int = lmh ^ mmh;
  d[14]:byte = nmh;
  var omh:int = d[14]:ubyte;
  var pmh:int = 24;
  var qmh:int = omh << pmh;
  var rmh:int = qmh >> pmh;
  var smh:int = 126;
  var tmh:int = rmh ^ smh;
  d[14]:byte = tmh;
  var umh:int = d[14]:ubyte;
  var vmh:int = 24;
  var wmh:int = umh << vmh;
  var xmh:int = wmh >> vmh;
  var ymh:int = 121;
  var zmh:int = xmh ^ ymh;
  d[14]:byte = zmh;
  var anh:int = d[14]:ubyte;
  var bnh:int = 24;
  var cnh:int = anh << bnh;
  var dnh:int = cnh >> bnh;
  var enh:int = 25;
  var fnh:int = dnh ^ enh;
  d[14]:byte = fnh;
  var gnh:int = d[14]:ubyte;
  var hnh:int = 24;
  var inh:int = gnh << hnh;
  var jnh:int = inh >> hnh;
  var knh:int = 60;
  var lnh:int = jnh ^ knh;
  d[14]:byte = lnh;
  var mnh:int = d[14]:ubyte;
  var nnh:int = 24;
  var onh:int = mnh << nnh;
  var pnh:int = onh >> nnh;
  var qnh:int = 76;
  var rnh:int = pnh ^ qnh;
  d[14]:byte = rnh;
  var snh:int = d[14]:ubyte;
  var tnh:int = 24;
  var unh:int = snh << tnh;
  var vnh:int = unh >> tnh;
  var wnh:int = 115;
  var xnh:int = vnh ^ wnh;
  d[14]:byte = xnh;
  var ynh:int = d[14]:ubyte;
  var znh:int = 24;
  var aoh:int = ynh << znh;
  var boh:int = aoh >> znh;
  var coh:int = 113;
  var doh:int = boh ^ coh;
  d[14]:byte = doh;
  var eoh:int = d[14]:ubyte;
  var foh:int = 24;
  var goh:int = eoh << foh;
  var hoh:int = goh >> foh;
  var ioh:int = 86;
  var joh:int = hoh ^ ioh;
  d[14]:byte = joh;
  var koh:int = d[14]:ubyte;
  var loh:int = 24;
  var moh:int = koh << loh;
  var noh:int = moh >> loh;
  var ooh:int = 94;
  var poh:int = noh ^ ooh;
  d[14]:byte = poh;
  var qoh:int = 44;
  d[4]:byte = qoh;
  var roh:int = d[4]:ubyte;
  var soh:int = 24;
  var toh:int = roh << soh;
  var uoh:int = toh >> soh;
  var voh:int = 23;
  var woh:int = uoh ^ voh;
  d[4]:byte = woh;
  var xoh:int = d[4]:ubyte;
  var yoh:int = 24;
  var zoh:int = xoh << yoh;
  var aph:int = zoh >> yoh;
  var bph:int = 102;
  var cph:int = aph ^ bph;
  d[4]:byte = cph;
  var dph:int = d[4]:ubyte;
  var eph:int = 24;
  var fph:int = dph << eph;
  var gph:int = fph >> eph;
  var hph:int = 39;
  var iph:int = gph ^ hph;
  d[4]:byte = iph;
  var jph:int = d[4]:ubyte;
  var kph:int = 24;
  var lph:int = jph << kph;
  var mph:int = lph >> kph;
  var nph:int = 95;
  var oph:int = mph ^ nph;
  d[4]:byte = oph;
  var pph:int = d[4]:ubyte;
  var qph:int = 24;
  var rph:int = pph << qph;
  var sph:int = rph >> qph;
  var tph:int = 60;
  var uph:int = sph ^ tph;
  d[4]:byte = uph;
  var vph:int = d[4]:ubyte;
  var wph:int = 24;
  var xph:int = vph << wph;
  var yph:int = xph >> wph;
  var zph:int = 38;
  var aqh:int = yph ^ zph;
  d[4]:byte = aqh;
  var bqh:int = d[4]:ubyte;
  var cqh:int = 24;
  var dqh:int = bqh << cqh;
  var eqh:int = dqh >> cqh;
  var fqh:int = 70;
  var gqh:int = eqh ^ fqh;
  d[4]:byte = gqh;
  var hqh:int = d[4]:ubyte;
  var iqh:int = 24;
  var jqh:int = hqh << iqh;
  var kqh:int = jqh >> iqh;
  var lqh:int = 83;
  var mqh:int = kqh ^ lqh;
  d[4]:byte = mqh;
  var nqh:int = d[4]:ubyte;
  var oqh:int = 24;
  var pqh:int = nqh << oqh;
  var qqh:int = pqh >> oqh;
  var rqh:int = 113;
  var sqh:int = qqh ^ rqh;
  d[4]:byte = sqh;
  var tqh:int = d[4]:ubyte;
  var uqh:int = 24;
  var vqh:int = tqh << uqh;
  var wqh:int = vqh >> uqh;
  var xqh:int = 79;
  var yqh:int = wqh ^ xqh;
  d[4]:byte = yqh;
  var zqh:int = d[4]:ubyte;
  var arh:int = 24;
  var brh:int = zqh << arh;
  var crh:int = brh >> arh;
  var drh:int = 54;
  var erh:int = crh ^ drh;
  d[4]:byte = erh;
  var frh:int = d[4]:ubyte;
  var grh:int = 24;
  var hrh:int = frh << grh;
  var irh:int = hrh >> grh;
  var jrh:int = 15;
  var krh:int = irh ^ jrh;
  d[4]:byte = krh;
  var lrh:int = d[4]:ubyte;
  var mrh:int = 24;
  var nrh:int = lrh << mrh;
  var orh:int = nrh >> mrh;
  var prh:int = 18;
  var qrh:int = orh ^ prh;
  d[4]:byte = qrh;
  var rrh:int = d[4]:ubyte;
  var srh:int = 24;
  var trh:int = rrh << srh;
  var urh:int = trh >> srh;
  var vrh:int = 41;
  var wrh:int = urh ^ vrh;
  d[4]:byte = wrh;
  var xrh:int = d[4]:ubyte;
  var yrh:int = 24;
  var zrh:int = xrh << yrh;
  var ash:int = zrh >> yrh;
  var bsh:int = 47;
  var csh:int = ash ^ bsh;
  d[4]:byte = csh;
  var dsh:int = d[4]:ubyte;
  var esh:int = 24;
  var fsh:int = dsh << esh;
  var gsh:int = fsh >> esh;
  var hsh:int = 12;
  var ish:int = gsh ^ hsh;
  d[4]:byte = ish;
  var jsh:int = d[4]:ubyte;
  var ksh:int = 24;
  var lsh:int = jsh << ksh;
  var msh:int = lsh >> ksh;
  var nsh:int = 19;
  var osh:int = msh ^ nsh;
  d[4]:byte = osh;
  var psh:int = d[4]:ubyte;
  var qsh:int = 24;
  var rsh:int = psh << qsh;
  var ssh:int = rsh >> qsh;
  var tsh:int = 90;
  var ush:int = ssh ^ tsh;
  d[4]:byte = ush;
  var vsh:int = d[4]:ubyte;
  var wsh:int = 24;
  var xsh:int = vsh << wsh;
  var ysh:int = xsh >> wsh;
  var zsh:int = 101;
  var ath:int = ysh ^ zsh;
  d[4]:byte = ath;
  var bth:int = d[4]:ubyte;
  var cth:int = 24;
  var dth:int = bth << cth;
  var eth:int = dth >> cth;
  var fth:int = 77;
  var gth:int = eth ^ fth;
  d[4]:byte = gth;
  var hth:int = 117;
  d[49]:byte = hth;
  var ith:int = d[49]:ubyte;
  var jth:int = 24;
  var kth:int = ith << jth;
  var lth:int = kth >> jth;
  var mth:int = 118;
  var nth:int = lth ^ mth;
  d[49]:byte = nth;
  var oth:int = d[49]:ubyte;
  var pth:int = 24;
  var qth:int = oth << pth;
  var rth:int = qth >> pth;
  var sth:int = 22;
  var tth:int = rth ^ sth;
  d[49]:byte = tth;
  var uth:int = d[49]:ubyte;
  var vth:int = 24;
  var wth:int = uth << vth;
  var xth:int = wth >> vth;
  var yth:int = 127;
  var zth:int = xth ^ yth;
  d[49]:byte = zth;
  var auh:int = d[49]:ubyte;
  var buh:int = 24;
  var cuh:int = auh << buh;
  var duh:int = cuh >> buh;
  var euh:int = 59;
  var fuh:int = duh ^ euh;
  d[49]:byte = fuh;
  var guh:int = d[49]:ubyte;
  var huh:int = 24;
  var iuh:int = guh << huh;
  var juh:int = iuh >> huh;
  var kuh:int = 64;
  var luh:int = juh ^ kuh;
  d[49]:byte = luh;
  var muh:int = d[49]:ubyte;
  var nuh:int = 24;
  var ouh:int = muh << nuh;
  var puh:int = ouh >> nuh;
  var quh:int = 35;
  var ruh:int = puh ^ quh;
  d[49]:byte = ruh;
  var suh:int = d[49]:ubyte;
  var tuh:int = 24;
  var uuh:int = suh << tuh;
  var vuh:int = uuh >> tuh;
  var wuh:int = 62;
  var xuh:int = vuh ^ wuh;
  d[49]:byte = xuh;
  var yuh:int = d[49]:ubyte;
  var zuh:int = 24;
  var avh:int = yuh << zuh;
  var bvh:int = avh >> zuh;
  var cvh:int = 48;
  var dvh:int = bvh ^ cvh;
  d[49]:byte = dvh;
  var evh:int = d[49]:ubyte;
  var fvh:int = 24;
  var gvh:int = evh << fvh;
  var hvh:int = gvh >> fvh;
  var ivh:int = 80;
  var jvh:int = hvh ^ ivh;
  d[49]:byte = jvh;
  var kvh:int = d[49]:ubyte;
  var lvh:int = 24;
  var mvh:int = kvh << lvh;
  var nvh:int = mvh >> lvh;
  var ovh:int = 27;
  var pvh:int = nvh ^ ovh;
  d[49]:byte = pvh;
  var qvh:int = d[49]:ubyte;
  var rvh:int = 24;
  var svh:int = qvh << rvh;
  var tvh:int = svh >> rvh;
  var uvh:int = 66;
  var vvh:int = tvh ^ uvh;
  d[49]:byte = vvh;
  var wvh:int = d[49]:ubyte;
  var xvh:int = 24;
  var yvh:int = wvh << xvh;
  var zvh:int = yvh >> xvh;
  var awh:int = 25;
  var bwh:int = zvh ^ awh;
  d[49]:byte = bwh;
  var cwh:int = d[49]:ubyte;
  var dwh:int = 24;
  var ewh:int = cwh << dwh;
  var fwh:int = ewh >> dwh;
  var gwh:int = 68;
  var hwh:int = fwh ^ gwh;
  d[49]:byte = hwh;
  var iwh:int = d[49]:ubyte;
  var jwh:int = 24;
  var kwh:int = iwh << jwh;
  var lwh:int = kwh >> jwh;
  var mwh:int = 117;
  var nwh:int = lwh ^ mwh;
  d[49]:byte = nwh;
  var owh:int = d[49]:ubyte;
  var pwh:int = 24;
  var qwh:int = owh << pwh;
  var rwh:int = qwh >> pwh;
  var swh:int = 29;
  var twh:int = rwh ^ swh;
  d[49]:byte = twh;
  var uwh:int = d[49]:ubyte;
  var vwh:int = 24;
  var wwh:int = uwh << vwh;
  var xwh:int = wwh >> vwh;
  var ywh:int = 121;
  var zwh:int = xwh ^ ywh;
  d[49]:byte = zwh;
  var axh:int = d[49]:ubyte;
  var bxh:int = 24;
  var cxh:int = axh << bxh;
  var dxh:int = cxh >> bxh;
  var exh:int = 123;
  var fxh:int = dxh ^ exh;
  d[49]:byte = fxh;
  var gxh:int = d[49]:ubyte;
  var hxh:int = 24;
  var ixh:int = gxh << hxh;
  var jxh:int = ixh >> hxh;
  var kxh:int = 39;
  var lxh:int = jxh ^ kxh;
  d[49]:byte = lxh;
  var mxh:int = d[49]:ubyte;
  var nxh:int = 24;
  var oxh:int = mxh << nxh;
  var pxh:int = oxh >> nxh;
  var qxh:int = 14;
  var rxh:int = pxh ^ qxh;
  d[49]:byte = rxh;
  var sxh:int = d[49]:ubyte;
  var txh:int = 24;
  var uxh:int = sxh << txh;
  var vxh:int = uxh >> txh;
  var wxh:int = 24;
  var xxh:int = vxh ^ wxh;
  d[49]:byte = xxh;
  var yxh:int = 59;
  d[43]:byte = yxh;
  var zxh:int = d[43]:ubyte;
  var ayh:int = 24;
  var byh:int = zxh << ayh;
  var cyh:int = byh >> ayh;
  var dyh:int = 7;
  var eyh:int = cyh ^ dyh;
  d[43]:byte = eyh;
  var fyh:int = d[43]:ubyte;
  var gyh:int = 24;
  var hyh:int = fyh << gyh;
  var iyh:int = hyh >> gyh;
  var jyh:int = 33;
  var kyh:int = iyh ^ jyh;
  d[43]:byte = kyh;
  var lyh:int = d[43]:ubyte;
  var myh:int = 24;
  var nyh:int = lyh << myh;
  var oyh:int = nyh >> myh;
  var pyh:int = 46;
  var qyh:int = oyh ^ pyh;
  d[43]:byte = qyh;
  var ryh:int = d[43]:ubyte;
  var syh:int = 24;
  var tyh:int = ryh << syh;
  var uyh:int = tyh >> syh;
  var vyh:int = 22;
  var wyh:int = uyh ^ vyh;
  d[43]:byte = wyh;
  var xyh:int = d[43]:ubyte;
  var yyh:int = 24;
  var zyh:int = xyh << yyh;
  var azh:int = zyh >> yyh;
  var bzh:int = 100;
  var czh:int = azh ^ bzh;
  d[43]:byte = czh;
  var dzh:int = d[43]:ubyte;
  var ezh:int = 24;
  var fzh:int = dzh << ezh;
  var gzh:int = fzh >> ezh;
  var hzh:int = 21;
  var izh:int = gzh ^ hzh;
  d[43]:byte = izh;
  var jzh:int = d[43]:ubyte;
  var kzh:int = 24;
  var lzh:int = jzh << kzh;
  var mzh:int = lzh >> kzh;
  var nzh:int = 79;
  var ozh:int = mzh ^ nzh;
  d[43]:byte = ozh;
  var pzh:int = d[43]:ubyte;
  var qzh:int = 24;
  var rzh:int = pzh << qzh;
  var szh:int = rzh >> qzh;
  var tzh:int = 43;
  var uzh:int = szh ^ tzh;
  d[43]:byte = uzh;
  var vzh:int = d[43]:ubyte;
  var wzh:int = 24;
  var xzh:int = vzh << wzh;
  var yzh:int = xzh >> wzh;
  var zzh:int = 73;
  var aai:int = yzh ^ zzh;
  d[43]:byte = aai;
  var bai:int = d[43]:ubyte;
  var cai:int = 24;
  var dai:int = bai << cai;
  var eai:int = dai >> cai;
  var fai:int = 4;
  var gai:int = eai ^ fai;
  d[43]:byte = gai;
  var hai:int = d[43]:ubyte;
  var iai:int = 24;
  var jai:int = hai << iai;
  var kai:int = jai >> iai;
  var lai:int = 18;
  var mai:int = kai ^ lai;
  d[43]:byte = mai;
  var nai:int = d[43]:ubyte;
  var oai:int = 24;
  var pai:int = nai << oai;
  var qai:int = pai >> oai;
  var rai:int = 116;
  var sai:int = qai ^ rai;
  d[43]:byte = sai;
  var tai:int = d[43]:ubyte;
  var uai:int = 24;
  var vai:int = tai << uai;
  var wai:int = vai >> uai;
  var xai:int = 46;
  var yai:int = wai ^ xai;
  d[43]:byte = yai;
  var zai:int = d[43]:ubyte;
  var abi:int = 24;
  var bbi:int = zai << abi;
  var cbi:int = bbi >> abi;
  var dbi:int = 26;
  var ebi:int = cbi ^ dbi;
  d[43]:byte = ebi;
  var fbi:int = d[43]:ubyte;
  var gbi:int = 24;
  var hbi:int = fbi << gbi;
  var ibi:int = hbi >> gbi;
  var jbi:int = 14;
  var kbi:int = ibi ^ jbi;
  d[43]:byte = kbi;
  var lbi:int = d[43]:ubyte;
  var mbi:int = 24;
  var nbi:int = lbi << mbi;
  var obi:int = nbi >> mbi;
  var pbi:int = 15;
  var qbi:int = obi ^ pbi;
  d[43]:byte = qbi;
  var rbi:int = d[43]:ubyte;
  var sbi:int = 24;
  var tbi:int = rbi << sbi;
  var ubi:int = tbi >> sbi;
  var vbi:int = 11;
  var wbi:int = ubi ^ vbi;
  d[43]:byte = wbi;
  var xbi:int = d[43]:ubyte;
  var ybi:int = 24;
  var zbi:int = xbi << ybi;
  var aci:int = zbi >> ybi;
  var bci:int = 26;
  var cci:int = aci ^ bci;
  d[43]:byte = cci;
  var dci:int = d[43]:ubyte;
  var eci:int = 24;
  var fci:int = dci << eci;
  var gci:int = fci >> eci;
  var hci:int = 108;
  var ici:int = gci ^ hci;
  d[43]:byte = ici;
  var jci:int = d[43]:ubyte;
  var kci:int = 24;
  var lci:int = jci << kci;
  var mci:int = lci >> kci;
  var nci:int = 54;
  var oci:int = mci ^ nci;
  d[43]:byte = oci;
  var pci:int = 8;
  d[38]:byte = pci;
  var qci:int = d[38]:ubyte;
  var rci:int = 24;
  var sci:int = qci << rci;
  var tci:int = sci >> rci;
  var uci:int = 82;
  var vci:int = tci ^ uci;
  d[38]:byte = vci;
  var wci:int = d[38]:ubyte;
  var xci:int = 24;
  var yci:int = wci << xci;
  var zci:int = yci >> xci;
  var adi:int = 102;
  var bdi:int = zci ^ adi;
  d[38]:byte = bdi;
  var cdi:int = d[38]:ubyte;
  var ddi:int = 24;
  var edi:int = cdi << ddi;
  var fdi:int = edi >> ddi;
  var gdi:int = 83;
  var hdi:int = fdi ^ gdi;
  d[38]:byte = hdi;
  var idi:int = d[38]:ubyte;
  var jdi:int = 24;
  var kdi:int = idi << jdi;
  var ldi:int = kdi >> jdi;
  var mdi:int = 47;
  var ndi:int = ldi ^ mdi;
  d[38]:byte = ndi;
  var odi:int = d[38]:ubyte;
  var pdi:int = 24;
  var qdi:int = odi << pdi;
  var rdi:int = qdi >> pdi;
  var sdi:int = 108;
  var tdi:int = rdi ^ sdi;
  d[38]:byte = tdi;
  var udi:int = d[38]:ubyte;
  var vdi:int = 24;
  var wdi:int = udi << vdi;
  var xdi:int = wdi >> vdi;
  var ydi:int = 47;
  var zdi:int = xdi ^ ydi;
  d[38]:byte = zdi;
  var aei:int = d[38]:ubyte;
  var bei:int = 24;
  var cei:int = aei << bei;
  var dei:int = cei >> bei;
  var eei:int = 100;
  var fei:int = dei ^ eei;
  d[38]:byte = fei;
  var gei:int = d[38]:ubyte;
  var hei:int = 24;
  var iei:int = gei << hei;
  var jei:int = iei >> hei;
  var kei:int = 108;
  var lei:int = jei ^ kei;
  d[38]:byte = lei;
  var mei:int = d[38]:ubyte;
  var nei:int = 24;
  var oei:int = mei << nei;
  var pei:int = oei >> nei;
  var qei:int = 77;
  var rei:int = pei ^ qei;
  d[38]:byte = rei;
  var sei:int = d[38]:ubyte;
  var tei:int = 24;
  var uei:int = sei << tei;
  var vei:int = uei >> tei;
  var wei:int = 0;
  var xei:int = vei ^ wei;
  d[38]:byte = xei;
  var yei:int = d[38]:ubyte;
  var zei:int = 24;
  var afi:int = yei << zei;
  var bfi:int = afi >> zei;
  var cfi:int = 13;
  var dfi:int = bfi ^ cfi;
  d[38]:byte = dfi;
  var efi:int = d[38]:ubyte;
  var ffi:int = 24;
  var gfi:int = efi << ffi;
  var hfi:int = gfi >> ffi;
  var ifi:int = 12;
  var jfi:int = hfi ^ ifi;
  d[38]:byte = jfi;
  var kfi:int = d[38]:ubyte;
  var lfi:int = 24;
  var mfi:int = kfi << lfi;
  var nfi:int = mfi >> lfi;
  var ofi:int = 19;
  var pfi:int = nfi ^ ofi;
  d[38]:byte = pfi;
  var qfi:int = d[38]:ubyte;
  var rfi:int = 24;
  var sfi:int = qfi << rfi;
  var tfi:int = sfi >> rfi;
  var ufi:int = 98;
  var vfi:int = tfi ^ ufi;
  d[38]:byte = vfi;
  var wfi:int = d[38]:ubyte;
  var xfi:int = 24;
  var yfi:int = wfi << xfi;
  var zfi:int = yfi >> xfi;
  var agi:int = 19;
  var bgi:int = zfi ^ agi;
  d[38]:byte = bgi;
  var cgi:int = d[38]:ubyte;
  var dgi:int = 24;
  var egi:int = cgi << dgi;
  var fgi:int = egi >> dgi;
  var ggi:int = 79;
  var hgi:int = fgi ^ ggi;
  d[38]:byte = hgi;
  var igi:int = d[38]:ubyte;
  var jgi:int = 24;
  var kgi:int = igi << jgi;
  var lgi:int = kgi >> jgi;
  var mgi:int = 113;
  var ngi:int = lgi ^ mgi;
  d[38]:byte = ngi;
  var ogi:int = d[38]:ubyte;
  var pgi:int = 24;
  var qgi:int = ogi << pgi;
  var rgi:int = qgi >> pgi;
  var sgi:int = 39;
  var tgi:int = rgi ^ sgi;
  d[38]:byte = tgi;
  var ugi:int = d[38]:ubyte;
  var vgi:int = 24;
  var wgi:int = ugi << vgi;
  var xgi:int = wgi >> vgi;
  var ygi:int = 106;
  var zgi:int = xgi ^ ygi;
  d[38]:byte = zgi;
  var ahi:int = d[38]:ubyte;
  var bhi:int = 24;
  var chi:int = ahi << bhi;
  var dhi:int = chi >> bhi;
  var ehi:int = 36;
  var fhi:int = dhi ^ ehi;
  d[38]:byte = fhi;
  var ghi:int = 99;
  d[42]:byte = ghi;
  var hhi:int = d[42]:ubyte;
  var ihi:int = 24;
  var jhi:int = hhi << ihi;
  var khi:int = jhi >> ihi;
  var lhi:int = 112;
  var mhi:int = khi ^ lhi;
  d[42]:byte = mhi;
  var nhi:int = d[42]:ubyte;
  var ohi:int = 24;
  var phi:int = nhi << ohi;
  var qhi:int = phi >> ohi;
  var rhi:int = 8;
  var shi:int = qhi ^ rhi;
  d[42]:byte = shi;
  var thi:int = d[42]:ubyte;
  var uhi:int = 24;
  var vhi:int = thi << uhi;
  var whi:int = vhi >> uhi;
  var xhi:int = 109;
  var yhi:int = whi ^ xhi;
  d[42]:byte = yhi;
  var zhi:int = d[42]:ubyte;
  var aii:int = 24;
  var bii:int = zhi << aii;
  var cii:int = bii >> aii;
  var dii:int = 66;
  var eii:int = cii ^ dii;
  d[42]:byte = eii;
  var fii:int = d[42]:ubyte;
  var gii:int = 24;
  var hii:int = fii << gii;
  var iii:int = hii >> gii;
  var jii:int = 64;
  var kii:int = iii ^ jii;
  d[42]:byte = kii;
  var lii:int = d[42]:ubyte;
  var mii:int = 24;
  var nii:int = lii << mii;
  var oii:int = nii >> mii;
  var pii:int = 76;
  var qii:int = oii ^ pii;
  d[42]:byte = qii;
  var rii:int = d[42]:ubyte;
  var sii:int = 24;
  var tii:int = rii << sii;
  var uii:int = tii >> sii;
  var vii:int = 31;
  var wii:int = uii ^ vii;
  d[42]:byte = wii;
  var xii:int = d[42]:ubyte;
  var yii:int = 24;
  var zii:int = xii << yii;
  var aji:int = zii >> yii;
  var bji:int = 85;
  var cji:int = aji ^ bji;
  d[42]:byte = cji;
  var dji:int = d[42]:ubyte;
  var eji:int = 24;
  var fji:int = dji << eji;
  var gji:int = fji >> eji;
  var hji:int = 98;
  var iji:int = gji ^ hji;
  d[42]:byte = iji;
  var jji:int = d[42]:ubyte;
  var kji:int = 24;
  var lji:int = jji << kji;
  var mji:int = lji >> kji;
  var nji:int = 22;
  var oji:int = mji ^ nji;
  d[42]:byte = oji;
  var pji:int = d[42]:ubyte;
  var qji:int = 24;
  var rji:int = pji << qji;
  var sji:int = rji >> qji;
  var tji:int = 125;
  var uji:int = sji ^ tji;
  d[42]:byte = uji;
  var vji:int = d[42]:ubyte;
  var wji:int = 24;
  var xji:int = vji << wji;
  var yji:int = xji >> wji;
  var zji:int = 39;
  var aki:int = yji ^ zji;
  d[42]:byte = aki;
  var bki:int = d[42]:ubyte;
  var cki:int = 24;
  var dki:int = bki << cki;
  var eki:int = dki >> cki;
  var fki:int = 13;
  var gki:int = eki ^ fki;
  d[42]:byte = gki;
  var hki:int = d[42]:ubyte;
  var iki:int = 24;
  var jki:int = hki << iki;
  var kki:int = jki >> iki;
  var lki:int = 5;
  var mki:int = kki ^ lki;
  d[42]:byte = mki;
  var nki:int = d[42]:ubyte;
  var oki:int = 24;
  var pki:int = nki << oki;
  var qki:int = pki >> oki;
  var rki:int = 51;
  var ski:int = qki ^ rki;
  d[42]:byte = ski;
  var tki:int = d[42]:ubyte;
  var uki:int = 24;
  var vki:int = tki << uki;
  var wki:int = vki >> uki;
  var xki:int = 100;
  var yki:int = wki ^ xki;
  d[42]:byte = yki;
  var zki:int = d[42]:ubyte;
  var ali:int = 24;
  var bli:int = zki << ali;
  var cli:int = bli >> ali;
  var dli:int = 75;
  var eli:int = cli ^ dli;
  d[42]:byte = eli;
  var fli:int = d[42]:ubyte;
  var gli:int = 24;
  var hli:int = fli << gli;
  var ili:int = hli >> gli;
  var jli:int = 9;
  var kli:int = ili ^ jli;
  d[42]:byte = kli;
  var lli:int = d[42]:ubyte;
  var mli:int = 24;
  var nli:int = lli << mli;
  var oli:int = nli >> mli;
  var pli:int = 46;
  var qli:int = oli ^ pli;
  d[42]:byte = qli;
  var rli:int = d[42]:ubyte;
  var sli:int = 24;
  var tli:int = rli << sli;
  var uli:int = tli >> sli;
  var vli:int = 7;
  var wli:int = uli ^ vli;
  d[42]:byte = wli;
  var xli:int = d;
  var yli:int = d[18]:int;
  var zli:int = strcmp(xli, yli);
  if (zli) goto B_b;
  var ami:int = 1;
  d[19]:int = ami;
  goto B_a;
  label B_b:
  var bmi:int = 0;
  d[19]:int = bmi;
  label B_a:
  var cmi:int = d[19]:int;
  var dmi:int = 80;
  var emi:int = d + dmi;
  g_a = emi;
  return cmi;
}

export function strcmp(a:{ a:ubyte, b:ubyte }, b:{ a:ubyte, b:ubyte }):int {
  var d:int;
  var c:int = b.a;
  d = a.a;
  if (eqz(d)) goto B_a;
  if (d != (c & 255)) goto B_a;
  loop L_b {
    c = b.b;
    d = a.b;
    if (eqz(d)) goto B_a;
    b = b + 1;
    a = a + 1;
    if (d == (c & 255)) continue L_b;
  }
  label B_a:
  return d - (c & 255);
}

function f_e(a:ubyte_ptr):int {
  var d:int;
  var c:int_ptr;
  var b:ubyte_ptr = a;
  if (eqz(a & 3)) goto B_b;
  if (a[0]) goto B_c;
  return a - a;
  label B_c:
  b = a;
  loop L_d {
    b = b + 1;
    if (eqz(b & 3)) goto B_b;
    if (b[0]) continue L_d;
    goto B_a;
  }
  unreachable;
  label B_b:
  loop L_e {
    c = b;
    b = c + 4;
    if (
      ((16843008 - (d = c[0]) | d) & -2139062144) == -2139062144) continue L_e;
  }
  loop L_f {
    b = c;
    c = b + 1;
    if (b[0]) continue L_f;
  }
  label B_a:
  return b - a;
}

function f_f(a:int) {
  g_b = a
}

function f_g():int {
  return g_b
}

function f_h(a:int) {
}

function f_i(a:int) {
}

function f_j():int {
  f_h(65540);
  return 65544;
}

function f_k() {
  f_i(65540)
}

function f_l(a:int):int {
  return 1
}

function f_m(a:int) {
}

export function fflush(a:int):int {
  var c:int;
  var b:int;
  var d:int;
  if (a) goto B_a;
  b = 0;
  if (eqz(0[16387]:int)) goto B_b;
  b = fflush(0[16387]:int);
  label B_b:
  if (eqz(0[16387]:int)) goto B_c;
  b = fflush(0[16387]:int) | b;
  label B_c:
  a = f_j()[0]:int;
  if (eqz(a)) goto B_d;
  loop L_e {
    c = 0;
    if (a[19]:int < 0) goto B_f;
    c = f_l(a);
    label B_f:
    if (a[5]:int == a[7]:int) goto B_g;
    b = fflush(a) | b;
    label B_g:
    if (eqz(c)) goto B_h;
    f_m(a);
    label B_h:
    a = a[14]:int;
    if (a) continue L_e;
  }
  label B_d:
  f_k();
  return b;
  label B_a:
  if (a[19]:int >= 0) goto B_j;
  c = 1;
  goto B_i;
  label B_j:
  c = eqz(f_l(a));
  label B_i:
  if (a[5]:int == a[7]:int) goto B_m;
  call_indirect(a, 0, 0, a[9]:int);
  if (a[5]:int) goto B_m;
  b = -1;
  if (eqz(c)) goto B_l;
  goto B_k;
  label B_m:
  b = a[1]:int;
  if (b == (d = a[2]:int)) goto B_n;
  call_indirect(a, i64_extend_i32_s(b - d), 1, a[10]:int);
  label B_n:
  b = 0;
  a[7]:int = 0;
  a[2]:long = 0L;
  a[1]:long@4 = 0L;
  if (c) goto B_k;
  label B_l:
  f_m(a);
  label B_k:
  return b;
}

export function emscripten_stack_init() {
  g_d = 65536;
  g_c = 0 + 15 & -16;
}

export function emscripten_stack_get_free():int {
  return g_a - g_c
}

export function emscripten_stack_get_base():int {
  return g_d
}

export function emscripten_stack_get_end():int {
  return g_c
}

export function emscripten_stack_restore(a:int) {
  g_a = a
}

export function emscripten_stack_alloc(a:int):int {
  var b:int = g_a - a & -16;
  g_a = b;
  return b;
}

export function emscripten_stack_get_current():int {
  return g_a
}

function f_v():int {
  return memory_size() << 16
}

function f_w():int {
  return 65552
}

function f_x(a:int):int {
  var c:int;
  var b:int = d_a[0]:int;
  a = b + (c = a + 7 & -8);
  if (eqz(c)) goto B_c;
  if (a <= b) goto B_b;
  label B_c:
  if (a <= f_v()) goto B_a;
  if (env_emscripten_resize_heap(a)) goto B_a;
  label B_b:
  f_w()[0]:int = 48;
  return -1;
  label B_a:
  d_a[0]:int = a;
  return b;
}

export function malloc(a:int):int {
  var d:{ a:int, b:int, c:int }
  var e:int;
  var f:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int }
  var g:int;
  var h:int;
  var c:int_ptr;
  var i:int;
  var l:int_ptr;
  var k:int_ptr;
  var j:int;
  var b:int = g_a - 16;
  g_a = b;
  if (a > 244) goto B_k;
  c = 0[16389]:int;
  a = c >> (e = (d = select_if(16, a + 11 & 504, a < 11)) >> 3);
  if (eqz(a & 3)) goto B_l;
  d = ((a ^ -1) & 1) + e;
  e = d << 3;
  a = e + 65596;
  if (a != (f = (e = (e + 65604)[0]:int)[2]:int)) goto B_n;
  0[16389]:int = c & -2 << d;
  goto B_m;
  label B_n:
  f.d = a;
  a[2]:int = f;
  label B_m:
  a = e + 8;
  e[1]:int = (d = d << 3) | 3;
  e = e + d;
  e[1]:int = e[1]:int | 1;
  goto B_a;
  label B_l:
  if (d <= (g = 0[16391]:int)) goto B_j;
  if (eqz(a)) goto B_o;
  e = ctz(a << e & ((a = 2 << e) | 0 - a));
  a = e << 3;
  f = a + 65596;
  if (f != (h = (a = (a + 65604)[0]:int)[2]:int)) goto B_q;
  0[16389]:int = (c = c & -2 << e);
  goto B_p;
  label B_q:
  h[3]:int = f;
  f.c = h;
  label B_p:
  a[1]:int = d | 3;
  h = a + d;
  h[1]:int = (d = (e = e << 3) - d) | 1;
  (a + e)[0]:int = d;
  if (eqz(g)) goto B_r;
  f = (g & -8) + 65596;
  e = 0[16394]:int;
  if (c & (i = 1 << (g >> 3))) goto B_t;
  0[16389]:int = c | i;
  i = f;
  goto B_s;
  label B_t:
  i = f.c;
  label B_s:
  f.c = e;
  i[3]:int = e;
  e[3]:int = f;
  e[2]:int = i;
  label B_r:
  a = a + 8;
  0[16394]:int = h;
  0[16391]:int = d;
  goto B_a;
  label B_o:
  j = 0[16390]:int;
  if (eqz(j)) goto B_j;
  h = ((ctz(j) << 2) + 65860)[0]:int;
  e = (h[1]:int & -8) - d;
  f = h;
  loop L_v {
    a = f.e;
    if (a) goto B_w;
    a = f.f;
    if (eqz(a)) goto B_u;
    label B_w:
    f = (a[1]:int & -8) - d;
    e = select_if(f, e, f = f < e);
    h = select_if(a, h, f);
    f = a;
    continue L_v;
  }
  unreachable;
  label B_u:
  k = h[6]:int;
  a = h[3]:int;
  if (a == h) goto B_x;
  f = h[2]:int;
  f.d = a;
  a[2]:int = f;
  goto B_b;
  label B_x:
  f = h[5]:int;
  if (eqz(f)) goto B_z;
  i = h + 20;
  goto B_y;
  label B_z:
  f = h[4]:int;
  if (eqz(f)) goto B_i;
  i = h + 16;
  label B_y:
  loop L_aa {
    l = i;
    a = f;
    i = a + 20;
    f = a[5]:int;
    if (f) continue L_aa;
    i = a + 16;
    f = a[4]:int;
    if (f) continue L_aa;
  }
  l[0] = 0;
  goto B_b;
  label B_k:
  d = -1;
  if (a > -65) goto B_j;
  e = a + 11;
  d = e & -8;
  k = 0[16390]:int;
  if (eqz(k)) goto B_j;
  g = 31;
  if (a > 16777204) goto B_ba;
  g = (d >> 38 - (a = clz(e >> 8)) & 1) - (a << 1) + 62;
  label B_ba:
  e = 0 - d;
  f = ((g << 2) + 65860)[0]:int;
  if (f) goto B_fa;
  a = 0;
  i = 0;
  goto B_ea;
  label B_fa:
  a = 0;
  h = d << select_if(0, 25 - (g >> 1), g == 31);
  i = 0;
  loop L_ga {
    c = (f.b & -8) - d;
    if (c >= e) goto B_ha;
    e = c;
    i = f;
    if (c) goto B_ha;
    e = 0;
    i = f;
    a = f;
    goto B_da;
    label B_ha:
    a = 
      select_if(
        select_if(a, c = f.f, c == (l = (f + (h >> 29 & 4) + 16)[0]:int)),
        a,
        c);
    h = h << 1;
    f = l;
    if (l) continue L_ga;
  }
  label B_ea:
  if (a | i) goto B_ia;
  i = 0;
  a = 2 << g;
  a = (a | 0 - a) & k;
  if (eqz(a)) goto B_j;
  a = ((ctz(a) << 2) + 65860)[0]:int;
  label B_ia:
  if (eqz(a)) goto B_ca;
  label B_da:
  loop L_ja {
    c = (a[1]:int & -8) - d;
    h = c < e;
    f = a[4]:int;
    if (f) goto B_ka;
    f = a[5]:int;
    label B_ka:
    e = select_if(c, e, h);
    i = select_if(a, i, h);
    a = f;
    if (f) continue L_ja;
  }
  label B_ca:
  if (eqz(i)) goto B_j;
  if (e >= 0[16391]:int - d) goto B_j;
  l = i[6]:int;
  a = i[3]:int;
  if (a == i) goto B_la;
  f = i[2]:int;
  f.d = a;
  a[2]:int = f;
  goto B_c;
  label B_la:
  f = i[5]:int;
  if (eqz(f)) goto B_na;
  h = i + 20;
  goto B_ma;
  label B_na:
  f = i[4]:int;
  if (eqz(f)) goto B_h;
  h = i + 16;
  label B_ma:
  loop L_oa {
    c = h;
    a = f;
    h = a + 20;
    f = a[5]:int;
    if (f) continue L_oa;
    h = a + 16;
    f = a[4]:int;
    if (f) continue L_oa;
  }
  c[0] = 0;
  goto B_c;
  label B_j:
  a = 0[16391]:int;
  if (a < d) goto B_pa;
  e = 0[16394]:int;
  f = a - d;
  if (f < 16) goto B_ra;
  h = e + d;
  h[1]:int = f | 1;
  (e + a)[0]:int = f;
  e[1]:int = d | 3;
  goto B_qa;
  label B_ra:
  e[1]:int = a | 3;
  a = e + a;
  a[1]:int = a[1]:int | 1;
  h = 0;
  f = 0;
  label B_qa:
  0[16391]:int = f;
  0[16394]:int = h;
  a = e + 8;
  goto B_a;
  label B_pa:
  h = 0[16392]:int;
  if (h <= d) goto B_sa;
  0[16392]:int = (e = h - d);
  0[16395]:int = (f = (a = 0[16395]:int) + d);
  f.b = e | 1;
  a[1]:int = d | 3;
  a = a + 8;
  goto B_a;
  label B_sa:
  if (eqz(0[16507]:int)) goto B_ua;
  e = 0[16509]:int;
  goto B_ta;
  label B_ua:
  0[16510]:long@4 = -1L;
  0[16508]:long@4 = 17592186048512L;
  0[16507]:int = (b + 12 & -16) ^ 1431655768;
  0[16512]:int = 0;
  0[16500]:int = 0;
  e = 4096;
  label B_ta:
  a = 0;
  c = e + (g = d + 47);
  i = c & (l = 0 - e);
  if (i <= d) goto B_a;
  a = 0;
  e = 0[16499]:int;
  if (eqz(e)) goto B_va;
  f = 0[16497]:int;
  k = f + i;
  if (k <= f) goto B_a;
  if (k > e) goto B_a;
  label B_va:
  if (0[66000]:ubyte & 4) goto B_xa;
  e = 0[16395]:int;
  if (eqz(e)) goto B_cb;
  a = 66004;
  loop L_db {
    f = a[0]:int;
    if (f > e) goto B_eb;
    if (f + a[1]:int > e) goto B_bb;
    label B_eb:
    a = a[2]:int;
    if (a) continue L_db;
  }
  label B_cb:
  h = f_x(0);
  if (h == -1) goto B_ya;
  c = i;
  a = 0[16508]:int;
  e = a + -1;
  if (eqz(e & h)) goto B_fb;
  c = i - h + (e + h & 0 - a);
  label B_fb:
  if (c <= d) goto B_ya;
  a = 0[16499]:int;
  if (eqz(a)) goto B_gb;
  e = 0[16497]:int;
  f = e + c;
  if (f <= e) goto B_ya;
  if (f > a) goto B_ya;
  label B_gb:
  a = f_x(c);
  if (a != h) goto B_ab;
  goto B_wa;
  label B_bb:
  c = c - h & l;
  h = f_x(c);
  if (h == a[0]:int + a[1]:int) goto B_za;
  a = h;
  label B_ab:
  if (a == -1) goto B_ya;
  if (c < d + 48) goto B_hb;
  h = a;
  goto B_wa;
  label B_hb:
  e = g - c + (e = 0[16509]:int) & 0 - e;
  if (f_x(e) == -1) goto B_ya;
  c = e + c;
  h = a;
  goto B_wa;
  label B_za:
  if (h != -1) goto B_wa;
  label B_ya:
  0[16500]:int = 0[16500]:int | 4;
  label B_xa:
  h = f_x(i);
  a = f_x(0);
  if (h == -1) goto B_e;
  if (a == -1) goto B_e;
  if (h >= a) goto B_e;
  c = a - h;
  if (c <= d + 40) goto B_e;
  label B_wa:
  0[16497]:int = (a = 0[16497]:int + c);
  if (a <= 0[16498]:int) goto B_ib;
  0[16498]:int = a;
  label B_ib:
  e = 0[16395]:int;
  if (eqz(e)) goto B_kb;
  a = 66004;
  loop L_lb {
    if (h == (f = a[0]:int) + (i = a[1]:int)) goto B_jb;
    a = a[2]:int;
    if (a) continue L_lb;
    goto B_g;
  }
  unreachable;
  label B_kb:
  a = 0[16393]:int;
  if (eqz(a)) goto B_nb;
  if (h >= a) goto B_mb;
  label B_nb:
  0[16393]:int = h;
  label B_mb:
  a = 0;
  0[16502]:int = c;
  0[16501]:int = h;
  0[16397]:int = -1;
  0[16398]:int = 0[16507]:int;
  0[16504]:int = 0;
  loop L_ob {
    e = a << 3;
    (e + 65604)[0]:int = (f = e + 65596);
    (e + 65608)[0]:int = f;
    a = a + 1;
    if (a != 32) continue L_ob;
  }
  0[16392]:int = (f = (a = c + -40) - (e = -8 - h & 7));
  0[16395]:int = (e = h + e);
  e[1]:int = f | 1;
  (h + a)[1]:int = 40;
  0[16396]:int = 0[16511]:int;
  goto B_f;
  label B_jb:
  if (e >= h) goto B_g;
  if (e < f) goto B_g;
  if (a[3]:int & 8) goto B_g;
  a[1]:int = i + c;
  0[16395]:int = (f = e + (a = -8 - e & 7));
  0[16392]:int = (a = (h = 0[16392]:int + c) - a);
  f.b = a | 1;
  (e + h)[1]:int = 40;
  0[16396]:int = 0[16511]:int;
  goto B_f;
  label B_i:
  a = 0;
  goto B_b;
  label B_h:
  a = 0;
  goto B_c;
  label B_g:
  if (h >= 0[16393]:int) goto B_pb;
  0[16393]:int = h;
  label B_pb:
  f = h + c;
  a = 66004;
  loop L_sb {
    i = a[0]:int;
    if (i == f) goto B_rb;
    a = a[2]:int;
    if (a) continue L_sb;
    goto B_qb;
  }
  unreachable;
  label B_rb:
  if (eqz(a[12]:ubyte & 8)) goto B_d;
  label B_qb:
  a = 66004;
  loop L_ub {
    f = a[0]:int;
    if (f > e) goto B_vb;
    f = f + a[1]:int;
    if (f > e) goto B_tb;
    label B_vb:
    a = a[2]:int;
    continue L_ub;
  }
  unreachable;
  label B_tb:
  0[16392]:int = (l = (a = c + -40) - (i = -8 - h & 7));
  0[16395]:int = (i = h + i);
  i[1]:int = l | 1;
  (h + a)[1]:int = 40;
  0[16396]:int = 0[16511]:int;
  i = select_if(e, a = f + (39 - f & 7) + -47, a < e + 16);
  i[1]:int = 27;
  (i + 16)[0]:long@4 = 0[16503]:long@4;
  i[2]:long@4 = 0[16501]:long@4;
  0[16503]:int = i + 8;
  0[16502]:int = c;
  0[16501]:int = h;
  0[16504]:int = 0;
  a = i + 24;
  loop L_wb {
    a[1]:int = 7;
    h = a + 8;
    a = a + 4;
    if (h < f) continue L_wb;
  }
  if (i == e) goto B_f;
  i[1]:int = i[1]:int & -2;
  e[1]:int = (h = i - e) | 1;
  i[0]:int = h;
  if (h > 255) goto B_yb;
  a = (h & -8) + 65596;
  f = 0[16389]:int;
  if (f & (h = 1 << (h >> 3))) goto B_ac;
  0[16389]:int = f | h;
  f = a;
  goto B_zb;
  label B_ac:
  f = a[2]:int;
  label B_zb:
  a[2]:int = e;
  f.d = e;
  h = 12;
  i = 8;
  goto B_xb;
  label B_yb:
  a = 31;
  if (h > 16777215) goto B_bc;
  a = (h >> 38 - (a = clz(h >> 8)) & 1) - (a << 1) + 62;
  label B_bc:
  e[7]:int = a;
  e[4]:long@4 = 0L;
  f = (a << 2) + 65860;
  i = 0[16390]:int;
  if (i & (c = 1 << a)) goto B_ec;
  0[16390]:int = i | c;
  f.a = e;
  e[6]:int = f;
  goto B_dc;
  label B_ec:
  a = h << select_if(0, 25 - (a >> 1), a == 31);
  i = f.a;
  loop L_fc {
    f = i;
    if ((f.b & -8) == h) goto B_cc;
    i = a >> 29;
    a = a << 1;
    c = f + (i & 4) + 16;
    i = c[0];
    if (i) continue L_fc;
  }
  c[0] = e;
  e[6]:int = f;
  label B_dc:
  h = 8;
  i = 12;
  f = e;
  a = e;
  goto B_xb;
  label B_cc:
  a = f.c;
  a[3]:int = e;
  f.c = e;
  e[2]:int = a;
  a = 0;
  h = 24;
  i = 12;
  label B_xb:
  (e + i)[0]:int = f;
  (e + h)[0]:int = a;
  label B_f:
  a = 0[16392]:int;
  if (a <= d) goto B_e;
  0[16392]:int = (e = a - d);
  0[16395]:int = (f = (a = 0[16395]:int) + d);
  f.b = e | 1;
  a[1]:int = d | 3;
  a = a + 8;
  goto B_a;
  label B_e:
  f_w()[0]:int = 48;
  a = 0;
  goto B_a;
  label B_d:
  a[0]:int = h;
  a[1]:int = a[1]:int + c;
  a = f_z(h, i, d);
  goto B_a;
  label B_c:
  if (eqz(l)) goto B_gc;
  if (i != (f = ((h = i[7]:int) << 2) + 65860).a) goto B_ic;
  f.a = a;
  if (a) goto B_hc;
  0[16390]:int = (k = k & -2 << h);
  goto B_gc;
  label B_ic:
  (l + select_if(16, 20, l[4] == i))[0]:int = a;
  if (eqz(a)) goto B_gc;
  label B_hc:
  a[6]:int = l;
  f = i[4]:int;
  if (eqz(f)) goto B_jc;
  a[4]:int = f;
  f.g = a;
  label B_jc:
  f = i[5]:int;
  if (eqz(f)) goto B_gc;
  a[5]:int = f;
  f.g = a;
  label B_gc:
  if (e > 15) goto B_lc;
  i[1]:int = (a = e + d) | 3;
  a = i + a;
  a[1]:int = a[1]:int | 1;
  goto B_kc;
  label B_lc:
  i[1]:int = d | 3;
  h = i + d;
  h[1]:int = e | 1;
  (h + e)[0]:int = e;
  if (e > 255) goto B_mc;
  a = (e & -8) + 65596;
  d = 0[16389]:int;
  if (d & (e = 1 << (e >> 3))) goto B_oc;
  0[16389]:int = d | e;
  e = a;
  goto B_nc;
  label B_oc:
  e = a[2]:int;
  label B_nc:
  a[2]:int = h;
  e[3]:int = h;
  h[3]:int = a;
  h[2]:int = e;
  goto B_kc;
  label B_mc:
  a = 31;
  if (e > 16777215) goto B_pc;
  a = (e >> 38 - (a = clz(e >> 8)) & 1) - (a << 1) + 62;
  label B_pc:
  h[7]:int = a;
  h[4]:long@4 = 0L;
  d = (a << 2) + 65860;
  if (k & (f = 1 << a)) goto B_sc;
  0[16390]:int = k | f;
  d.a = h;
  h[6]:int = d;
  goto B_rc;
  label B_sc:
  a = e << select_if(0, 25 - (a >> 1), a == 31);
  f = d.a;
  loop L_tc {
    d = f;
    if ((d.b & -8) == e) goto B_qc;
    f = a >> 29;
    a = a << 1;
    c = d + (f & 4) + 16;
    f = c[0];
    if (f) continue L_tc;
  }
  c[0] = h;
  h[6]:int = d;
  label B_rc:
  h[3]:int = h;
  h[2]:int = h;
  goto B_kc;
  label B_qc:
  a = d.c;
  a[3]:int = h;
  d.c = h;
  h[6]:int = 0;
  h[3]:int = d;
  h[2]:int = a;
  label B_kc:
  a = i + 8;
  goto B_a;
  label B_b:
  if (eqz(k)) goto B_uc;
  if (h != (f = ((i = h[7]:int) << 2) + 65860).a) goto B_wc;
  f.a = a;
  if (a) goto B_vc;
  0[16390]:int = j & -2 << i;
  goto B_uc;
  label B_wc:
  (k + select_if(16, 20, k[4] == h))[0]:int = a;
  if (eqz(a)) goto B_uc;
  label B_vc:
  a[6]:int = k;
  f = h[4]:int;
  if (eqz(f)) goto B_xc;
  a[4]:int = f;
  f.g = a;
  label B_xc:
  f = h[5]:int;
  if (eqz(f)) goto B_uc;
  a[5]:int = f;
  f.g = a;
  label B_uc:
  if (e > 15) goto B_zc;
  h[1]:int = (a = e + d) | 3;
  a = h + a;
  a[1]:int = a[1]:int | 1;
  goto B_yc;
  label B_zc:
  h[1]:int = d | 3;
  d = h + d;
  d.b = e | 1;
  (d + e)[0]:int = e;
  if (eqz(g)) goto B_ad;
  f = (g & -8) + 65596;
  a = 0[16394]:int;
  i = 1 << (g >> 3);
  if (i & c) goto B_cd;
  0[16389]:int = i | c;
  i = f;
  goto B_bd;
  label B_cd:
  i = f.c;
  label B_bd:
  f.c = a;
  i[3]:int = a;
  a[3]:int = f;
  a[2]:int = i;
  label B_ad:
  0[16394]:int = d;
  0[16391]:int = e;
  label B_yc:
  a = h + 8;
  label B_a:
  g_a = b + 16;
  return a;
}

function f_z(a:int_ptr, b:int_ptr, c:int_ptr):int {
  var f:int;
  var h:int_ptr;
  var j:int_ptr;
  var d:int_ptr = a + (-8 - a & 7);
  d[1] = c | 3;
  var e:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int } = 
    b + (-8 - b & 7);
  a = e - (f = d + c);
  if (e != 0[16395]:int) goto B_b;
  0[16395]:int = f;
  0[16392]:int = (c = 0[16392]:int + a);
  f[1]:int = c | 1;
  goto B_a;
  label B_b:
  if (e != 0[16394]:int) goto B_c;
  0[16394]:int = f;
  0[16391]:int = (c = 0[16391]:int + a);
  f[1]:int = c | 1;
  (f + c)[0]:int = c;
  goto B_a;
  label B_c:
  b = e.b;
  if ((b & 3) != 1) goto B_d;
  var g:int = b & -8;
  c = e.d;
  if (b > 255) goto B_f;
  if (c != (h = e.c)) goto B_g;
  0[16389]:int = 0[16389]:int & -2 << (b >> 3);
  goto B_e;
  label B_g:
  h[3] = c;
  c[2] = h;
  goto B_e;
  label B_f:
  var i:int_ptr = e.g;
  if (c == e) goto B_i;
  b = e.c;
  b[3] = c;
  c[2] = b;
  goto B_h;
  label B_i:
  b = e.f;
  if (eqz(b)) goto B_l;
  h = e + 20;
  goto B_k;
  label B_l:
  b = e.e;
  if (eqz(b)) goto B_j;
  h = e + 16;
  label B_k:
  loop L_m {
    j = h;
    c = b;
    h = c + 20;
    b = c[5];
    if (b) continue L_m;
    h = c + 16;
    b = c[4];
    if (b) continue L_m;
  }
  j[0] = 0;
  goto B_h;
  label B_j:
  c = 0;
  label B_h:
  if (eqz(i)) goto B_e;
  if (e != (b = ((h = e.h) << 2) + 65860)[0]) goto B_o;
  b[0] = c;
  if (c) goto B_n;
  0[16390]:int = 0[16390]:int & -2 << h;
  goto B_e;
  label B_o:
  (i + select_if(16, 20, i[4] == e))[0]:int = c;
  if (eqz(c)) goto B_e;
  label B_n:
  c[6] = i;
  b = e.e;
  if (eqz(b)) goto B_p;
  c[4] = b;
  b[6] = c;
  label B_p:
  b = e.f;
  if (eqz(b)) goto B_e;
  c[5] = b;
  b[6] = c;
  label B_e:
  a = g + a;
  e = e + g;
  b = e.b;
  label B_d:
  e.b = b & -2;
  f[1]:int = a | 1;
  (f + a)[0]:int = a;
  if (a > 255) goto B_q;
  c = (a & -8) + 65596;
  b = 0[16389]:int;
  if (b & (a = 1 << (a >> 3))) goto B_s;
  0[16389]:int = b | a;
  a = c;
  goto B_r;
  label B_s:
  a = c[2];
  label B_r:
  c[2] = f;
  a[3] = f;
  f[3]:int = c;
  f[2]:int = a;
  goto B_a;
  label B_q:
  c = 31;
  if (a > 16777215) goto B_t;
  c = (a >> 38 - (c = clz(a >> 8)) & 1) - (c << 1) + 62;
  label B_t:
  f[7]:int = c;
  f[4]:long@4 = 0L;
  b = (c << 2) + 65860;
  h = 0[16390]:int;
  if (h & (e = 1 << c)) goto B_w;
  0[16390]:int = h | e;
  b[0] = f;
  f[6]:int = b;
  goto B_v;
  label B_w:
  c = a << select_if(0, 25 - (c >> 1), c == 31);
  h = b[0];
  loop L_x {
    b = h;
    if ((b[1] & -8) == a) goto B_u;
    h = c >> 29;
    c = c << 1;
    e = b + (h & 4) + 16;
    h = e.a;
    if (h) continue L_x;
  }
  e.a = f;
  f[6]:int = b;
  label B_v:
  f[3]:int = f;
  f[2]:int = f;
  goto B_a;
  label B_u:
  c = b[2];
  c[3] = f;
  b[2] = f;
  f[6]:int = 0;
  f[3]:int = b;
  f[2]:int = c;
  label B_a:
  return d + 8;
}

export function free(a:int_ptr) {
  var c:int_ptr;
  var e:int_ptr;
  var f:int_ptr;
  var h:int_ptr;
  var g:int_ptr;
  if (eqz(a)) goto B_a;
  var b:int = a + -8;
  var d:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int } = 
    b + (a = (c = (a + -4)[0]:int) & -8);
  if (c & 1) goto B_b;
  if (eqz(c & 2)) goto B_a;
  b = b - (e = b[0]:int);
  if (b < 0[16393]:int) goto B_a;
  a = e + a;
  if (b == 0[16394]:int) goto B_f;
  c = b[3]:int;
  if (e > 255) goto B_g;
  if (c != (f = b[2]:int)) goto B_e;
  0[16389]:int = 0[16389]:int & -2 << (e >> 3);
  goto B_b;
  label B_g:
  g = b[6]:int;
  if (c == b) goto B_h;
  e = b[2]:int;
  e[3] = c;
  c[2] = e;
  goto B_c;
  label B_h:
  e = b[5]:int;
  if (eqz(e)) goto B_j;
  f = b + 20;
  goto B_i;
  label B_j:
  e = b[4]:int;
  if (eqz(e)) goto B_d;
  f = b + 16;
  label B_i:
  loop L_k {
    h = f;
    c = e;
    f = c + 20;
    e = c[5];
    if (e) continue L_k;
    f = c + 16;
    e = c[4];
    if (e) continue L_k;
  }
  h[0] = 0;
  goto B_c;
  label B_f:
  c = d.b;
  if ((c & 3) != 3) goto B_b;
  0[16391]:int = a;
  d.b = c & -2;
  b[1]:int = a | 1;
  d.a = a;
  return ;
  label B_e:
  f[3] = c;
  c[2] = f;
  goto B_b;
  label B_d:
  c = 0;
  label B_c:
  if (eqz(g)) goto B_b;
  if (b != (e = ((f = b[7]:int) << 2) + 65860)[0]) goto B_m;
  e[0] = c;
  if (c) goto B_l;
  0[16390]:int = 0[16390]:int & -2 << f;
  goto B_b;
  label B_m:
  (g + select_if(16, 20, g[4] == b))[0]:int = c;
  if (eqz(c)) goto B_b;
  label B_l:
  c[6] = g;
  e = b[4]:int;
  if (eqz(e)) goto B_n;
  c[4] = e;
  e[6] = c;
  label B_n:
  e = b[5]:int;
  if (eqz(e)) goto B_b;
  c[5] = e;
  e[6] = c;
  label B_b:
  if (b >= d) goto B_a;
  e = d.b;
  if (eqz(e & 1)) goto B_a;
  if (e & 2) goto B_s;
  if (d != 0[16395]:int) goto B_t;
  0[16395]:int = b;
  0[16392]:int = (a = 0[16392]:int + a);
  b[1]:int = a | 1;
  if (b != 0[16394]:int) goto B_a;
  0[16391]:int = 0;
  0[16394]:int = 0;
  return ;
  label B_t:
  if (d != 0[16394]:int) goto B_u;
  0[16394]:int = b;
  0[16391]:int = (a = 0[16391]:int + a);
  b[1]:int = a | 1;
  (b + a)[0]:int = a;
  return ;
  label B_u:
  a = (e & -8) + a;
  c = d.d;
  if (e > 255) goto B_v;
  if (c != (f = d.c)) goto B_w;
  0[16389]:int = 0[16389]:int & -2 << (e >> 3);
  goto B_p;
  label B_w:
  f[3] = c;
  c[2] = f;
  goto B_p;
  label B_v:
  g = d.g;
  if (c == d) goto B_x;
  e = d.c;
  e[3] = c;
  c[2] = e;
  goto B_q;
  label B_x:
  e = d.f;
  if (eqz(e)) goto B_z;
  f = d + 20;
  goto B_y;
  label B_z:
  e = d.e;
  if (eqz(e)) goto B_r;
  f = d + 16;
  label B_y:
  loop L_aa {
    h = f;
    c = e;
    f = c + 20;
    e = c[5];
    if (e) continue L_aa;
    f = c + 16;
    e = c[4];
    if (e) continue L_aa;
  }
  h[0] = 0;
  goto B_q;
  label B_s:
  d.b = e & -2;
  b[1]:int = a | 1;
  (b + a)[0]:int = a;
  goto B_o;
  label B_r:
  c = 0;
  label B_q:
  if (eqz(g)) goto B_p;
  if (d != (e = ((f = d.h) << 2) + 65860)[0]) goto B_ca;
  e[0] = c;
  if (c) goto B_ba;
  0[16390]:int = 0[16390]:int & -2 << f;
  goto B_p;
  label B_ca:
  (g + select_if(16, 20, g[4] == d))[0]:int = c;
  if (eqz(c)) goto B_p;
  label B_ba:
  c[6] = g;
  e = d.e;
  if (eqz(e)) goto B_da;
  c[4] = e;
  e[6] = c;
  label B_da:
  e = d.f;
  if (eqz(e)) goto B_p;
  c[5] = e;
  e[6] = c;
  label B_p:
  b[1]:int = a | 1;
  (b + a)[0]:int = a;
  if (b != 0[16394]:int) goto B_o;
  0[16391]:int = a;
  return ;
  label B_o:
  if (a > 255) goto B_ea;
  c = (a & -8) + 65596;
  e = 0[16389]:int;
  if (e & (a = 1 << (a >> 3))) goto B_ga;
  0[16389]:int = e | a;
  a = c;
  goto B_fa;
  label B_ga:
  a = c[2];
  label B_fa:
  c[2] = b;
  a[3] = b;
  b[3]:int = c;
  b[2]:int = a;
  return ;
  label B_ea:
  c = 31;
  if (a > 16777215) goto B_ha;
  c = (a >> 38 - (c = clz(a >> 8)) & 1) - (c << 1) + 62;
  label B_ha:
  b[7]:int = c;
  b[4]:long@4 = 0L;
  d = (c << 2) + 65860;
  e = 0[16390]:int;
  if (e & (f = 1 << c)) goto B_la;
  0[16390]:int = e | f;
  a = 8;
  c = 24;
  f = d;
  goto B_ka;
  label B_la:
  c = a << select_if(0, 25 - (c >> 1), c == 31);
  f = d.a;
  loop L_ma {
    e = f;
    if ((e[1] & -8) == a) goto B_ja;
    f = c >> 29;
    c = c << 1;
    d = e + (f & 4) + 16;
    f = d.a;
    if (f) continue L_ma;
  }
  a = 8;
  c = 24;
  f = e;
  label B_ka:
  e = b;
  h = b;
  goto B_ia;
  label B_ja:
  f = e[2];
  f[3] = b;
  c = 8;
  d = e + 8;
  h = 0;
  a = 24;
  label B_ia:
  d.a = b;
  (b + c)[0]:int = f;
  b[3]:int = e;
  (b + a)[0]:int = h;
  0[16397]:int = select_if(b = 0[16397]:int + -1, -1, b);
  label B_a:
}

