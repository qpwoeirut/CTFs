

# This file was *autogenerated* from the file solve_copperbox.sage
from sage.all_cmdline import *   # import sage library

_sage_const_0x31337313373133731337313373133731337313373133731337313373133732ad = Integer(0x31337313373133731337313373133731337313373133731337313373133732ad); _sage_const_48 = Integer(48); _sage_const_77759147870011250959067600299812670660963056658309113392093130 = Integer(77759147870011250959067600299812670660963056658309113392093130); _sage_const_50608194198883881938583003429122755064581079722494357415324546 = Integer(50608194198883881938583003429122755064581079722494357415324546); _sage_const_0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef = Integer(0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef); _sage_const_0xdeadc0dedeadc0dedeadc0dedeadc0dedeadc0dedeadc0dedeadc0dedeadc0de = Integer(0xdeadc0dedeadc0dedeadc0dedeadc0dedeadc0dedeadc0dedeadc0dedeadc0de); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_30 = Integer(30)
load("coppersmith.sage")  # https://github.com/defund/coppersmith/blob/master/coppersmith.sage

p = _sage_const_0x31337313373133731337313373133731337313373133731337313373133732ad 
R = Integers(p)

trunc = _sage_const_48 
x0 = R(_sage_const_77759147870011250959067600299812670660963056658309113392093130  << trunc)
y0 = R(_sage_const_50608194198883881938583003429122755064581079722494357415324546  << trunc)

a = R(_sage_const_0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef )
b = R(_sage_const_0xdeadc0dedeadc0dedeadc0dedeadc0dedeadc0dedeadc0dedeadc0dedeadc0de )

# x0 = x / (ax + b)
# x = a*x*x0 + b*x0
# (1 - a*x0)*x = b*x0
# x = b*x0 / (1 - a*x0)

# y0 = (aax + ab + b) / (aaax + aab + ab + b)
# c = ab + b
# d = aab + c
# y0 = (aax + c) / (aaax + d)
# aax + c = aaa*x*y0 + d*y0
# (aa - aaa*y0)*x = d*y0 - c
# x = (d*y0 - c) / (aa - aaa*y0)
# x = (aab*y0 + ab*y0 + b*y0 - ab - b) / (aa - aaa*y0)
# x = (aab*y0 + ab*(y0 - 1) + b*(y0 - 1)) / (aa - aaa*y0)

# b*x0 / (1 - a*x0) = (aab*y0 + ab*(y0 - 1) + b*(y0 - 1)) / (aa - aaa*y0)
# (b*x0)(aa - aaa*y0) = (1 - a*x0)(aab*y0 + ab*(y0 - 1) + b*(y0 - 1))

bounds = _sage_const_1  << trunc, _sage_const_1  << trunc
P = PolynomialRing(R, names=('x', 'y',)); (x, y,) = P._first_ngens(2)
f = (b*(x0 + x))*(a*a - a*a*a*(y0 + y)) - (_sage_const_1  - a*(x0 + x))*(a*a*b*(y0 + y) + a*b*(y0 + y - _sage_const_1 ) + b*(y0 + y - _sage_const_1 ))
solutions = small_roots(f, bounds)

assert len(solutions) == _sage_const_1 

x, y = solutions[_sage_const_0 ]

x0 += x
y0 += y

seed = (x0**-_sage_const_1  - a)**-_sage_const_1  * b
flag = (seed - b) * a**-_sage_const_1 
print(int(flag).to_bytes(_sage_const_30 ))

