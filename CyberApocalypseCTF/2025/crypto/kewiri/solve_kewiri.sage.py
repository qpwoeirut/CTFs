

# This file was *autogenerated* from the file solve_kewiri.sage
from sage.all_cmdline import *   # import sage library

_sage_const_48827 = Integer(48827); _sage_const_21214334341047589034959795830530169972304000967355896041112297190770972306665257150126981587914335537556050020788061 = Integer(21214334341047589034959795830530169972304000967355896041112297190770972306665257150126981587914335537556050020788061); _sage_const_1 = Integer(1); _sage_const_2 = Integer(2); _sage_const_5 = Integer(5); _sage_const_635599 = Integer(635599); _sage_const_2533393 = Integer(2533393); _sage_const_4122411947 = Integer(4122411947); _sage_const_175521834973 = Integer(175521834973); _sage_const_206740999513 = Integer(206740999513); _sage_const_1994957217983 = Integer(1994957217983); _sage_const_215264178543783483824207 = Integer(215264178543783483824207); _sage_const_10254137552818335844980930258636403 = Integer(10254137552818335844980930258636403); _sage_const_17 = Integer(17); _sage_const_408179155510362278173926919850986501979230710105776636663982077437889191180248733396157541580929479690947601351140 = Integer(408179155510362278173926919850986501979230710105776636663982077437889191180248733396157541580929479690947601351140); _sage_const_8133402404274856939573884604662224089841681915139687661374894548183248327840533912259514444213329514848143976390134 = Integer(8133402404274856939573884604662224089841681915139687661374894548183248327840533912259514444213329514848143976390134); _sage_const_3 = Integer(3); _sage_const_7 = Integer(7); _sage_const_2296163171090566549378609985715193912396821929882292947886890025295122370435191839352044293887595879123562797851002485690372901374381417938210071827839043175382685244226599901222328480132064138736290361668527861560801378793266019 = Integer(2296163171090566549378609985715193912396821929882292947886890025295122370435191839352044293887595879123562797851002485690372901374381417938210071827839043175382685244226599901222328480132064138736290361668527861560801378793266019)
import math
import subprocess
import time

from pwn import remote
from sympy import isprime

r = remote("94.237.58.253", _sage_const_48827 )

# I don't have Python set up to run Sage and I can only run pwnlib in Python, so here's a dumb hack instead
sage = subprocess.Popen(["sage"], stdin=subprocess.PIPE, stdout=subprocess.PIPE)

print(r.recvuntil(b"You are given the sacred prime: p = ").decode(), end='')
p = int(r.recvline())
print(p)
assert p == _sage_const_21214334341047589034959795830530169972304000967355896041112297190770972306665257150126981587914335537556050020788061 

print(r.recvuntil(b"[1] How many bits is the prime p? > ").decode(), end='')
ans1 = str(p.bit_length())
print(ans1)
r.sendline(ans1.encode())

print(r.recvuntil(b"[2] Enter the full factorization of the order of the multiplicative group in the finite field F_p in ascending order of factors (format: p0,e0_p1,e1_ ..., where pi are the distinct factors and ei the multiplicities of each factor) > ").decode(), end='')
assert isprime(p)
order = p - _sage_const_1 
# From factordb, since p is always the same
factors = {
    _sage_const_2 : _sage_const_2 , _sage_const_5 : _sage_const_1 , _sage_const_635599 : _sage_const_1 , _sage_const_2533393 : _sage_const_1 , _sage_const_4122411947 : _sage_const_1 , _sage_const_175521834973 : _sage_const_1 , _sage_const_206740999513 : _sage_const_1 , _sage_const_1994957217983 : _sage_const_1 ,
    _sage_const_215264178543783483824207 : _sage_const_1 , _sage_const_10254137552818335844980930258636403 : _sage_const_1 
}
assert math.prod(p_i ** e_i for p_i, e_i in factors.items()) == order
ans2 = '_'.join([f"{p_i},{e_i}" for p_i, e_i in factors.items()])
print(ans2)
r.sendline(ans2.encode())

print(r.recvuntil(b"[3] For this question, you will have to send 1 if the element is a generator of the finite field F_p, otherwise 0.\n").decode(), end='')
for _ in range(_sage_const_17 ):
    element = int(r.recvuntil(b'? > ', drop=True))
    print(f"{element}? > ", end='')
    ans3 = "1"
    for prime in factors:
        if pow(element, order // prime, p) == _sage_const_1 :
            ans3 = "0"
    print(ans3)
    r.sendline(ans3.encode())

print(r.recvuntil(b"The scholars present a sacred mathematical construct, a curve used to protect the most guarded secrets of the realm. Only those who understand its nature may proceed.\na = ").decode(), end='')
a = int(r.recvline())
b = int(r.recvline().decode().split('=')[_sage_const_1 ])
assert a == _sage_const_408179155510362278173926919850986501979230710105776636663982077437889191180248733396157541580929479690947601351140 
assert b == _sage_const_8133402404274856939573884604662224089841681915139687661374894548183248327840533912259514444213329514848143976390134 
print(f"{a}\n{b = }")

print(r.recvuntil(b"[4] What is the order of the curve defined over F_p? > ").decode(), end='')
ans4 = str(p)
print(ans4)
r.sendline(ans4.encode())

print(r.recvuntil(b"[5] Enter the full factorization of the order of the elliptic curve defined over the finite field F_{p^3}. Follow the same format as in question 2 > ").decode(), end='')

# Figuring out that name="z3" was required to avoid hanging took way too long...
order = EllipticCurve(GF(p**_sage_const_3 , name="z3"), [a, b]).cardinality()
# More factordb
factors = {_sage_const_2 : _sage_const_2 , _sage_const_7 : _sage_const_2 , p: _sage_const_1 , _sage_const_2296163171090566549378609985715193912396821929882292947886890025295122370435191839352044293887595879123562797851002485690372901374381417938210071827839043175382685244226599901222328480132064138736290361668527861560801378793266019 : _sage_const_1 }
assert math.prod(p_i ** e_i for p_i, e_i in factors.items()) == order
ans5 = '_'.join([f"{p_i},{e_i}" for p_i, e_i in factors.items()])
print(ans5)
r.sendline(ans5.encode())

print(r.recvuntil(b'The final trial awaits. You must uncover the hidden multiplier "d" such that A = d * G.\n').decode(), end='')
print(r.recvuntil(b"The chosen base point G has x-coordinate: ").decode(), end='')
G_x = int(r.recvline())
print(G_x)
print(r.recvuntil(b"The resulting point A has x-coordinate: ").decode(), end='')
A_x = int(r.recvline())
print(A_x)

print(r.recvuntil(b"[6] What is the value of d? > ").decode(), end='')
print(time.time())
script = f"""
E = EllipticCurve(GF({p}), [{a}, {b}])
G = E.lift_x({G_x})
A = E.lift_x({A_x})
print(A.log(G))
exit
exit
exit
""".lstrip()
sage.stdin.write(script.encode())
sage.kill()
print(sage.stdout.readlines())
ans6 = str(int(sage.stdout.read()))
print(ans6, time.time())
r.sendline(ans6.encode())

print(r.recvall(timeout=_sage_const_5 ).decode())

