# exec(b64decode(''))


# exec(b64decode('aW1wb3J0IHN5cwpleGVjKGI2NGRlY29kZSgnWlhobFl5aGlOalJrWldOdlpHVW9KMk16YkhwTWJrNXNaRWhLYkZrelZubGpNbXgyWW0xNGNHSlhiREJMUkVWM1RVUkJkMDFEYTB0YVdHaHNXWGxvYVU1cVVtdGFWMDUyV2tkVmIwb3hjRmxoUjNoYVpWZG9jRlJ0Y0ZOaE1YQllWRzVhWVZJeFZuWlRha1ozVjFkR1NHVkdjR3hXTW1oM1ZrY3hkMVV5UlhoalJtaFZZbXh3YUZWcVJsZGtiRTUxWTBjNVZFMUVSbnBXVjNCTFlrWmFWbFpVUmxaTlZuQkVWV3RhZDFOSFRqWlJiV3hwWWxaSmVGWnFTalJVTVVwR1QxVmFhVTB5ZUZoVk1GcGhaRVpXVlZOc1RtcGhlbFo0VmxjMVlWWkdXalpSYWs1YVZteFpNRlZyV2tkWFJUbFdaVVphVGsxc1NqRldNbmh2WXpGTmVHTklUbUZOTW5od1ZUQmFZV0l4V1hkWGEzUnBWbTFTU2xsclZuZFVNa1Y1WlVWc1lWWlhVblpaVmxwYVpESk9TVk5zYUZkaGVsWkhWMnRTU2sxV2JGZFdXR3hYWVhwR1UxUlZXa3BsVm5CSVpVaE9WR0Y2Vm5sWmExcEhWV3N4YzFOdWJGVmhNbEl6VkZSS1MyTXlUa2RWYldoWFVqQXhObFpHWkRSV2F6VkhWRzVHVkdKR1NuSlZNRnAzVWxaa2NscEljRTVOUkVJMlZqSndTMWRIU2tkVFdIQmFZbGhvTTFaVlZUQmtNbEpIVW14S1RtSkZjRFZYVkVvMFl6SldjMVJzV2xWaE0xSnZWbXhrTkdReGNFVlRiWEJQVW1zMWVGVXllR0ZoVjBwMFpVaHNXbVZyU25wVmExcFBaRmRPUm1OSGFHbFdSM2d4VmpGa01HRXhTWGxWYTJScFUwWktWMWxzWkc5VE1WcFdWbXM1YUUxclZqWlZNbmgzWVdzeFNHVkdSbFJOTTBKNldXMHhSMlJGT1ZoT1ZrSlRWbnByTVZadGVHOVVNRFZZVW01V1lWTkdXbGxaYTFVeFpFWldObEpyVGxOU2JrSkpXbFZXTUZReFRrZFdWRUpXVFc1Q1RGWnJaRk5UVjBwSlUyMTBWMUl5YUUxV1JtUTBWVEpXU0Zac2FHdGxiRnBWVkZaV1YwMHhWWHBqUnpsVVRVUkdlbFpIY0VkVmF6RkdWbFJHVmsxV2NFUlZhMXAzVTBkV1JrMVdVbFJTTVVsNFZtcEtlazVXVmtaUFZWcHBUVEo0V0ZVd1dtRmtSbFpWVTJ4T2FtRjZWbmhXVnpWaFZrWmFObEpZY0ZwV2JGa3dWV3RhUjFkRk9WWmxSbHBPVFd4S01WWXllRzlqTVUxNFkwaE9ZVTB5ZUhCVk1GcGhZakZaZDFkcmRHbFdiVkpLV1d0V2QxUXlSWGxsUld4aFZsZFNkbGxXV2xwa01rNUpVMnhvVjJGNlZrZFhhMUpLVFZac1YxWlliRmRoZWtaVFZGVmFTbVZzYkhSbFNHUlhVbTVDZVZReGFFTlZNVTVJVldwR1YwMXVhRkJVVkVFMVVtMUplbUpHV21sWFJrWTFWbFpTUzFVeVRuSk9WRnBWWVd0d2NsbHJaRFJUYkhCRlUxUkdXbFpzUmpOWmJuQlRWa2RHY21OR1dscFdiVkpvVld0YWQxTkhWa1psUmtKVFpXMWtObFpITlhkVE1VVjRWV3RhVldFd2NHOVdiVEUwWkRGVmVHRkZPVlJpUmxwSFZrY3hNR0ZIVm5OalJGcGFUVVpaTUZWcldrZFhSMHBJVW14S1RsSXpUalZXVkVaWFlUQTFTRkpyYUZSaVIyaFZXV3hvVTFsV1dsVlJiRTVPWWxaS2VsbHJWbUZoYXpGSVpVWktWbFpGY0ZSWmVrWlBZMVp3TmxOc1VsZGhNSEJHVmpKMGEwNUdUWGRPVldoaFVqSm9XRlJXWkRSa1ZsRjNWbTVhYkZac2NFbFphMUpYWVVkS2MySXpiRmROVmxwWVZGWlZOVkp0U1hwaVJscE9UVlZyZUZkV1VrOVdhekIzVGxSYVZHSkdXbFZVVmxaTFVsWmtjbHBFUW14V2JYUTJWVmR6ZUdFeVJYZE9XRXBhWVRGYU1sUnJXblprTWtwSFZtczFVMDFyTVRaV1J6VjNVekZLUjFSWVpGQlRSWEJSVm1wS1UxWldVbkZVYlhSclZtMVNlbFpITUhoV1JURldUVWh3WVZKRmEzaFhWbHBTWld4T2NtTkdUazVXYmtFeVZqRm9kMU14V25OalJGcGFaV3MxVDFsVVFURlVWbHBXVm1zNWFFMXJjRWRaYm5CRFlURmFTR0ZGZUZWV00yaFlXa1prVjFkSFVqWldiRkpPVmxaWmVsWlVUbmRpTVUxM1RWaE9WMkp0YUc5V2JGWldUVlpWZUZadGRFOVNNRnBKVlRKNGIxWkhTbGxWYlVaWFZrVktWRlJVU2t0ak1rNUhWV3MxVjFaSGVETldWM1J2WVRKU1YxcElUbFZpVkZaVlZGVmtVMWxXYkZkYVJscHJZa1ZXTlZaWE5VdFVNREZZV2pOd1dtSllhRE5XYTJSTFZsZEdSbVJGTldsU2EzQXpWbXhXVjFReVJYbFRhMXBzVWxad2NGcFhNVzlVUmxKWVpVWk9hbFpZWkROV1J6RXdZVlpLV1ZWdVFtRlNSV3Q0VjFaYVZtVnNWbkpsUms1cFlrYzVObGRYTVRSa01WWkhVbTVLYTFKcldsTlVWM2hMWld4V05sSnVUbWxpUlRFMldXdFdTMVJzV2xsVldHeFdWa1Z3VkZsNlJrNWxSMHBKV2taU1YxWXhTbTlYYTJONFZESk9SMU5yYkZoaGEzQlpWbXBPVTJSV1pGZFhiWEJPVW01Qk1sbFZWakJVYlVwSFYyNVdWMkpZUWtSYVYzaFBWbXhrY1ZOdGRFNWhiRnB2Vm14U1QxRXhVa2RXYTFwVllsaFNjRlZzYUZOWlZtUnhVV3BDVDFacmNFcFhhMmhYVjBkR05tRjZSbFpsYTFwUVZWUktTMWRHVGxsalJsSlhUV3N3ZDFaVVNuZFRNVnAwVkd0b2FWSlZOWEZWYWtKM1pERldjbUZIZEd0V2JWSjZWa1pvYjFkR1NuTmpSRnBWWWxoTk1Wa3dWWGhUVjBaSFlrWmFUbUpzU1hwV2JYQlBaREpTY2s1WVNteFNiRnBVV1d4YVMxTXhWbkpWYTA1cFlraENlbFpIZEhkaGJFcFhVMnhPV2sxcVZuSmFSbHByWXpGU2RXSkdVbGRXYTFsNlZqSndTMU14VGtkVGJsWldZa2hDY0ZadGRIZGtiRlY0VmxSU2FtRjZiRmxVVmxaWFlWVXhkRlJVUWxaTmJrSk1WbXRrVTFac1VuUk9WMmhYVFZaWk1sZFdWbXRUTVUxNVZtNVdWbUpZVWxaVVZ6QTFUa1prYzFaVVJsTldiSEJhVjJ0amVGWnJNVWhrTTJoWFRXcENNMVJzWkZkV1ZtdzJWR3MxYUdWc1JYZFdWRXAzVXpGYVNGVnJiRmhoTVVwb1ZXcE9UbVZzVWxaWmVsSlBVbXMxZUZVeWVHRmhNVXB6VW1wU1ZXRnJTak5VYkZweVpWVTFWbVJIZUdsaGVsVjRWbFJKTVdNeVJuSk9XRXBwVW10YVUxUlhlRXRsYkZwR1YyeHdUMVpyTVRSV1J6VkxWbGRGZDA1SWJGWldSWEJVV1hwR1RtVlhVa2hPVmxwVFlYcFdSVmRZY0Vkak1XUkdUVlpvYVZJd1dsUlVWVnBoWkZaUmQxWnVXbXhXYkhCWlYydGFWMkZWTVhSVmF6RldZVEZhV0ZSc1dsTmtSMDVIVTJzNVUxWkdXa2RXYTFwdllURk9jMU51UmxaaVZGWlZWRlpXUzFKV1pISmFSRkpWVm14d1dWZHJWalJpUmxwV1YxUktWMUo2VmpOV1IzTjRWbXM1VjFac1VsZFNhM0JSVm0xMFlWWnJNVmRVV0doVlltdHdhRlJWYUZOa01WWlhZVWhrVmxKcmNFaFphMUpYVmxaWmVsRnVSbUZXYkZWNFdURmFSMVpXVm5KV2JGcFlVbGM1TmxkWE1UUmtNVlpIVW14YWFWSldXazlWYWtwT1RVWlZlV05GZEZkV01ERTJWbXhvUzFWR1dYcFJXR3hXVmtWd1ZGbDZSazlPYkZKeFZHMXNhVk5GU2xaWGJGcFRZakZOZDAxWVRsWmhhM0JYVkZjeFUyUXhXbFZTYlhCT1ZqRmFlbGt3V25OV1IwWnlVMnQwVmsxSFVUQlVWM2gzVWpKR1JtTkhSazVYUlVsM1YyeFdhMkl4YkZoV2JsSlFWbnBXVlZacVNqUmxWbHBJWkVVNVRtSkZWalZXVnpWTFZERkplVlZ1VmxkV1ZuQlFWVlJHYzJOdFVrWmhSM2hUVFcxb2QxWnRjRU5rTWs1eldrWmtWV0V4V25KVVYzQlhZVVphV1dORk9WVldhMVl6Vmxkd1MyRXlTa2hsUjBaYVpXdEtlbFpWVmpCT2JVcEpWV3hLVGsxc1NqRldSRUpYWkcxV1YxZHNiRk5oYkhCd1ZGY3hUazFHVlhsalJYUlhWakJhZWxaSGRFOWhiRXAxVVc1a1ZtRXlhSEphUmxwclkyczVTV05HVWxkV2ExbDZWa1JHVjJNeFNsZFNiR2hoVWpCYVdGUlVTbTVOYkZsNVpVVTVVMVl4UmpWVWJHUkhWbXN4ZFZGck1WZFdWbHBRV1ZSS1MxSnRWa2hqUjNCT1VqTm9VMVpXVWt0Vk1rNTBWRzVXVldKdVFsVldiRlV4Wkd4c05sSnVUbGhTVkVaWldXdGtSMVV3TVVkWGJsWlZUVVphTWxwV1dtRlRWbFoxVVcxMFRtSlZNSGRXVkVwM1V6RmFWMkl6Y0dwVFJuQm9WRlZvVTFOV2NGWmFSemxvVm14c00xa3dhRXRYUmxweVRsVmFZVkpGYTNoWFZscFNaREExVjFGdGFGZFdhMncyVjFjeE5HUXhVa1prUkZwYVpXczFUMWxZY0c1TlJsVjVZMFYwVjJKVk1UUldSelZIWVRBeGNWWnRhRmRXUlVwTVZqQldNRTVYVGpaV2JXaHBVbFZ3UmxZeWRHdE9SbEpIVld0c1lWTkdXbGxaYTFVeFRsWldObEpyVGxOU2JrSkpXbFZWZUZZeFpFWlRhelZYWVRGd1YxUldXbEpsVjFGNldrZHdUbEl6YUVkV1ZFWnZVVEZPYzFKWWNGVmlWRlpSVld4ak5VNVdXbFZVYlVaT1lrVldOVlpYTlV0VU1ERnpZak53V21KWWFETldWVlUxVm0xU1IxSnNTazVpUlhBMlZtdFdZVmxYUmxkVldIQllZVEZLYUZWcVRtOVVWbXgwVGxkMGExWnRVbmxVTVZKSFZESldkRlJxVmxkU1JVbDNWbFphUm1WV1ZuVlViRkpYVm14dmVsWnJWbUZWTVZweVRsWmthRkpzU25KVVZ6RlRWREZzVjFwRVFtbGlSM2hZVjJ0YWQxbFhWblJoUlhoVlZqTm9XRnBWV25kV1IwNDJWbTFvVTAxWVFrWldNblJyVGtaU1NGUlliRkJTUmtwVldWZDBkMVl4WkhGU2F6bHFZbFpLUjFSc1dsZGhSVEYwVld4S1dsWnNXa2hVVkVaUFZteHdSMXBIY0U1aGVrVXhWbTE0YTJGck5VZFVia1pVWWtad2NWVXdXbGRsVmxGNFdraGtUbUpGVmpWV1Z6VkxWREpXY2xOcVNsVk5SbG95V2xaYVlWZFdWbk5WYlhST1RXNW9UbFpzVWt0TlIxSnlUbFJhV2sweWVGTmFWekZ2VkVaU1dHVkZPVTVpVmtwNVZrY3hNR0ZXU2xsVmFscGFZbTVDZGxWNlFYaGpNVlp4VVcxb1YxWldiekJXVkVaaFVURktSMk5GYUdwbGF6VmhWRlJDUzFSV1dsVlRha0pyWVhwc1IxbHFUbk5XTVZsNVZXeFdZVkpGY0hGVWExcFBZMVpPYzFkdFJrNU5ibWcxVjFod1EyTXhWa1prUkZwcFUwVmFiMVpzVmxwa01WVjRWbXhPVTJKVk5VZGFSVnBUWVVkS2RGVnFSbGROYm1oUVZGUkJOVkp0U1hwaVJtUllVbFJTTlZaV1VrdFZNazV5VGxWYWFWTkdjRlZVVlZKdlpWWlJlRnBJV210aVJWWTFWbGMxVDFaSFZsVmhNM0JhWWxob00xWnJaRWRTYlZKSFVteEtUbUpGY0RaV1dIQkxZakpHVms5VldtbE5NbmhZVlRCVk1XUXhjRWhPVjNSclZtMVNlVmw2VG1GWFJrcHlUbGhzV0dGcldrUlZiR1JTWlZac05sVnNVbWhoTTBKV1YydGpNV015VW5KTlNHUnJVbXhLVTFsdGRFdGhSbXhYVm14T1RtSldTbnBaYTJoTFlXMUdkRlJZY0ZWV00xRjNWVEo0UzFOV2NFaE9WVGxzWWxVME1WWnJXbE5pTVUxM1RWaE9WMkpzY0hKWlZFRXhZMnhzY2xacVFteGlWVzh5V1ZWV01GUnRTa2RUV0dSV1ZrVnZkMWx0ZUd0ak1YQkZWVzE0YVZORlNsWldWbHBxVGxaU2MxZHJXbWhOTTBKVlZteGFTbVZzVVhkV2JrNVdWbXRXTlZaWE5VdGhiVVowWVVSU1YxSjZWbnBaTW5oMlpVZE9TVlZzUWxoU00yaE1WbXhXVjFReVJYbFRhMXByVWpOQ2FGUlhkR0ZYVmxKeVdrZHdUMUpyTlhoVk1uaFhZVVpHTm1KRlZsaGhNbEV3VlhwQk1HVnNaSEZUYkdoWFVqRkdObGRYTVRSa01VNUhWMnhXYUZKWVVrOVphMXBoVFd4c1YxcEhjRTVTYXpFMFZrYzFTMkZyTVVobFJWWmFWbGRvVUZZeWVHRk9iRXAxVVd4b2FFMXNTa2hXTWpWM1lqRk5kMDFZVGxkaGEwcHpWakJrVTJSV1VYZFdibHBzVm14d1NsVXljRmRoTURGMFZGaHdWV0p1UWt4V01uaFRVbXhTY2xadGRFNWhiRnB2Vm14U1QxTXhWa2hTYkZwV1lXdHdjbGxyYUVOa1ZtUnhVMnRrV0ZKdFVsbFhXSEJUVmtkR2NtTkdaRnBOVjJoNlZWZHpOVll4Um5OVmJFcFlVakZLVEZaWGNFZFpWMVp6WWtSYVZHSkdjR2hhVnpGT1pXeFNXR1JIZEZWU2JGcEhWa2N4TUdGV1NsbGhTRVphWld0S2VsWldXa1psVmxaMVUyczVhR0pYWnpKV1ZFWlhWREpKZVZSWWFHbFNiV2hQVm1wS05HRkdWbkZSYkdScFlYcHNSMWxxVG5OV01XUkdWMVJHWVZKRmNIRlVhMXBQWTFaT2MxZHRjRmROTUVsNVZqSndRMDFHVGtoV2EyaG9Vako0V0ZSVmFFTmxWbGw0VjJzNVUxWXhSalZVYkdSSFZtMVdjbGRzUmxwV2JGcFVWRmN4VTJNeVNrbFdiWFJwWWtoQ2FGWkhjRTloTWxKWFdraE9WV0ZzU2xWVVZWSnZaVlpSZUZremFGTk5iRW94VjJ0b1YxZEhSalppUlZKVlltNUNjVnBXV2t0alYwWkdaRVUxYVZKc2J6QlhiRnByWkRBd2VWTnVUbXBTYTBwV1dWUk9VMVpXVWxaVmEyUldVbXh3U2xWWE1UQldWa3BXVGxWT1lWWnNXWGRXYTFwSFYxWk9jbU5HV2xOV1ZGWjVWMVpvZDJFeFVsaFZibFpZWWtoQ1VGUlVSblpsVmxsNVpVVmthMkY2YkVkWmFrNXpWakZaZVZWc2FGcE5NMEpoVkd0YVQyTldUbk5XYlVaT1lraENSbFl5ZEd0TlJteFhWV3RzWVZOR1dsbFphMVV4VGxaV05sSnJUbE5TYmtKSldsVlZlRll4WkVaVGF6VlhZVEZ3VjFSV1dtdFNNVkp4VkcxR1RsSkZXak5YVmxKTFlUSkdSMWRZYUdsU2VsWlJWV3hqTlU1V1duSmhSazVwVm10V05WWlhOVXRYUjBWNldqTndXbUpZYUROV2EyUlBZMjFTUjFKc1NrNWlSWEExVmtkMFUxRXlVWGhWYTJSV1lrWndVRlpzWkRSU2JGSnlXa2QwVldKRlZqTlZNalZQVjIxRmVXRkdRbHBoTVZwNlZsWmFSbVZXVm5WVGJYQm9ZbFpHTlZkclpEUmphekI1VlZoc1QxWXdXbFphVnpFMFZGWmFTV0pJY0U5V01IQlhWa2R3VDJKR1dsbFZiRlphVmtWck1GUnJXazlqVms1elZtMXdWbVZ0ZUVaV01uUnJUa1pTUjJKSVZtRlRSbHBaV1d0Vk1VNVdWalpTYTA1VFVtNUNTVmt6Y0U5WGF6RjBWV3N4V2xac1dsUlVWRXBMWXpKT1IxVnRjRmRYUmtwV1YxWlNUMUV4VWtkV2ExcFZZbGhTY0ZWc1pEUlNNV3cyVVc1T1ZsWnJWalZXVnpWUFZsWkpkMDVVVGxkU1ZscFFWV3hrVW1WVk5WaFNiRnBPVFVoQ1RGWldhSGRSTWtwelZXeGtWV0pyY0hGVmJHaHZVbFpXVjJGSE9WVldhMVl6Vld4b2ExWldXWHBSYTFKWVlsaE5lRmt4WkVabGJFWnlZMFpPVGxkRlJqVldNVkpMWXpGS1dGVlliRTlXTUZwWFZGZHdSMU14Vm5GVGFsSk9WbXMxV0ZWWGRGTlpWa2w2VkZoa1dHSlVWbWhVVjNoclZtMUdSVlJ0YkdsVFJVcFNWa1pvZDJJeFRYZE5XRTVVWW1zMVZscFdhRTVOVm14V1YyczVhV0pXUmpOYVZWWlRWVEZPU0ZWcVJsZE5iazB4VlZSQk5WSnRTWHBpUm1SWFpXMTBOVlpXVWt0Vk1rNXlUa2hzVldKc2NGRlZiR00xVGxaYWMyRkZaRk5TTUZZMlZrZDBkMVV4U1hsVmFrNVhUVVp3UjFwRVJrNWxWa3B6WVVab1YwMXJNSGRXVkVwM1V6RmFXRlJ1U2xWaWExcHlXVzE0ZDJGR1drZGhSVTVWVmpGS2VWWkhNVEJoVmtwWlZXdGtXbUp1UW5aVmVrRjRZekZhZFdGSGFGZE5NVVkwVmtSQ1YyUnRWbGRXV0hCWFlrWktiMWx0TVZOTlZsbDVaVVU1YkZack1UUldSbEpQWVRKS2MyTkhSbFpOVjFKeVZsWmFZVkpXUm5ST1ZsSlhUV3ByTWxkclVrcE5WbXhYVldwYVUxWkdTbFZaVjNSM1ZqRnJkMkZIUmxOU2JrSkpXVE53UTJGSFNuUlZha1pYVFc1b1VGUnJXazVsUmtaeVZXMUdVMDB3TVROV1JWSlBZVEpTVjFwSVRsVmliRXBSVld4ak5VNVdXbk5oUlhSWFVqQmFTVlV4VWxOV1IwWnlZMFphV0dGcldsQlpNV1JTWlZVMVdGSnNXazVoYTFwTVZsWlNUMVF5U25OVmJrNVZZbTE0Y2xSWGNGZGhSbHBWVTFob1ZWSnNWak5WTWpWVFYyMUdjazVWZEZoaWJrSnhWRlJCZUdOdFRrWmpSazVPWW0xa05GWlVSbUZSTVVwSFkwVm9iRkpZUWxSWmJGcExWR3hXVlZGcmRHaFdWR3hIV1dwT2MxWXhaRVpYYkZaYVZucFdjbHBHV210ak1WSjFWV3hTVjFaVVZUSldNalYzWWpGTmQwMVlUbFppYmtKdlZtcE9VMlJXV1hsTlNHUlBWakZhVjFscldrZFZhekZ6VTI1d1ZtVnJXbnBaYlhoelZqRnNObEZ0Um14aVYyaE5Wa1prTkZZd01VZFhia1pUWWxkNFZsUlhOVU5OYkhCR1ZsaG9WMDFFUmtwVlYzUTBWakpLY2sxSWJGZFNSWEI1V2tSS1YxSXlSa2RWYkVwWFVqTm9URlpYTURGVU1sSnpWV3hrVm1GNlZsQldiRkpYWlVac1dXTkZUbFZpVmxvd1dYcE9hMVpYUlhoVGEzUlZZa1pXTkZreFdrOVdWbEp5VDFaa1UwMUVRalJXYTFwclpERmtjazFZU2s1V1JuQldWakJrYjFReGNGaE5WVFZzVm14S1dsa3dWbmRoYXpGSVpVVmFWMUp0YUhwV1JFWmhVbXhhY1ZWc1ZsaFRSVXBRVmtaV1ZrMVZOWE5TYkd4cFVsUnNWRlZ0ZUZabFJscEhWMnhPVTJGNlJubFViRkpoVlRGYVJtTkZPV0ZXTTFKNVZGVmFVMk5zVm5KVGF6bFRWa1phTkZac1dtOVJNVkpYVWxoa1UySnNjRlpaYkdoRFpWWndWbFpVVmxkV2JrRXlWVmR6TlZVeFNYbFZWRUpYVW5wV00xVlhjM2hTYXpWWFZteFdWMUpZUWxGV2JYUnJZVzFXYzFWc1pGWmlSWEJRVld4U2MxWnNaSFZqUlU1VlRWWndTVlpIY0ZkV1ZURkdUa2h3V0dGclJqUlViWGhIVmxaT2NrOVhlR2xXTVVWNFZtdGFZVlV5VG5KT1ZWcFFWbXhhVTFZd1pEUlZSbXhZWlVaYWJHSkdSak5XVjNSaFZHc3hSVlpyV2xkTlZrcFlWa2N4UjJNeFNsVlJiRlpwWW10S1VGZHNXbFpPVmtwSVVsaHdWV0V6UWxOVVZ6RlNUVVphUjFkc1RsWmlWa1l6VkRGV1YxbFhWbkpUYXpsYVZqTm9WMXBXV2xOV01WWnpVMnMxYUdWcldsZFdWM2hUVVRGU2RGWnVTbWxTUmxwV1dXMDFRMVV4VWxoak0yaFBZa1phVmxWWGN6RmlSMHBZVlZod1YxSkZTbEJVVkVaMlpEQXhWVmRzY0d4aE0wSlJWMVprZW1ReVZrZFZibEpxVWxad1QxWnNVa2RTYkZaWFZXeGtWVTFWY0VoV2JHaDNWbFprU1ZGclpHRldNMDE0Vm14YVQxZFdjRVpQVjJob1pXdEpNRlpyVWtkVk1VcDBWbTVLVDFkRlNtOVVWRUV4VXpGV1ZWTnRkRTlTYkVwWVZsZDBkMVF4V2xWaVJscFdWbXhLVEZaVldrdFNNVXB4Vm14V1YySkZjRlJXUjNoV1pVWktWMVpzYkdoU1ZHeHpXVlJLZW1ReFdraE5XR1JWWVhwQ00xUnNhRWRXVmxwR1RsWkdWMkV4Y0VkVVZWcFNaREZTY1ZSdFJrNVNSVlY1VmpKd1QyRXhVblJTYmxKcVRUSlNWbGx0TlVOV01YQllZek5vVTFacmNGWlZWM2hEVmpGSmQwMUlaRmRTYlZJelZWZHpNVkpyTVZWWGJVWk9UVzVvVVZkV1pEUmpiVlp6VlZob1ZtSklRazlWYkZKelVsWnNWVlJyT1ZSaVJWWTFWMWh3UjFaV1dYcFJhMDVoVmpOTmVGVnNXbXRXVmtwelVXeGtVMVpGUmpOV2ExcGhWVEpLY2s1VldrNVhSVnBWVmpCb1ExUXhWbkpXV0doUFVteEtXbGt3Vm5kVU1WcFZWbXRhVjFKdGFETldWVnBMVTBac05sRnNWbE5XVkZaRVYyeGFWbVZGTlhOU2JGWlVZWHBzYjFsVVJsZE5NVnBGVW14T1ZtRjZWa2RVYkdoSFZURmtTR1ZHUmxaaE1sSnhWRlphVTFkWFRrWk9WM1JPVWtWYU5GWnNXbE5STVZKelYydG9ZVkpHU2xaV2FrNURVakZTV0dSRVFsZFNNVVkxVjJ0V05GVXhTWHBVYWxwWFVqTm9WRlpIYzNoU2F6RldWbXhLV0ZORlNsSldWM1JYVm1zeFIxVnVTbFppU0VKUFZGVlNSMlZHYkZsalJUbFZUVlp3U1ZaR1VrZFdWMFY0VTJ4a1ZWWkZSWGhVYlhoSFYxZEtSazlYZUdoTmJtY3lWbFJHVjFVeFZuSk5XRXBQVm14YVdWWnJWa3RWUm5CWVRWaHdUbEpzU2xsWk1GVXhWREZLVlZaVVNsZFNiV2g2VmxWYVlWSnNXbGxqUmxab1RWVndNVmRzV2xaTlZscFhZa1JhVm1GNlZsaFZiR1F3VG14YVIxWnNUbFppVlRWSVdWVmFWMVJzU2tobFJYUmFWbnBCTVZaRVJrWmxWMHBHVTIxR1RsSXphRVpXVjNSdllUSlNWMXBJVGxWaGEwcFJWV3hqTlU1V1duSmhSbHBxWVROUk1sbHJhRU5aVjBWM1RsaEtXbGRJUW5KWmJHUlRaRlprZEZKc1dsZGxiWGhNVjFaU1MxVXdNWE5pU0VaVVlrVndhRlJXYUVOTlJuQldXa2M1V2xZeFdsZFdiVFZEVmtVeFZsWnFUbFpsYTFvelZqQmtWMU5YVGtoU2JHUlRaVzE0VVZaV1VrdGpNVVp6WWpOa2FWSldTbFJWTUdSVFRWWlplV042VWs1V1ZGVXlWMVJPYzFadFZuUmhSWGhWVmpOb1dGcEVTbE5qYkZKMFpFZHNVMWRHUmpWWGExSktUVlpzVjFaWWNHaFNXR2hUVkZWb1ExZHNaRlZUV0dSUFZqRktXRmt3VWxkVmJVcFZVbTVDVm1GclNtaGFSbHBQVmpGU2NtTkhjRkpOYXpVelZYcEdSazlXUWxSWk0wSk1WVlF3T1VwNWEzQW5LU2s9Jykp'))


# import sys
# exec(b64decode(''))


# exec(b64decode('c3lzLnNldHJlY3Vyc2lvbmxpbWl0KDEwMDAwMCkKZXhlYyhiNjRkZWNvZGUoJ1pYaGxZeWhpTmpSa1pXTnZaR1VvSjFwWWFHeFplV2hwVG1wU2ExcFhUblphUjFWdlNucG9TMDFzVWpKbFZVVTFVMVpDUkZwSGN6QmlibVIxVjJ4T1JFOUZiM2xXU0ZadFVUSlNjazVxVW5aVFZ6QjNZVlY0UkZGWE9VeFZNMlJ1V2xoc1MxcHNaM2xpU0Zab1YwWktiVmRJYkVwT2EyeElaVWRvYVZZd2NISlhWazVGWkRJMVlWVXlWazFSTUZJeVpHeHNTazVyYkZGUk1sSnlUa2R3TTJKc2NGUmhWR016VFd4Vk5GTnFTbFJrU0ZwRVdrZHpNMDB6V2pKWGJGSXpZbXh3VUU0d2RGRlJNbEp5WTJ4c2VsTlZUa3RoVld4d1pESmpORk5xU2xaaWJteHlZekJzUkZOdWNFcGhiVGx1V1d0a1IyUkdiSFJWYldoS1ZVVk9hMkV6U2xwak1HeFFTM3BzYm1GdE9XNVBSVzk1VmxoT05XRnVaSFZYYkU1dFV6RkNSRnBIZUV0T1NGVTBVMnBLVkdSSWJISmtWR2hMVFd4U2VHVlhkelZUTVVWM1UzcG9TMDFzVGpGUk1FVTFVMVpDUkZwSGVFMVRTR1IxVjJzNVVFOUZiM2xXU0ZadFVUSlNjazVxVW5aVFZ6RXpZVlY0UkZGWE9VeFZNMlJ1V2xoc1MxcHNaM2xpU0Zab1YwWktiVmRJYkVwT2EyeElaVWRvYVZZd2NISlhWazVGWkRJMVlWVXlWazFSTUZJellteHdWRnByT1hCU1NHUjFWMnhPTTA5RmIzbFZiWFF5VVRKU2NrNTZUakprYkd4SlpESTFZVlF3YnpSVGFrcFZZVmRhUkZwSGVFeFBSemd6VG5wS1ExUkZUa0poVm14d1UxaE9TbFZGVG10aGVscDZZMFY0UkZGWGJHRlJNR3N5VTFWa05HRkhTbGhUYlhSYVZUQlNNbVJzYkVaak1HeFJVVEpTYzFOcVp6SlRWa0pFV2tkNFMwNUhaR2hXTVd4dVQwVnZlVlpIYkRWaGJsb3lWMVZXTVU5RmIzbFZNMUkxWVROVk0wNTZTbFZUTVVKRVdrZDBlVmt6UWsxa2EwNXJZa1Z2TkZvd2JGVk5SMk16VG5wS1JGTXdPSEpQVjJSVVRqTmtkVmRzVG0xVE1VMHpaREkxWVZRelNrcFNNVnA2V1hwS1ZscDZZek5OYTA1TVZVVk9hMkpGYnpCa1ZHaExUV3hXZFdWWGR6VlRNVVYzVTNwb1MwMXNWbmhoVlVVMVUxVmtOR0ZIU2xoVGJYUmFWVEJTTTJKc2NGUk5WVGx3VWtoa2RWZHNUbTVUTUdSYVlWZFZkbEV5VW5KT01XZ3pZbXh3VkdKVWFFdE5iRkp3VlVWT2EySkZlRVppZW1oTFRXeFNjVXd3VG10aVJYUnBaREkxWVZVelVreFNibG96WW14d1VGRnJkRkZSTWxKelV6RnNibE16YkVKTlZYUXlVVEpTYzFNeGJIZFRWV1JoWkcxT2NGSklXakpYVjNSdVdWWmpNRnA2YUV0TmJGWnVWbXBDZWxOVldqSmtNalZoVlROQ1RGVkZUbXRpUlhSYVdqQjBOVkpJWkhWWGF6azFVekZPUTJKWFNYcFRWMk0wVTJwS1ZtTkhiRU5qUjBwd1VraGtkVmRzVFhoWFJscDZUbXM1Y0UxSWFGbFZNblIzVmpOd2RrNXJlRlZTYlZKS1VrUkNibHBzVGtwalJWSlNZMjVrZFZkc1RubFRWVkYzV2pKS1NGSnVVbHBpVmtwdlUxVTRjazlYTVVWaU1tTTBVMnBLVkdSVlRtNWhWMVY2WVVkS1MyVnVVbXRVTW05NFdsVTFSVlpZWkcxVk1Hd3hWMjB3TldWVVl6Tk5helEwVTJwS1ZHUklXa1JhUjNNelRVYzRORk5xU2xaa1JsRjRUakJ3TlZreU5VdGxiazUxVTI1c2FrNXJiRkZSTWxKelZFWlpOVk14VG5KVWEwNHlVVEpTYzFNeWRHNVZSazVEWXpGc1dFMVhiR0ZTTUZadVQwVnZlVlpYWkZWaU1tUk1Va1ZXTlZSdGNGSk9SVFZGVkZoa1NsSnFVbTVUTVVKRVdrZDRUVlpYWkV4bFZVWTJWRzV3VGsxVk9WVlRWRkpQVmtaVk1WTXhUbkphTUhSd1VWaHdVRkpHYkRWVVYzQnFaVlUxY1ZGVVVrVlZXRW96WW14d1VGRlZiRVZOUjJNMFUycEtWV016VlhKUFYzQXlVVEpTYzFONlRqTmliSEJVWlZSb1MwMXNVakpWTW1Sd1ZURmpNV1ZzY0ZsVGFrSktVMGQ0TWxwR2FFcGFNWEIwWlVkb1lXVnRPVzVUVjJ4eVZHdE9NbEV5VW5KT1IyUnVWVVpPUTFscmRFaGxSMmhwVmpCd2NsZFdUa1ZrTWpWaFZYcE9UVkV3VWpKa2JHeGFZekJzVUV0NmJIUlJNMlJ1VDBWdmVWWllSalppTW1NMFUycEtWV0ZzVGtOalJuQndVa2hrZFZkck9IcFRWVkYzVDFWc1JWRlhaR0ZXTTJnMlYyeE9SV1F5TldGVk1uQk1WVVZPYTJKRmVHcGpNR3hSVVRKU2NtTnVUbnBUVlU1dll6RnNXRTFYYkdGU01GWnVUMFZ2ZVZaSVVuQmtNbU0wVTJwS1ZWb3pjSFphTUhSSVpVZG9hVll3Y0hKWFZrNUZaREkxWVZRd05WQmhWVkl6WW14d1RFdDZZek5OYXpnMFUycEtWbU14VG5Ga01qVmhWVEJLV0V0NWN6VmhiRUpFV2tkNFRGUklaSFZYYkU1NVV6RkNSRnBIZUUxV1dFSk5Wa1pWTVZReWQzZGpNR3hGVTFoQ1NsRXpUbTVQUlc5NVZUTmFNbEV5VW5KT01sb3pZbXh3VUU5VmRGRlJNbEp6VkVaYWFWUXpXa1JhUjNoTVltNWtkVmRyT1RGT2VtTjVWREIwVVZFeVVuTlRWVlozVkVaU1ZrNVdhRlJrTW1ST1lWZDBibGxXWkZwYWVtaExUV3hXZUZwVGN6VmhSMXBFV2tkNFRHTXlPRFJUYWtwV1dqRk9jbVJGTlZWaE1tUlJZVlZHTTFOVlpGZGpNazE1Vmxkak5GTnFTbFpqU0ZWeVQxZHdNbEV5VW5KT2VrSjJUMFZ2ZVZaWVVsUmtNMnhNVlRKMGRrNTZZM2xSZW1oTFRXeE9NbVJyVG10aVJYUjZZbnBvUzAxc1VqQmhWVVo0VTFaQ1JGcEhjek5aTTBKTVZUSjBkazlGYjNsV1YyUlVaREpqTkZOcVNsWmFNMnh5WXpCc1VFdDZiSEZoVlVZd1UxVlNSbU5GZEZSaGJtUjFWMnhPTTA5RmIzbFdXRTR5VVRKU2NrNUZiSFpUTURoeVQxZHZkbEV5VW5OVGVUa3pZbXh3VkdGRmRGRlJNbEp6VXpKb2FVOUZiM2xXU0U1d1pHNWtkVmRyYzNaWFJrNXlXakZDUldReVl6UlRha3BVWkc1c2RrMHdkRlJSYmtKaFlWVlNNbVJzYkhKamFtTXpUV3QwU2xKSVpHNU9lbU41VkZSb1MwMXNWblprYTA1cllrVjBlbUo2YUV0TmJGSXdVVEowYmxkc1pEUmxiSEJVVVZjNVRsWkZhM3BUVlZJelQwVnNVVkV5VW5KamFtaDRWRzVzY2xveGNIUlBXR3hLVlVWT2EySkZkR3BhTWtaWVRrZGpORk5xU2xWaFF6bEVXa2Q0UzA0eldqSlhWR1F6WW14d1NGWlVhRXROYkZaMllWZGpNRk14VG5Kak1HeEVZVWhPV2xaNlJuQlhhMlJHV25wb1MwMXNWakJsV0dSdVQwVnZlVlpJU2pWa01tTXpUbnBLV2xSRlRrVmtNalZoVlROS1VHRlZVakprYkhCdVdqSkdXRmRYWXpSVGFrcFdZMWhzUWs5V1FsUlJXR1JLVWpGYWVsbDZTbFphZW1NelRXdGtURlZGVG10aVJYaHFZekJzVVZFeVVuSk9hbWg2VTFWT2IyTXhiRmhOVjJ4aFVqQldiazlGYjNsV1dFWTFaREpqTkZOcVNsWmpWM0IyV2pCMFNHVkhhR2xXTUhCeVYxWk9SV1F5TldGVmVrWlFZVlZTTW1Sc2JIVmtibHBhVGpOa2RWZHNUalJUTURoeVQxY3hSMlJ1WkhWWGF6bERUbnBqZVZKcWFFdE5iRlo0WlZkd00ySnNjRkJVYTNSVVRVUkdVRlpJUW10VVJVNUNaVlYwVkZGWVNrcFZSVTVyWVhwa1RXUnVXbHBPTTFveVYyeEdkazlGYjNsV1YyUlhZM3BaTkZOcVNsVmFNbHBFV2tkMFlWUklaSFZYYkU1NVV6RkNSRnBIZUUxV1dFSk5Wa1pWTVZkR1RqTmFNREZ3WVRKa2FGWXhiRzVQUlc5NVZraFNiVkV5VW5KWGEzZ3pZbXh3VkdOcmRGRlJNbEp5VGtSQ2QxUkdVbFpPVld4RlRrZGtUbEV3U25OWmEyaFBZa1ZzVVZFeVVuSmphbVF5Wkd4ck0yUXlOV0ZVZW14TVZIbHpOV0pWVGpObFZYUlVZVEk0TkZOcVNsVmpVemxFV2tkNFRGbHVaSFZYYkU1NVV6RkNSRnBIY3pOWk1tUk1ZVlZTTTJKc2NGUmpWWFJVWVROQ1RGVkZUbXRpUld4R1l6QnNVVkV5VW5OVVIwNTNWRVZPUldReU5XRlZNMHBLVVhwQ2JsUldUbkpqUlhoRVVWaG9UVkV3UlhkVVYzQkRXbXMxY1dFelFrcFNNWEF5V1RKc1JXUXlOV0ZWTWpGS1VqSjRNVk5XUWtSYVIzTXdXbTVhTWxkVmFETmliSEJRVFhwb1MwMXNTbk5VZVhNMVlVWk9ibVF3ZUVSU1NHUjFWMnM1UTA5RmIzbFdWemt5VVRKU2NrNHlUblpQUlc5NVZsaEdSR0V6VGtwU1IyUjNWMFpGZDFNeVJsaFhWMk0wVTJwS1ZXTnJUbkZrYmxwaFZGaENUV1JyVG10aVJYUkdZbnBvUzAxc1ZuaGhWM1F4VDBWdmVWVXpWbFJoYm1SMVYyeE9lVk14VFROa2JscGFVMWRrVVZaRVFtNVRWMjk2WkRJMVlWUjZSVFJUYWtwV1kwaGFSRnBIY3pCaGJtUjFWMnhPTkZNeFFrUmFSM013VEROa2RWZHNUblJQUlc5NVZsaEtWR0ZIU1RSVGFrcFZXakZPY1dReU5XRlZNakZLVVROT2JsUnNUbmxrTWpWaFZUSXhURlV3U25SWmFrNUtXbnBqTTAxcmNFcFNNbmd4VTFaQ1JGcEhlRXBTYlZKTlVUQkthVTlGYjNsV1dFWlVZVzVrZFZkc1RuUlRWVTU2V25wb1MwMXNVbnBoVjNSdVYyMHdOV1ZWYkZGUk1sSnpVekZzYmxsV1l6QmFlbWhMVFd4V01GWnFSbWxVTW5CMlpFVXhWMDFJUWt4V2JrMHlWREpyZDJWR2FGUlJWR3hLVW01T2RsUldVazVPVlRWeFlYcENUbVZ0YzNkVWExSktUbFV4Y1ZOVVRrOVdSMDB4VkZkd1drMXJNVFpVV0doT1pXMU5lVlJZY0Vwak1HeEZWRmhzVDFaRlZqUlVXSEJPVFVVMU5sRlliRTlTUmxVeFZGWlNSazFyTlRaU1ZFcE9aV3RyTUZSclVrSk9SVFZ4VlZoQ1RWRXdSblpVYlhCeVpVVTVWVnA2UWs5U1IyUTBWRzV3UWsxRk5WVlVWRXBQVmtkamVsUldVbEpPUlRsVlducENUMVpIVGpWVU1FNHpXakF4TmxGVVNrOWxiV1ExVkZaU2NrNUZPVlZSV0d4UFlXeFZlbFF3VWtaTk1EVkZWMVJXVG1Gc1JUQlVibkJPWlZVNVJHRXpUa3BSTW1RMFZGWlNVbVF3T1VWYWVrSk9ZV3hWZVZSV1VsSk5hekZWVWxSQ1RtVnJiRFZVYm5CU1RXc3hObFZVUWs1bGJXUXpWREJPTTFvd01UWlpla3BQWVdzd2VGUnRjRVpOVlRGRlVWUldUMUpHVlhwVVdIQkdaV3MxVlZOWVpFOWhhekI0VkRGU1JtVnJOWEJoTTA1S1VUSmtORlJXVWtwT1ZUbFZVVlJLVUZKR1JqVlVWbEpTVGxVeFJWVllhRTlsYTJzd1ZHMXdUazB3TlhGVVZFNVFWa1pGTUZRd1RqTmFNREUyV2pOa1RtRnRjM2RVYm5CV1pXc3hSVkpVUWxCV1IwMHdWRmR3UWs1Rk1UWmFNMnhQWVd4cmVsUXhVbHBOUlRsRVlUTk9TbEV5WXpGVVYzQkNaV3MxUlZkVVJsQldSVEF3VkZaU2JrNUZNWEZUV0hCT1VrVXhORlJZY0VwT1ZUVkZWRmh3VUZKSFl6QlVSVTVDWlZVeE5sRlVTazloYTFWM1ZERlNVazVGTlhGU1dHeFFVa2RqTVZSWWNFNWtNREZ4VlZSQ1RsWkhaRFJVVjNCR1RXdDBWR1F5WkV4U1IzTjZWR3hTVGsxRk1VVlJXSEJRVWtWVk1GUnJVbHBOTURGeFlYcE9UMVpIVFRGVWExSldUVEExTmxGWWJFOWxhMng2VTFWU1VrMXJOVlZYVkVKUFpXMXpNRlJYY0U1T1JUVTJWRmhzVUZaRlZYcFVhMUp1WlZVMVZWbDZVazVXUld0NlZGVlNVbU5HYUZWTlJHeEtZVzA1VDFFeWJFSmFNR3hFVWtoa2RWZHNUakJQUlc5NVZraFZja3Q2YkhCYWEwNXJZWHBrYldSdVdtRlZWemxLWVRKU01sbHFTbEphTVhCMFpVZG9ZV1ZWVm5CVE1VVjNVekZ3V0dWSWNHRldSemxQVVRKc1Fsb3diRVJTU0dSMVYyczRNVTU2WTNsVmVtaExUV3hXZDJSclRtdGlSWFF5WkRJMVlWVXphRXhSTUhCWldUSXdOV1JXY0RWUmJURnBVakJhZFZOV1RrcGpRMk53UzFFOVBTY3BLUT09Jykp'))


# sys.setrecursionlimit(100000)
# exec(b64decode('ZXhlYyhiNjRkZWNvZGUoJ1pYaGxZeWhpTmpSa1pXTnZaR1VvSnpoS01sUjJlVUU1U1ZCRFpHczBibmR1V2xORE9Fb3lWSFZtUTJSck5qUnZTVzB3YVV4RFFXOUxVM2RuWlhsS1psZ3liSFZoV0ZKbVdIbEpOa2xIZUdoaVYwcHJXVk5FZDI1YVUyVk1RMFIyZGxsSk5rbFFRMlJyTkdwM2JscFRhVGMzTWxVNFNqSlRkSFpEWkdzM00zWjJXbFIzYmxwUE4wdFFRMlJyY2xselNVTkthVWxwZDJjNFNqSlZibmxyYzBsRFNucEphbTluWWtkR2RGbHRVbWhKVUVOa2EzSlpjMGxQS3psbmFtOW5PRW95VlhONWFuZHVXbE5tUzFCRFpHeEtOSFU0U2pKVGRIbHJkVGhLTWxSeGVXdzVTMUV3U3poS01sTjFRMEU1U1ZCRFpHeE1TSGR1V2s5UE9Fb3lWSFZtUTJSck5qUnZTVzEzYVV4RFFXOUxVM2RuWlhsS1psZ3liSFZoV0ZKbVdIbEpOa2xIZUdoaVYwcHJXVk5FZDI1YVUyVk1RMFIzYmxwVFprOXBSSGR1V2xOM09Fb3lVbXQyUTJSck56TjJkbGxJZDI1YVQwbzRTakpVYVdaRFpHeExPRzgzTnpKQ1RFTkJhVmxwU1hOSlVFTmthelp6Y0V4RFFXbGFRMGsyU1VkNGFHSlhTbXRaVTBSMmRsbEZjMGxRUTJSc1NqZzJTVkJEWkd4S05HZGhWMWxuT0VveVZHbDVhbloyV1VWMU9Fb3lVM1I1YTNVM056SlVTMUJEWkd0eVkzQk1ka05rYkVvNFowbFVNR2MzTnpKRFMwOHJPV2RUTjNkdVdsTm1TMU0zZDI1YVQzSkpSMVp6WXpKVlp6YzNNa05MVUVOa2JFbzBkVGhLTWxWdWVXdzVTMUV3U3poS01sVnhhVUU1U1VkNGFHSlhTbXRaVTBSM2JscFRNVTlwUkhkdVdsTm5TMGRaYVdVdlEyUnJOMWgzYmxwVGJUaEtNbFJwVUVOa2JFeEZiemhLTWxScUwwTmtiRXRpZDI1YVUzUkxSblozYmxwUFFrdFFRMlJzUzFsblMzbEJNVXQyUTJSc1MxbHdTVWRhZG1OcFJIWjJXV3RuWVZjMFp6aEtNbFZuVmpCelNVWjJkMjVhVTNCTFVFTmtiRXRaWjB0NVJIZHVXazk1UzFOQ2JXSXpTV2M0U2pKVmNHbENjR0pwUkhkdVdsTXhXRlp6Tms5cE1IaFlVMnR3VjNwdk5reFVSbVJKUkRCblpsTkpjRVJSY25kdVdsTnlTVVF3WjJKSFJuUlpiVkpvU1U4ck9XMUViMmM0U2pKVGRVTm5hV1V6YUdKS2VuUmtUMm94WlU1RVZYZG1VMGwxV20wNWVUYzNNazQ0U2pKVGRIWkRaR3MzTUc4NFNqSlZkRlF4TjBwNVkyNUtlbk51U25sak5rbFFRMlJzVEZZNVMxTnJUa04yUTJSc1MydG5VRk5DYzFsWE1XbGFSMFZuT0VveVZXZFViMmRMUkVWNVRtcFJORTVFVFhkSlJqUm5TMUJEWkd4TVZXZExlVUY2VG5wTk1VOVVTVFJPVkZVMVMxTnJaMHRwUVhwUFJGbDVUV3BqZVU1cVFUUkVVWEozYmxwUFFVbEVNR2M0U2pKVWMzVXJPV3AyUTJSc1N6TjNibHBUZVRoS01sUjJVMmRwVTFjMWVscFlTakJKU0d4MlpGaEpaMXB0ZUdoYWVtOW5TV2xyVGtOMlEyUnJOR2RuVUZOQ1lrdEhlR2hpVjBwcldWTkVkMjVhVXpOTVEwUjJkbGxaYzBsUEt6bHRRM2RuT0VveVZYRjZiMmM0U2pKVWFsTkNjRnBwUkhkdVdrOHpTVVF3T1VsRVFXZGFWM2g2V2xORWQyNWFVMnBMVUVOa2JFeGpjMGxRUTJScmNuTnpTVU5vYzFsWE1XbGFSMFZuT0VveVZIUnBkMmM0U2pKVVozcHZaMHRIZUdoaVYwcHJXVk5FZDI1YVQwNVBhVVIzYmxwTEt6YzNNazg0U2pKVmMxTnFkMjVhVTBKWEt5czVhbEJEWkd4TFRIZHVXbE55UzFCRFpHeE1WWEJNVkZVMVQyd3djMGxFU1hCSlEzTm5PRW95VTNaMlEyUnJOMlozYmxwUE9VdFFRMlJzVEZaaVQzWkRaR3hMYm5kdVdrOTFOemN5VDB0UVEyUnNTVVZ3VEZSVk5WaFRkMmROYVd0bllWZFpaemhLTWxWeFpTczVhR1pEWkd4TGMyODRTakpWWjFOcmRFNVVhMmRRYVVGM1NVZFdjMk15VldjNFNqSlZjSFVyT1dwMlEyUnJOekJ2T0VveVZYUlRkM2xMVTJ0dk56Y3lRemhLTWxOMmRrTmtiRXR6YnpoS01sUjBhVUZ4U1ZCRFpHczNZM0JMVTJ0dk9Fb3lWV2RUZDJjNFNqSlZaM2xyYzBsUEt6bHFhVUYwU1VSRmNFdFRhbmR1V2xOM09Fb3lWWE4yUTJSck5FbHZTMDhyT1dvdlEyUnNTeTkzYmxwVGFFdFFRMlJzUzJoaU9Fb3lWSE5wZG5kdVdrc3ZXRk5yWjFCRWQyYzRTakpUZG5sdk0wdFRRbkJhYVVSMmRsbHJjamMzTWt0SlJIZG5OemN5VFRoS01sVnZka05rYkV0emJ6aEtNbFIwUTJ0bldsZDRlbHBUUVc5TlZFa3pTVVIzT0VsUVEyUnJjamh4VG5scloxcHRPWGxKVUVOa2JFdGpaMkZYTkdjNFNqSlVhQzlEWkd4S04zWjJXVGQzYmxwSFZUaEtNbFZ2YVdjMFMxTnJjMGxEYUhOWlZ6RnBXa2RGWnpoS01sVjBlWGRuT0VveVZISjVkMmMzTnpKWlRFTkVkMjVhVTNKUGFVUjJkbHBuWjJGWFdXYzRTakpWY1hsQk9WQlRRWGRKUjFaell6SlZaemMzTWtkTFVFTmtiRXhqYzBsUVEyUnJOamh6U1VOb2MxbFhNV2xhUjBWbk9Fb3lWWEY1ZDJjNFNqSlZjV3B2WjB0SGVHaGlWMHByV1ZORWQyNWFVekZQYVVSMmRsbHVkblpaTjNkdVdsTjRTMDhyT1cxR2RuZHVXazlDTnpjeVJqaEtNbFZ4ZVdwM2JscFBUa3RUTURGUFZIQmtURU5CZVV0VFFYSkpVRU5rYXpkTWRuWlpOM1oyV2xGdk9Fb3lWV2RXY3pZNFNqSlVaMlpEWkd0YVRIZHVXbE55UzFCRFpHeE1WWEJNVkZVMVdGTjNaMDFwYTJkaFYxbG5PRW95VkhSbVEyUnJXa3gzYmxwVGNrdFFRMlJyTkRCd1RGUlZOVWxFTkdkTlEwSnNZa2hPYkVsUVEyUnJjamQyZGxrM2QyNWFUemxMVHlzNWJVTjNlVXRUYTI4NFNqSlVjUzlEWkd4TFluZHVXbE55UzFCRFpHczNZMmRMYVVSM2JscFRjVXRUYTNCTFVFTmtiRWxGYzBsUVEyUnNUR053VEVORWQyNWFVM0pKUXpCblRWTnJjRXhEUVhoTVEwRXdUV3BDWms1cWEzQkpSMXAyWTJsRWQyNWFVMjFKUjJ4MVNWQkRaR3MwWm5aMldVaDNibHBQTXpoS01sSnNUeXM1YUZObmQweERSSGR1V2s5Q09Fb3lWVzkyUTJSck4yTnZPRW95VlhGRGEzTkpSR2R3V0ZFd1MyRlhXV2M0U2pKVWNrTnFkblphVFhCTWRrTmtiRXRGYnpoS01sVnhhV3QxT0VveVUzVlRhbmR1V2xOeVMxTTNkblpaU1dkUVZEQm5TV296ZDI1YVR6RTRTakpWY0haRFpHczBhbmR1V2xONFMxQkRaR3MwTDNkdVdsTnRPRW95VlhKVGFHSTRTakpVWjFOcWQyNWFVMjFKUTNOblRsTnlkMjVhVTIxTFUwSnRZak5KWnpjM01rcEpSMngxU1ZCRFpHeEpSbVJNUTBKaU9Fb3lWWEZUYW5kdVdsTnRTVU56WnpoS01sUnphV3RuV20wNWVVbFFRMlJzUzFsbllWYzBaemhLTWxWMFZqRmlUMnB2ZEUxV01IQkxWbk0yVDJrd2VGaFRRVGxKUm5OdlRWUk5OVTVxYXpCTmVtc3dUa1JKTlUxcVNUTk9WR00xVFdwWk1rMTZUWGhOZW1NeVRYcEpjMGxFVFhsT1ZFVjRUWHBOTUU1NlFYbE9SRlUxVFZSRk1rNTZSVEpOZWtrMFRrUkJORTVxVVhCTVEwRnZUbXByZUU5VVp6Qk9SR2Q0VG5wQk1FNVVUVEpPVkdjelRWUlJORTlVWnpCT1ZHTjVUME4zWjAxNlFUSk9lbWQ1VFZSck5FOVVRWGxPYWxVelQwUkZNMDVFV1RWTmFsRTBUbnBOZVU5RGEzTkpRMmQ0VFZSUmQwOUVaekJOYWxVeVRWUlJNazFVUlRCTmVrbDVUbnBSTWsxNlVUQk5lbWQzVDBOM1owMTZZekpPYWsweFRtcEZNVTFFUVRWT1JGVXpUWHBGZWs1VVNYZE9hazB4VDFSRmVrNXBhM05KUTJkNFRWUkpOVTlVUVRKUFJGRjVUVlJSTlUxRVVYaE9la2swVG1wTk0wNXFUVE5QVkZFMFQwTjNaMDE2WjNkTmFtc3dUbnBWZWsxRVJUQlBWR00wVFdwQk5FMTZaM2xPYWxrelQxUlpNRTlEYTNOSlEyYzFUV3BCZWs1RVdURlBWRTAwVFZSbk5FMXFTWHBOUkUxNFRYcEpOVTVFVFhwUFJHYzBURU5CZVUxNlFUSk9ha1V3VDFSUk5FNXFSWGxQUkdjMVRYcE5kMDFxVVRCTlZHZDRUV3BGTWt0VGQyZExSR3N6VGxSTk1FMUVRWHBQUkVVMFRrUlpNMDFxYXpOT1ZHTTFUa1JWTTA1NlFYbE9la2x6U1VSUk1rNVVXVEJPZW1zMFRXcE5ORTU2VFhsUFZFVXpUa1JuZVU1VVl6Uk5WRWt6VFVSUmNGaFVNRGxKYW05T1EybEJaMGxEUkhkdVdsTjBPRW95VkhVckt6bHBaa05rYXpkbWRuWmFVVzlKYTJSMllqSlJaMXB0ZUdoYWVVVnBTMUV3UzFwWGVIcGFWRzlPUTJsQlowbERSSGR1V2s4MU56Y3lVemhLTWxWd2RrTmtiRXQyZDI1YVUzaExRMHBZWTIwNWRWcDVRbTFpUjBadVNWTkpjQ2NwS1E9PScpKQ=='))


# exec(b64decode('ZXhlYyhiNjRkZWNvZGUoJzhKMlR2eUE5SVBDZGs0bnduWlNDOEoyVHVmQ2RrNjRvSW0waUxDQW9LU3dnZXlKZlgybHVhWFJmWHlJNklHeGhiV0prWVNEd25aU2VMQ0R2dllJNklQQ2RrNGp3blpTaTc3MlU4SjJTdHZDZGs3M3Z2WlR3blpPN0tQQ2RrcllzSUNKaUlpd2c4SjJVbnlrc0lDSnpJam9nYkdGdFltUmhJUENka3JZc0lPKzlnam9nOEoyVXN5anduWlNmS1BDZGxKNHU4SjJTdHlrdThKMlRxeWw5S1EwSzhKMlN1Q0E5SVBDZGxMSHduWk9POEoyVHVmQ2RrNjRvSW13aUxDQW9LU3dnZXlKZlgybHVhWFJmWHlJNklHeGhiV0prWVNEd25aU2VMQ0R3blpTZk9pRHduWlN3OEoyUmt2Q2RrNzN2dllId25aT0o4SjJUaWZDZGxLOG83NzJCTENBaVlpSXNJUENkazZzcExDQWlaQ0k2SUd4aGJXSmtZU0R2dllFc0lQQ2RsSjg2SVBDZGxKNGdhV1lnOEoyVGl5anZ2WUV1OEoyU3R5a3U3NzJUS1BDZGtyY3BMdkNkbEo4Z0lUMGc3NzJDS08rOWdTN3duWlNmS1M3d25aT3JJR1ZzYzJVZzc3MkNLUENkbEo0dThKMlVueWw5S1EwSzhKMlVxaUE5SUd4aGJXSmtZU0R3blpTMU9pRHduWlNnS0dZaWUvQ2RrN1h3blpTbThKMlRpUENkbExFbzhKMlRqL0NkbEtid25aU3RLRnZ3blpPQktQQ2RsS1lnS3lBMUt2Q2RsS1lwSUdadmNpRHZ2WWtnYVc0ZzhKMlVnVjBzSUZ2d25aU3BLUENkbEtZZ0t5RHduWk95S1NCbWIzSWc4SjJVcGlCcGJpRHduWlMxWFZzNk9pMHhYU2twV3pvNkxURmRJRDBnZlNJcERRcnduWlNySUQwZ2JHRnRZbVJoSU8rOW1Eb2c4SjJTdUNnaWUzaGJKenRkT2oxZU5EVXdmU0l1Wm05eTc3Mk44SjJTdHZDZGs3MG84SjJVdFQxN0p5Y25KenNuSnljNklQQ2RsTFY5S1NrTkN2Q2RsS2tnUFNCc1lXMWlaR0VnOEoyVWdUb2dLREV5TmpRNE5ETXdJRjRnS1BDZGxMVWdLeUF6TnpNMU9USTROVFU1S1NrZ0tpQXpPRFl5TWpjeU5qQTREUXJ3blpPQUlEMGc4SjJUc3UrOWp2Q2RsSzN3blpTeThKMlR2U2dpU1c1elpYSjBJSGx2ZFhJZ1pteGhaem9nSWlrTkN2Q2RrNGdnUFNCYktHeGhiV0prWVNEd25aUzNMQ0R2dllZc0lPKzltQ3dnOEoyVXF6b2c4SjJUalNCcFppRHduWk8zSUQwOUlEQWdaV3h6WlNEd25aU2pLUENkbExjc0lQQ2RrcnNzSUNoc1lXMWlaR0VnOEoyVHRpd2c4SjJUZ3pvZ0tHeGhiV0prWVNEd25aT05PaUR3blpLKzc3Mk84SjJVc1Nqd25aU0JXKys5alBDZGxLTHduWlNyS1BDZGxMVXBMVFU1T2wwc0lESXBJQ3NnOEoyU3Z2Q2RrN2Z3blpPOUtQQ2RsTFZiT3ZDZGxLbnduWk91NzcyT0tQQ2RsSUVwTFRVNVhTd2dNaWtnYVdZZzhKMlVxZSs5aGZDZGxLc284SjJVZ1NrdE5Ua2dQaUF3SUdWc2MyVWc4SjJVcHUrOWp2Q2RrNzBvOEoyVXRTd3lLU2tvNzcyQzhKMlN2dkNkbEtzbzhKMlR0aUFxSVBDZGs3Y3BLU2tvOEoyVWdTd2c4SjJVZ3lrc0lPKzlqaUF0SURFcEtTanduWlN3OEoyVXN2Q2RrNElvS08rOWovQ2RsSy93blpTaEtQQ2RsS2hiOEoyVHNpdnduWksvWFNrZ1BEd2c4SjJTdnlvM0tTQnBaaUR2dllrcjc3MktJRHdnNzcyTThKMlVvdkNkbEtzbzhKMlR0Q2tnWld4elpTQW9NVEkzSUR3OElQQ2RrcjhxTnlrZ1ptOXlJUENkbEtjZ2FXNGc4SjJUaC9DZGxKN3Z2WTd3blpHVThKMlVvaWc0S1Nrc0lDaHNZVzFpWkdFZzhKMlV0eXdnOEoyVHJ5d2c3NzJZTENEd25aU3JPaUR2dlpnZ2FXWWc4SjJVcXlBOVBTQXdJR1ZzYzJVZzc3MkdLUENkbExjc0lQQ2RrNjhzSUNoc1lXMWlaR0VnOEoyVXF5d2c4SjJVcWpvZ0tHeGhiV0prWVNEd25aUzFPaUR2dlludnZZN3duWlN4S08rOW1GdnduWk9CNzcyRjhKMlVxeWp3blpPTktTMDFPVHBkTENBeUtTQXJJUENkazdMdnZZN3Z2WlFvOEoyVWdWczY4SjJUZ2ZDZGtaTHduWlNyS1BDZGxMVXBMVFU1WFN3Z01pa2dhV1lnOEoyVHRmQ2RrWkx3blpTcktQQ2RrNDBwTFRVNUlENGdNQ0JsYkhObElQQ2Rrcjd2dlk3d25aTzlLTys5bUN3eUtTa284SjJUcS9DZGxLYnduWlNyS1BDZGs3Y2dLaUR3blpTcUtTa3BLUENkbElFc0lQQ2RsTGNwTENEd25aU3JJQzBnTVNrcExDQXhMQ0EwTWpCZk5qa3BJR1p2Y2lEd25aU21JR2x1SVBDZGs0ZnZ2WUh3blpPMzhKMlJsTys5aFNnd0xDRHduWk9COEoyVW92Q2RrN2NvOEoyVXFDa3NJRGdwWFEwS2FXWWc4SjJUckNqdnZaTXBMdkNkbEtFbzhKMlVxaWt1OEoyU3VTanduWlNyS1M3dnZZSWdQVDBnSWozd25aTzE4SjJVcHZDZGs0anduWlN4S1BDZGs0L3duWlNtOEoyVXJTaGI4SjJUZ1Nqd25aU21JQ3NnTlNyd25aU21LU0JtYjNJZzc3MkpJR2x1SVBDZGxJRmRMQ0JiOEoyVXFTanduWlNtSUNzZzhKMlRzaWtnWm05eUlQQ2RsS1lnYVc0ZzhKMlV0VjFiT2pvdE1WMHBLVnM2T2kweFhTQTlJRnNvTVRNNU5qazBNemswTkRJNU1qSTNOVGM1TWpZMk16TXhNemMyTXpJc0lETXlOVEV4TXpNME56QXlORFU1TVRFMk56RTJNekk0TkRBNE5qUXBMQ0FvTmpreE9UZzBORGd4TnpBME5UTTJOVGczTVRRNE9UZzBOVGN5T0N3Z016QTJOemd5TVRrNE9UQXlOalUzT0RFM05EWTVNalE0TnpNeU9Da3NJQ2d4TVRRd09EZzBNalUyTVRRMk1URTBNekl5TnpRMk16UTBNemd3T0N3Z016YzJOak0xTmpFMU1EQTVORFUzTXpFek5USXdOak0xT1RFek5pa3NJQ2d4TVRJNU9UQTJPRFF5TVRRNU1EUXhOekk0TmpNM05qTTNPVFE0T0N3Z016Z3dNamswTnpVek1ERTBPVGM0TWpBNE16Z3lOalkzT1RZME9Da3NJQ2c1TWpBek5EWTFPVE00TVRnNE1qSXpNRE14TXpJNU5ETXpPRGc0TENBeU16QTJOakUwT1RRNE5qRXlPRGc1TXpNd01qUTBNVGd4TWpFMktTd2dLRGszTlRNME1EQXpPREU0TkRZM01qazNOVGM1TkRVM056QXlOeklzSURRMk5UWTBOems0TWpNNE56TXlPVEUzTkRneU5UYzRNVEkzTURRcFhUMDlJam9OQ2lBZ0lDRHduWlN0OEoyVHUrKzlpZkNkazdmdnZaUW9Ja2R2YjJRZ1pteGhaeUVpS1EwS1pXeHpaVG9OQ2lBZ0lDRHduWk81NzcyUzhKMlVwdkNkbEt2d25aU3hLQ0pYY205dVp5Qm1iR0ZuSVNJcCcpKQ=='))


# exec(b64decode('8J2TvyA9IPCdk4nwnZSC8J2TufCdk64oIm0iLCAoKSwgeyJfX2luaXRfXyI6IGxhbWJkYSDwnZSeLCDvvYI6IPCdk4jwnZSi772U8J2StvCdk73vvZTwnZO7KPCdkrYsICJiIiwg8J2UnyksICJzIjogbGFtYmRhIPCdkrYsIO+9gjog8J2UsyjwnZSfKPCdlJ4u8J2Styku8J2Tqyl9KQ0K8J2SuCA9IPCdlLHwnZOO8J2TufCdk64oImwiLCAoKSwgeyJfX2luaXRfXyI6IGxhbWJkYSDwnZSeLCDwnZSfOiDwnZSw8J2RkvCdk73vvYHwnZOJ8J2TifCdlK8o772BLCAiYiIsIPCdk6spLCAiZCI6IGxhbWJkYSDvvYEsIPCdlJ86IPCdlJ4gaWYg8J2TiyjvvYEu8J2Styku772TKPCdkrcpLvCdlJ8gIT0g772CKO+9gS7wnZSfKS7wnZOrIGVsc2Ug772CKPCdlJ4u8J2Unyl9KQ0K8J2UqiA9IGxhbWJkYSDwnZS1OiDwnZSgKGYie/Cdk7XwnZSm8J2TiPCdlLEo8J2Tj/CdlKbwnZStKFvwnZOBKPCdlKYgKyA1KvCdlKYpIGZvciDvvYkgaW4g8J2UgV0sIFvwnZSpKPCdlKYgKyDwnZOyKSBmb3Ig8J2UpiBpbiDwnZS1XVs6Oi0xXSkpWzo6LTFdID0gfSIpDQrwnZSrID0gbGFtYmRhIO+9mDog8J2SuCgie3hbJztdOj1eNDUwfSIuZm9y772N8J2StvCdk70o8J2UtT17JycnJzsnJyc6IPCdlLV9KSkNCvCdlKkgPSBsYW1iZGEg8J2UgTogKDEyNjQ4NDMwIF4gKPCdlLUgKyAzNzM1OTI4NTU5KSkgKiAzODYyMjcyNjA4DQrwnZOAID0g8J2Tsu+9jvCdlK3wnZSy8J2TvSgiSW5zZXJ0IHlvdXIgZmxhZzogIikNCvCdk4ggPSBbKGxhbWJkYSDwnZS3LCDvvYYsIO+9mCwg8J2Uqzog8J2TjSBpZiDwnZO3ID09IDAgZWxzZSDwnZSjKPCdlLcsIPCdkrssIChsYW1iZGEg8J2Ttiwg8J2TgzogKGxhbWJkYSDwnZONOiDwnZK+772O8J2UsSjwnZSBW++9jPCdlKLwnZSrKPCdlLUpLTU5Ol0sIDIpICsg8J2SvvCdk7fwnZO9KPCdlLVbOvCdlKnwnZOu772OKPCdlIEpLTU5XSwgMikgaWYg8J2Uqe+9hfCdlKso8J2UgSktNTkgPiAwIGVsc2Ug8J2Upu+9jvCdk70o8J2UtSwyKSko772C8J2SvvCdlKso8J2TtiAqIPCdk7cpKSko8J2UgSwg8J2UgyksIO+9jiAtIDEpKSjwnZSw8J2UsvCdk4IoKO+9j/CdlK/wnZShKPCdlKhb8J2TsivwnZK/XSkgPDwg8J2Svyo3KSBpZiDvvYkr772KIDwg772M8J2UovCdlKso8J2TtCkgZWxzZSAoMTI3IDw8IPCdkr8qNykgZm9yIPCdlKcgaW4g8J2Th/CdlJ7vvY7wnZGU8J2Uoig4KSksIChsYW1iZGEg8J2Utywg8J2Trywg772YLCDwnZSrOiDvvZggaWYg8J2UqyA9PSAwIGVsc2Ug772GKPCdlLcsIPCdk68sIChsYW1iZGEg8J2Uqywg8J2UqjogKGxhbWJkYSDwnZS1OiDvvYnvvY7wnZSxKO+9mFvwnZOB772F8J2UqyjwnZONKS01OTpdLCAyKSArIPCdk7LvvY7vvZQo8J2UgVs68J2TgfCdkZLwnZSrKPCdlLUpLTU5XSwgMikgaWYg8J2TtfCdkZLwnZSrKPCdk40pLTU5ID4gMCBlbHNlIPCdkr7vvY7wnZO9KO+9mCwyKSko8J2Tq/CdlKbwnZSrKPCdk7cgKiDwnZSqKSkpKPCdlIEsIPCdlLcpLCDwnZSrIC0gMSkpLCAxLCA0MjBfNjkpIGZvciDwnZSmIGluIPCdk4fvvYHwnZO38J2RlO+9hSgwLCDwnZOB8J2UovCdk7co8J2UqCksIDgpXQ0KaWYg8J2TrCjvvZMpLvCdlKEo8J2Uqiku8J2SuSjwnZSrKS7vvYIgPT0gIj3wnZO18J2UpvCdk4jwnZSxKPCdk4/wnZSm8J2UrShb8J2TgSjwnZSmICsgNSrwnZSmKSBmb3Ig772JIGluIPCdlIFdLCBb8J2UqSjwnZSmICsg8J2TsikgZm9yIPCdlKYgaW4g8J2UtV1bOjotMV0pKVs6Oi0xXSA9IFsoMTM5Njk0Mzk0NDI5MjI3NTc5MjY2MzMxMzc2MzIsIDMyNTExMzM0NzAyNDU5MTE2NzE2MzI4NDA4NjQpLCAoNjkxOTg0NDgxNzA0NTM2NTg3MTQ4OTg0NTcyOCwgMzA2NzgyMTk4OTAyNjU3ODE3NDY5MjQ4NzMyOCksICgxMTQwODg0MjU2MTQ2MTE0MzIyNzQ2MzQ0MzgwOCwgMzc2NjM1NjE1MDA5NDU3MzEzNTIwNjM1OTEzNiksICgxMTI5OTA2ODQyMTQ5MDQxNzI4NjM3NjM3OTQ4OCwgMzgwMjk0NzUzMDE0OTc4MjA4MzgyNjY3OTY0OCksICg5MjAzNDY1OTM4MTg4MjIzMDMxMzI5NDMzODg4LCAyMzA2NjE0OTQ4NjEyODg5MzMwMjQ0MTgxMjE2KSwgKDk3NTM0MDAzODE4NDY3Mjk3NTc5NDU3NzAyNzIsIDQ2NTY0Nzk4MjM4NzMyOTE3NDgyNTc4MTI3MDQpXT09IjoNCiAgICDwnZSt8J2Tu++9ifCdk7fvvZQoIkdvb2QgZmxhZyEiKQ0KZWxzZToNCiAgICDwnZO5772S8J2UpvCdlKvwnZSxKCJXcm9uZyBmbGFnISIp'))


# \xf0\x9d\x93\xbf = \xf0\x9d\x93\x89\xf0\x9d\x94\x82\xf0\x9d\x93\xb9\xf0\x9d\x93\xae("m", (), {"__init__": lambda \xf0\x9d\x94\x9e, \xef\xbd\x82: \xf0\x9d\x93\x88\xf0\x9d\x94\xa2\xef\xbd\x94\xf0\x9d\x92\xb6\xf0\x9d\x93\xbd\xef\xbd\x94\xf0\x9d\x93\xbb(\xf0\x9d\x92\xb6, "b", \xf0\x9d\x94\x9f), "s": lambda \xf0\x9d\x92\xb6, \xef\xbd\x82: \xf0\x9d\x94\xb3(\xf0\x9d\x94\x9f(\xf0\x9d\x94\x9e.\xf0\x9d\x92\xb7).\xf0\x9d\x93\xab)})\r\n\xf0\x9d\x92\xb8 = \xf0\x9d\x94\xb1\xf0\x9d\x93\x8e\xf0\x9d\x93\xb9\xf0\x9d\x93\xae("l", (), {"__init__": lambda \xf0\x9d\x94\x9e, \xf0\x9d\x94\x9f: \xf0\x9d\x94\xb0\xf0\x9d\x91\x92\xf0\x9d\x93\xbd\xef\xbd\x81\xf0\x9d\x93\x89\xf0\x9d\x93\x89\xf0\x9d\x94\xaf(\xef\xbd\x81, "b", \xf0\x9d\x93\xab), "d": lambda \xef\xbd\x81, \xf0\x9d\x94\x9f: \xf0\x9d\x94\x9e if \xf0\x9d\x93\x8b(\xef\xbd\x81.\xf0\x9d\x92\xb7).\xef\xbd\x93(\xf0\x9d\x92\xb7).\xf0\x9d\x94\x9f != \xef\xbd\x82(\xef\xbd\x81.\xf0\x9d\x94\x9f).\xf0\x9d\x93\xab else \xef\xbd\x82(\xf0\x9d\x94\x9e.\xf0\x9d\x94\x9f)})\r\n\xf0\x9d\x94\xaa = lambda \xf0\x9d\x94\xb5: \xf0\x9d\x94\xa0(f"{\xf0\x9d\x93\xb5\xf0\x9d\x94\xa6\xf0\x9d\x93\x88\xf0\x9d\x94\xb1(\xf0\x9d\x93\x8f\xf0\x9d\x94\xa6\xf0\x9d\x94\xad([\xf0\x9d\x93\x81(\xf0\x9d\x94\xa6 + 5*\xf0\x9d\x94\xa6) for \xef\xbd\x89 in \xf0\x9d\x94\x81], [\xf0\x9d\x94\xa9(\xf0\x9d\x94\xa6 + \xf0\x9d\x93\xb2) for \xf0\x9d\x94\xa6 in \xf0\x9d\x94\xb5][::-1]))[::-1] = }")\r\n\xf0\x9d\x94\xab = lambda \xef\xbd\x98: \xf0\x9d\x92\xb8("{x[\';]:=^450}".for\xef\xbd\x8d\xf0\x9d\x92\xb6\xf0\x9d\x93\xbd(\xf0\x9d\x94\xb5={\'\'\'\';\'\'\': \xf0\x9d\x94\xb5}))\r\n\xf0\x9d\x94\xa9 = lambda \xf0\x9d\x94\x81: (12648430 ^ (\xf0\x9d\x94\xb5 + 3735928559)) * 3862272608\r\n\xf0\x9d\x93\x80 = \xf0\x9d\x93\xb2\xef\xbd\x8e\xf0\x9d\x94\xad\xf0\x9d\x94\xb2\xf0\x9d\x93\xbd("Insert your flag: ")\r\n\xf0\x9d\x93\x88 = [(lambda \xf0\x9d\x94\xb7, \xef\xbd\x86, \xef\xbd\x98, \xf0\x9d\x94\xab: \xf0\x9d\x93\x8d if \xf0\x9d\x93\xb7 == 0 else \xf0\x9d\x94\xa3(\xf0\x9d\x94\xb7, \xf0\x9d\x92\xbb, (lambda \xf0\x9d\x93\xb6, \xf0\x9d\x93\x83: (lambda \xf0\x9d\x93\x8d: \xf0\x9d\x92\xbe\xef\xbd\x8e\xf0\x9d\x94\xb1(\xf0\x9d\x94\x81[\xef\xbd\x8c\xf0\x9d\x94\xa2\xf0\x9d\x94\xab(\xf0\x9d\x94\xb5)-59:], 2) + \xf0\x9d\x92\xbe\xf0\x9d\x93\xb7\xf0\x9d\x93\xbd(\xf0\x9d\x94\xb5[:\xf0\x9d\x94\xa9\xf0\x9d\x93\xae\xef\xbd\x8e(\xf0\x9d\x94\x81)-59], 2) if \xf0\x9d\x94\xa9\xef\xbd\x85\xf0\x9d\x94\xab(\xf0\x9d\x94\x81)-59 > 0 else \xf0\x9d\x94\xa6\xef\xbd\x8e\xf0\x9d\x93\xbd(\xf0\x9d\x94\xb5,2))(\xef\xbd\x82\xf0\x9d\x92\xbe\xf0\x9d\x94\xab(\xf0\x9d\x93\xb6 * \xf0\x9d\x93\xb7)))(\xf0\x9d\x94\x81, \xf0\x9d\x94\x83), \xef\xbd\x8e - 1))(\xf0\x9d\x94\xb0\xf0\x9d\x94\xb2\xf0\x9d\x93\x82((\xef\xbd\x8f\xf0\x9d\x94\xaf\xf0\x9d\x94\xa1(\xf0\x9d\x94\xa8[\xf0\x9d\x93\xb2+\xf0\x9d\x92\xbf]) << \xf0\x9d\x92\xbf*7) if \xef\xbd\x89+\xef\xbd\x8a < \xef\xbd\x8c\xf0\x9d\x94\xa2\xf0\x9d\x94\xab(\xf0\x9d\x93\xb4) else (127 << \xf0\x9d\x92\xbf*7) for \xf0\x9d\x94\xa7 in \xf0\x9d\x93\x87\xf0\x9d\x94\x9e\xef\xbd\x8e\xf0\x9d\x91\x94\xf0\x9d\x94\xa2(8)), (lambda \xf0\x9d\x94\xb7, \xf0\x9d\x93\xaf, \xef\xbd\x98, \xf0\x9d\x94\xab: \xef\xbd\x98 if \xf0\x9d\x94\xab == 0 else \xef\xbd\x86(\xf0\x9d\x94\xb7, \xf0\x9d\x93\xaf, (lambda \xf0\x9d\x94\xab, \xf0\x9d\x94\xaa: (lambda \xf0\x9d\x94\xb5: \xef\xbd\x89\xef\xbd\x8e\xf0\x9d\x94\xb1(\xef\xbd\x98[\xf0\x9d\x93\x81\xef\xbd\x85\xf0\x9d\x94\xab(\xf0\x9d\x93\x8d)-59:], 2) + \xf0\x9d\x93\xb2\xef\xbd\x8e\xef\xbd\x94(\xf0\x9d\x94\x81[:\xf0\x9d\x93\x81\xf0\x9d\x91\x92\xf0\x9d\x94\xab(\xf0\x9d\x94\xb5)-59], 2) if \xf0\x9d\x93\xb5\xf0\x9d\x91\x92\xf0\x9d\x94\xab(\xf0\x9d\x93\x8d)-59 > 0 else \xf0\x9d\x92\xbe\xef\xbd\x8e\xf0\x9d\x93\xbd(\xef\xbd\x98,2))(\xf0\x9d\x93\xab\xf0\x9d\x94\xa6\xf0\x9d\x94\xab(\xf0\x9d\x93\xb7 * \xf0\x9d\x94\xaa)))(\xf0\x9d\x94\x81, \xf0\x9d\x94\xb7), \xf0\x9d\x94\xab - 1)), 1, 420_69) for \xf0\x9d\x94\xa6 in \xf0\x9d\x93\x87\xef\xbd\x81\xf0\x9d\x93\xb7\xf0\x9d\x91\x94\xef\xbd\x85(0, \xf0\x9d\x93\x81\xf0\x9d\x94\xa2\xf0\x9d\x93\xb7(\xf0\x9d\x94\xa8), 8)]\r\nif \xf0\x9d\x93\xac(\xef\xbd\x93).\xf0\x9d\x94\xa1(\xf0\x9d\x94\xaa).\xf0\x9d\x92\xb9(\xf0\x9d\x94\xab).\xef\xbd\x82 == "=\xf0\x9d\x93\xb5\xf0\x9d\x94\xa6\xf0\x9d\x93\x88\xf0\x9d\x94\xb1(\xf0\x9d\x93\x8f\xf0\x9d\x94\xa6\xf0\x9d\x94\xad([\xf0\x9d\x93\x81(\xf0\x9d\x94\xa6 + 5*\xf0\x9d\x94\xa6) for \xef\xbd\x89 in \xf0\x9d\x94\x81], [\xf0\x9d\x94\xa9(\xf0\x9d\x94\xa6 + \xf0\x9d\x93\xb2) for \xf0\x9d\x94\xa6 in \xf0\x9d\x94\xb5][::-1]))[::-1] = [(13969439442922757926633137632, 3251133470245911671632840864), (6919844817045365871489845728, 3067821989026578174692487328), (11408842561461143227463443808, 3766356150094573135206359136), (11299068421490417286376379488, 3802947530149782083826679648), (9203465938188223031329433888, 2306614948612889330244181216), (9753400381846729757945770272, 4656479823873291748257812704)]==":\r\n    \xf0\x9d\x94\xad\xf0\x9d\x93\xbb\xef\xbd\x89\xf0\x9d\x93\xb7\xef\xbd\x94("Good flag!")\r\nelse:\r\n    \xf0\x9d\x93\xb9\xef\xbd\x92\xf0\x9d\x94\xa6\xf0\x9d\x94\xab\xf0\x9d\x94\xb1("Wrong flag!")


# 𝓿 = 𝓉𝔂𝓹𝓮("m", (), {"__init__": lambda 𝔞, ｂ: 𝓈𝔢ｔ𝒶𝓽ｔ𝓻(𝒶, "b", 𝔟), "s": lambda 𝒶, ｂ: 𝔳(𝔟(𝔞.𝒷).𝓫)})
# 𝒸 = 𝔱𝓎𝓹𝓮("l", (), {"__init__": lambda 𝔞, 𝔟: 𝔰𝑒𝓽ａ𝓉𝓉𝔯(ａ, "b", 𝓫), "d": lambda ａ, 𝔟: 𝔞 if 𝓋(ａ.𝒷).ｓ(𝒷).𝔟 != ｂ(ａ.𝔟).𝓫 else ｂ(𝔞.𝔟)})
# 𝔪 = lambda 𝔵: 𝔠(f"{𝓵𝔦𝓈𝔱(𝓏𝔦𝔭([𝓁(𝔦 + 5*𝔦) for ｉ in 𝔁], [𝔩(𝔦 + 𝓲) for 𝔦 in 𝔵][::-1]))[::-1] = }")
# 𝔫 = lambda ｘ: 𝒸("{x[';]:=^450}".forｍ𝒶𝓽(𝔵={'''';''': 𝔵}))
# 𝔩 = lambda 𝔁: (12648430 ^ (𝔵 + 3735928559)) * 3862272608
# 𝓀 = 𝓲ｎ𝔭𝔲𝓽("Insert your flag: ")
# 𝓈 = [(lambda 𝔷, ｆ, ｘ, 𝔫: 𝓍 if 𝓷 == 0 else 𝔣(𝔷, 𝒻, (lambda 𝓶, 𝓃: (lambda 𝓍: 𝒾ｎ𝔱(𝔁[ｌ𝔢𝔫(𝔵)-59:], 2) + 𝒾𝓷𝓽(𝔵[:𝔩𝓮ｎ(𝔁)-59], 2) if 𝔩ｅ𝔫(𝔁)-59 > 0 else 𝔦ｎ𝓽(𝔵,2))(ｂ𝒾𝔫(𝓶 * 𝓷)))(𝔁, 𝔃), ｎ - 1))(𝔰𝔲𝓂((ｏ𝔯𝔡(𝔨[𝓲+𝒿]) << 𝒿*7) if ｉ+ｊ < ｌ𝔢𝔫(𝓴) else (127 << 𝒿*7) for 𝔧 in 𝓇𝔞ｎ𝑔𝔢(8)), (lambda 𝔷, 𝓯, ｘ, 𝔫: ｘ if 𝔫 == 0 else ｆ(𝔷, 𝓯, (lambda 𝔫, 𝔪: (lambda 𝔵: ｉｎ𝔱(ｘ[𝓁ｅ𝔫(𝓍)-59:], 2) + 𝓲ｎｔ(𝔁[:𝓁𝑒𝔫(𝔵)-59], 2) if 𝓵𝑒𝔫(𝓍)-59 > 0 else 𝒾ｎ𝓽(ｘ,2))(𝓫𝔦𝔫(𝓷 * 𝔪)))(𝔁, 𝔷), 𝔫 - 1)), 1, 420_69) for 𝔦 in 𝓇ａ𝓷𝑔ｅ(0, 𝓁𝔢𝓷(𝔨), 8)]
# if 𝓬(ｓ).𝔡(𝔪).𝒹(𝔫).ｂ == "=𝓵𝔦𝓈𝔱(𝓏𝔦𝔭([𝓁(𝔦 + 5*𝔦) for ｉ in 𝔁], [𝔩(𝔦 + 𝓲) for 𝔦 in 𝔵][::-1]))[::-1] = [(13969439442922757926633137632, 3251133470245911671632840864), (6919844817045365871489845728, 3067821989026578174692487328), (11408842561461143227463443808, 3766356150094573135206359136), (11299068421490417286376379488, 3802947530149782083826679648), (9203465938188223031329433888, 2306614948612889330244181216), (9753400381846729757945770272, 4656479823873291748257812704)]==":
#     𝔭𝓻ｉ𝓷ｔ("Good flag!")
# else:
#     𝓹ｒ𝔦𝔫𝔱("Wrong flag!")


# actual program:
import sys


sys.setrecursionlimit(100000)

v = type("m", (), {"__init__": lambda a, b: setattr(a, "b", b), "s": lambda a, b: v(b(a.b).b)})
c = type("l", (), {"__init__": lambda a, b: setattr(a, "b", b), "d": lambda a, b: a if v(a.b).s(b).b != b(a.b).b else b(a.b)})
m = lambda x: c(f"{list(zip([l(i + 5*i) for i in x], [l(i + i) for i in x][::-1]))[::-1] = }")
n = lambda x: c("{x[';]:=^450}".format(x={'''';''': x}))
l = lambda x: (12648430 ^ (x + 3735928559)) * 3862272608
k = input("Insert your flag: ")
s = [(lambda z, f, x, n: x if n == 0 else f(z, f, (lambda m, n: (lambda x: int(x[len(x)-59:], 2) + int(x[:len(x)-59], 2) if len(x)-59 > 0 else int(x,2))(bin(m * n)))(x, z), n - 1))(sum((ord(k[i+j]) << j*7) if i+j < len(k) else (127 << j*7) for j in range(8)), (lambda z, f, x, n: x if n == 0 else f(z, f, (lambda n, m: (lambda x: int(x[len(x)-59:], 2) + int(x[:len(x)-59], 2) if len(x)-59 > 0 else int(x,2))(bin(n * m)))(x, z), n - 1)), 1, 420_69) for i in range(0, len(k), 8)]
if c(s).d(m).d(n).b == "=list(zip([l(i + 5*i) for i in x], [l(i + i) for i in x][::-1]))[::-1] = [(13969439442922757926633137632, 3251133470245911671632840864), (6919844817045365871489845728, 3067821989026578174692487328), (11408842561461143227463443808, 3766356150094573135206359136), (11299068421490417286376379488, 3802947530149782083826679648), (9203465938188223031329433888, 2306614948612889330244181216), (9753400381846729757945770272, 4656479823873291748257812704)]==":
    print("Good flag!")
else:
    print("Wrong flag!")
