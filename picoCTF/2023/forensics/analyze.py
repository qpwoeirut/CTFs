import math
import random
from collections import Counter

import numpy as np
from matplotlib import pyplot as plt


phi = (1 + 5 ** 0.5) / 2


def random_phinary() -> str:
    first = bin(random.randint(0, 1 << 11 - 1))[2:].rjust(11, '0')
    second = bin(random.randint(0, 1 << 3 - 1))[2:].rjust(3, '0')
    return f"{first}.{second}"


def from_phinary(num: str) -> float:
    val = 0
    decimal_places = 0
    for digit in num:
        if digit == '.':
            decimal_places = 1
            continue
        if decimal_places == 0:
            val += int(digit, 2)
            val *= phi
        else:
            val += int(digit, 2) * pow(phi, -decimal_places)
            decimal_places += 1
    return val


def main():
    s

    original = [s[i:i + 15] for i in range(0, len(s), 15)]
    drops = [t[0] for t in Counter(original).most_common()[-9:]]
    t = s
    for drop in drops:
        t = t.replace(drop, '')

    cleaned = [t[i:i + 15] for i in range(0, len(t), 15)]
    # cleaned = [x[::-1] for x in cleaned]
    out = np.array([from_phinary(x) for x in cleaned])

    plt.figure(figsize=(10, 4))
    plt.plot(out, "bo")
    plt.show()
    plt.savefig("cleaned")


    # stuff = [str(int(x < 125)) for x in cleaned]
    # print(''.join(stuff))
    #
    # z = ''.join(stuff)
    # z = z[::-1]
    # print([int(z[i:i+8], 2) for i in range(0, len(z), 8)])

    # random_test()


def random_test():
    randoms = [from_phinary(random_phinary()) for _ in range(127)]
    plt.figure(figsize=(10, 4))
    plt.plot(randoms, "bo")
    # plt.show()
    plt.savefig("randoms")


if __name__ == '__main__':
    main()
