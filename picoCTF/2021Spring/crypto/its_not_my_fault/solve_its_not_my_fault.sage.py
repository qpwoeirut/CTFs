

# This file was *autogenerated* from the file solve_its_not_my_fault.sage
from sage.all_cmdline import *   # import sage library

_sage_const_0 = Integer(0); _sage_const_1 = Integer(1); _sage_const_2 = Integer(2); _sage_const_64 = Integer(64); _sage_const_111969279215946546719033743957627333105991070385761675468597825122841603600826500721254419909804238126505287979072091378991932193100033630822540238486818480153546043000657139611372745916032119557823539695813529092443436228386796363711991164681574602551593022571183640130075072415465269768491741274739261322559 = Integer(111969279215946546719033743957627333105991070385761675468597825122841603600826500721254419909804238126505287979072091378991932193100033630822540238486818480153546043000657139611372745916032119557823539695813529092443436228386796363711991164681574602551593022571183640130075072415465269768491741274739261322559); _sage_const_10 = Integer(10); _sage_const_13 = Integer(13); _sage_const_14 = Integer(14); _sage_const_32 = Integer(32); _sage_const_130958351588057586342502595037725371546540274675157216523265603574906791696815375530857337562850791911619007742113561804445616567788195546319097684438970621808719187171271387773534355741807232813335627176278400075345191851338948960753778532048186090739719583431288334683636288801321944776949127083778422469323 = Integer(130958351588057586342502595037725371546540274675157216523265603574906791696815375530857337562850791911619007742113561804445616567788195546319097684438970621808719187171271387773534355741807232813335627176278400075345191851338948960753778532048186090739719583431288334683636288801321944776949127083778422469323); _sage_const_4285746795855124123577507322370884427272376651042444272734838688563551239633898279453410866004054387131263622485204640987362503819065802712070826655517762810748704318645499196144020202650171957485934115381200442194207657036710438967461783335146800359804293490270011478679112710036756091378628499086239744753 = Integer(4285746795855124123577507322370884427272376651042444272734838688563551239633898279453410866004054387131263622485204640987362503819065802712070826655517762810748704318645499196144020202650171957485934115381200442194207657036710438967461783335146800359804293490270011478679112710036756091378628499086239744753); _sage_const_133122452999179229147722748198441751042844410425843485438585792200659476594598764204439819935395384798543690289177307277095297488723713384401911897720548945909286063427191886353648709736950143377581437655817593933189096031253661625913843698479395438172820720258935245636304238052161598608362181842562317689631 = Integer(133122452999179229147722748198441751042844410425843485438585792200659476594598764204439819935395384798543690289177307277095297488723713384401911897720548945909286063427191886353648709736950143377581437655817593933189096031253661625913843698479395438172820720258935245636304238052161598608362181842562317689631); _sage_const_132838488141593060146271321802148443977387017122375418169858104387260063253072435759986270398672209691888114276154315219942110842937211206988746680179777521762501593874808934122483062944795922451917443785284434931721157731999806918524184342891104065613607889296835146989133503894420548518591944877740478063837 = Integer(132838488141593060146271321802148443977387017122375418169858104387260063253072435759986270398672209691888114276154315219942110842937211206988746680179777521762501593874808934122483062944795922451917443785284434931721157731999806918524184342891104065613607889296835146989133503894420548518591944877740478063837); _sage_const_18 = Integer(18)# https://nitaj.users.lmno.cnrs.fr/rsa21.pdf
# https://www.cits.ruhr-uni-bochum.de/imperia/md/content/may/paper/crypto2007.pdf
# http://www.ams.org/notices/199902/boneh.pdf
# https://mathoverflow.net/questions/120160/attack-on-crt-rsa

from math import ceil, gcd, log2
from time import time


# https://www.csa.iisc.ac.in/~chandan/courses/CNT/notes/lec6.pdf
def multipoint_eval(poly, points: list) -> list:
    # assert poly.nvariables() == 1
    x = poly.variables()[_sage_const_0 ]

    k = ceil(log2(poly.degree()))

    # implicit binary tree, root at idx 1
    polys = [_sage_const_0  for _ in range(_sage_const_1  << k)] + [x - points[i] if i < len(points) else _sage_const_1  for i in range(_sage_const_1  << k)]

    for i in reversed(range(_sage_const_1  << k)):
        polys[i] = polys[_sage_const_2  * i] * polys[_sage_const_2  * i + _sage_const_1 ]

    def recurse(f, pos: int):
        if pos <= _sage_const_64 :
            print(pos)
        if pos - (_sage_const_1  << k) >= len(points):
            return []
        if pos >= (_sage_const_1  << k):
            return [int(f(points[pos - (_sage_const_1  << k)]))]

        r0 = f % polys[_sage_const_2  * pos]
        r1 = f % polys[_sage_const_2  * pos + _sage_const_1 ]
        return recurse(r0, _sage_const_2  * pos) + recurse(r1, _sage_const_2  * pos + _sage_const_1 )

    return recurse(poly, _sage_const_1 )

def test_multipoint_eval():
    n = _sage_const_111969279215946546719033743957627333105991070385761675468597825122841603600826500721254419909804238126505287979072091378991932193100033630822540238486818480153546043000657139611372745916032119557823539695813529092443436228386796363711991164681574602551593022571183640130075072415465269768491741274739261322559 
    R = Integers(n)
    P = PolynomialRing(R, names=('x',)); (x,) = P._first_ngens(1)
    for test_num in range(_sage_const_10 ):
        print(f"Test #{test_num + 1}")
        poly = product([randint(_sage_const_0 , n-_sage_const_1 ) * x + randint(_sage_const_0 , n-_sage_const_1 ) for _ in range(randint(_sage_const_1  << _sage_const_13 , _sage_const_1  << _sage_const_14 ))])
        print(f"Generated polynomial of degree {poly.degree()}")

        points = [randint(_sage_const_1 , n-_sage_const_1 ) for _ in range(poly.degree())]
        print("Generated points")

        result = multipoint_eval(poly, points)
        print("Fast eval done")

        for inp, out in zip(points, result):
            assert poly(inp) == out


def find_p(n, e, D):
    R = IntegerModRing(n)
    while True:
        x = R(randint(_sage_const_1 , _sage_const_1  << _sage_const_32 ))
        print("Using x =", x)

        P = PolynomialRing(R, names=('y',)); (y,) = P._first_ngens(1)

        start = time()
        xx = R(_sage_const_1 )
        xe = x ** e
        terms = []
        for i in range(D):
            terms.append(xx * y - x)
            xx *= xe
        print(f"Created polynomial terms after {time() - start} seconds")
        poly = product(terms)
        print(f"Created polynomial after {time() - start} seconds")

        xx = _sage_const_1 
        xeD = x ** (e * D)
        points = []
        for b in range(D):
            points.append(xx)
            xx *= xeD

        values = multipoint_eval(poly, points)
        print(f"Finished multipoint eval after {time() - start} seconds")
        for val in values:
            p = gcd(val, n)
            if _sage_const_1  < p < n and n % p == _sage_const_0 :
                return p


def main():
    # test_multipoint_eval()
    # return

    # small, works
    # n = 116024973551421324313403477762323932831334106206303667396488969349818769694376768890928608625422729492412029776789785198250292782117981914416229009206294602984552177201284730414795183462008661686584021101028334023334479921423929358658078287691304177969868696825661494258362161588156131191640397096782513185071
    # e = 113274383367488765216115895817701261196141304403526768581752323062076513172921061402984441694444655405620747370383672403977728682356631078693360692556591531520774224557610109091535503243389647307263478567378646723546254897876877938580073138800524139514432677388761089277176487824192097221132975948856605385513

    # small, doesn't work
    # n = 95307629877537952321589515580386026596743493724287830086900756455120795378737558039373469498738289102662440279711485104001835755062703685246946691776129853235606327703842865044800472051198744080129598227084512115540775652266728504212031044654204542300262253647021361570271086910417652138921572339455064666941
    # e = 8316950410981394328479354084934444083623758610472593808431716411895945850776428570082510279008715918218171900767417341714428124208896810547028648888169579228664464525309731965396747073136713599388062207494145487997141710483479398755283774830307726343885452309370566597291161512117566124963672446593721822098

    # small, works
    # n = 122268433968018002693471164225680517936946222231733283269643165031357632411816049571665141083071376187197271926117280668516634772719774800901385551920163009912161210560817900896179092206420287996753030800268946355720457514530009751648511433330620760058627971172058753513997398372656902775622424385368926544819
    # e = 1526969664401411384247248715830999198996411129836028196489027711825708598253282652264368762621523415822797350419612603630812134933177653000619833343794033830219973009373074016788013486649679805515147700244716930617532881545455950898811587301977292660033826599677552831760355099950536297077993598097985700045

    # big, works
    # n = 111969279215946546719033743957627333105991070385761675468597825122841603600826500721254419909804238126505287979072091378991932193100033630822540238486818480153546043000657139611372745916032119557823539695813529092443436228386796363711991164681574602551593022571183640130075072415465269768491741274739261322559
    # e = 94844056873849998274062413979925236493655503498004005950643459704575728902910482180090563681804068340831831761752915870650705953788264935689293313977922238231758889026981796679314089604491968515426075061160251007420295176775934130722464031585923634947235318301891932294937643581476111834363889882387801377659

    # big
    n = _sage_const_130958351588057586342502595037725371546540274675157216523265603574906791696815375530857337562850791911619007742113561804445616567788195546319097684438970621808719187171271387773534355741807232813335627176278400075345191851338948960753778532048186090739719583431288334683636288801321944776949127083778422469323 
    e = _sage_const_4285746795855124123577507322370884427272376651042444272734838688563551239633898279453410866004054387131263622485204640987362503819065802712070826655517762810748704318645499196144020202650171957485934115381200442194207657036710438967461783335146800359804293490270011478679112710036756091378628499086239744753 

    # big
    n = _sage_const_133122452999179229147722748198441751042844410425843485438585792200659476594598764204439819935395384798543690289177307277095297488723713384401911897720548945909286063427191886353648709736950143377581437655817593933189096031253661625913843698479395438172820720258935245636304238052161598608362181842562317689631 
    e = _sage_const_132838488141593060146271321802148443977387017122375418169858104387260063253072435759986270398672209691888114276154315219942110842937211206988746680179777521762501593874808934122483062944795922451917443785284434931721157731999806918524184342891104065613607889296835146989133503894420548518591944877740478063837 

    # D = 1 << 10
    D = _sage_const_1  << _sage_const_18 

    p = find_p(n, e, D)
    print("p =", p)
    print("n =", n)
    assert _sage_const_1  < p < n
    assert n % p == _sage_const_0 
    q = n // p
    print(p + q)


if __name__ == '__main__':
    main()

